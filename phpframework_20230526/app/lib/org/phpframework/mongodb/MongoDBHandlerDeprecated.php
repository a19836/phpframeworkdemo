<?php
/*
 * Copyright (c) 2007 PHPMyFrameWork - Joao Pinto
 * AUTHOR: Joao Paulo Lopes Pinto -- http://jplpinto.com
 * 
 * The use of this code must be allowed first by the creator Joao Pinto, since this is a private and proprietary code.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

include_once get_lib("org.phpframework.mongodb.exception.MongoDBException"); include_once get_lib("org.phpframework.mongodb.IMongoDBHandler"); class MongoDBHandlerDeprecated implements IMongoDBHandler { private $pf3d2eef6; private $pa6b101bd; private $v2068a4d581; private $v30db5ee601; public function connect($v244067a7fe = "", $pb67a2609 = "", $pd97bc935 = "", $v8a9d082c74 = "", $v7e782022ec = "", $v5d3813882f = null) { try{ $pe19888c0 = is_numeric($v7e782022ec) ? $v244067a7fe . ":" . $v7e782022ec : $v244067a7fe; $this->v2068a4d581 = false; $this->v30db5ee601 = !empty($pd97bc935); if (!empty($pd97bc935)) { if (empty($v5d3813882f)) { $v5d3813882f = array(); } $v5d3813882f["username"] = $pd97bc935; $v5d3813882f["password"] = $v8a9d082c74; } $this->pf3d2eef6 = new Mongo($pe19888c0, $v5d3813882f); $this->pa6b101bd = false; if ($this->pf3d2eef6) { $this->pa6b101bd = $this->pf3d2eef6->selectDB($pb67a2609); if ($this->pa6b101bd) { $this->v2068a4d581 = true; return $this->pf3d2eef6; } else { launch_exception(new MongoDBException(2, null, $pb67a2609)); } } else { launch_exception(new MongoDBException(1, null, array($v244067a7fe, $pb67a2609, $pd97bc935, "***", $v7e782022ec))); } } catch(Exception $paec2c009) { launch_exception(new MongoDBException(1, $paec2c009, array($v244067a7fe, $pb67a2609, $pd97bc935, "***", $v7e782022ec))); } } public function close() { if ($this->v2068a4d581) { if ($this->v30db5ee601) { $this->pf3d2eef6->command( array("logout" => 1) ); $this->v2068a4d581 = false; } $this->pf3d2eef6->close(); } } public function ok() { return $this->v2068a4d581; } public function getConn() { return $this->v2068a4d581 ? $this->pf3d2eef6 : null; } public function getDBLink() { return $this->v2068a4d581 ? $this->pa6b101bd : null; } public function get($pbc6196f8, $pbfa01ed1) { if($this->v2068a4d581 && !empty($pbc6196f8) && !empty($pbfa01ed1)) { $v1478ac8d84 = $this->pa6b101bd->selectCollection($pbc6196f8); if (!empty($v1478ac8d84)) { $v28ad2c02f1 = $v1478ac8d84->findOne( array( '_id' => new MongoId($pbfa01ed1) ) ); if (is_array($v28ad2c02f1) && isset($v28ad2c02f1["content"])) { return $v28ad2c02f1["content"]; } } } return false; } public function getByRegex($pbc6196f8, $v5f7147fb39) { $pf12f7921 = array(); if($this->v2068a4d581 && !empty($pbc6196f8) && !empty($v5f7147fb39)) { $v1478ac8d84 = $this->pa6b101bd->selectCollection($pbc6196f8); if (!empty($v1478ac8d84)) { $v5430c73cb8 = new MongoRegex($v5f7147fb39); $pb038c85e = array("raw_id" => $v5430c73cb8); $v7eb3ade8cb = $v1478ac8d84->find($pb038c85e); while($v7eb3ade8cb->hasNext()) { $pf12f7921[] = $v7eb3ade8cb->getNext(); } } } return $pf12f7921; } public function set($pbc6196f8, $pbfa01ed1, $v57b4b0200b) { if($this->v2068a4d581 && !empty($pbc6196f8) && !empty($pbfa01ed1)) { $v1478ac8d84 = $this->pa6b101bd->selectCollection($pbc6196f8); if (empty($v1478ac8d84)) { $v1478ac8d84 = $this->pa6b101bd->createCollection($pbc6196f8); if (!empty($v1478ac8d84)) { $v1478ac8d84->ensureIndex( array( "raw_id" => 1 ) ); } } if (!empty($v1478ac8d84)) { $v5c1c342594 = $v1478ac8d84->save( array( '_id' => new MongoId($pbfa01ed1), 'raw_id' => $pbfa01ed1, "content" => $v57b4b0200b, ), array( "safe" => true, ) ); return $v5c1c342594["ok"]; } } return false; } public function delete($pbc6196f8, $pbfa01ed1) { if($this->v2068a4d581 && !empty($pbc6196f8) && !empty($pbfa01ed1)) { $v1478ac8d84 = $this->pa6b101bd->selectCollection($pbc6196f8); if (!empty($v1478ac8d84)) { return $v1478ac8d84->remove( array( '_id' => new MongoId($pbfa01ed1) ) ); } } return false; } public function deleteByRegex($pbc6196f8, $v5f7147fb39) { if($this->v2068a4d581 && !empty($pbc6196f8) && !empty($v5f7147fb39)) { $v1478ac8d84 = $this->pa6b101bd->selectCollection($pbc6196f8); if (!empty($v1478ac8d84) && !empty($v5f7147fb39)) { $v5430c73cb8 = new MongoRegex($v5f7147fb39); $pb038c85e = array("raw_id" => $v5430c73cb8); return $v1478ac8d84->remove($pb038c85e); } } return false; } public function deleteCollection($pbc6196f8) { if($this->v2068a4d581 && !empty($pbc6196f8)) { $v1478ac8d84 = $this->pa6b101bd->selectCollection($pbc6196f8); if (!empty($v1478ac8d84)) { return $v1478ac8d84->drop(); } } return false; } } ?>
