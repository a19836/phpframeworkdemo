<?php
/*
 * Copyright (c) 2007 PHPMyFrameWork - Joao Pinto
 * AUTHOR: Joao Paulo Lopes Pinto -- http://jplpinto.com
 * 
 * The use of this code must be allowed first by the creator Joao Pinto, since this is a private and proprietary code.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

include_once $EVC->getUtilPath("WorkFlowBeansFileHandler"); include_once get_lib("org.phpframework.phpscript.PHPCodePrintingHandler"); $UserAuthenticationHandler->checkPresentationFileAuthentication($entity_path, "access"); $bean_name = $_GET["bean_name"]; $bean_file_name = $_GET["bean_file_name"]; $path = $_GET["path"]; $type = $_GET["type"]; $class_name = $_GET["class_name"]; $method_id = $_GET["method"]; $function_id = $_GET["function"]; $path = str_replace("../", "", $path); if ($bean_name == "dao") { $UserAuthenticationHandler->checkInnerFilePermissionAuthentication("vendor/dao/$path", "layer", "access"); $file_path = DAO_PATH . $path; } else if ($bean_name == "lib") $file_path = LIB_PATH . $path; else if ($bean_name == "vendor") { $UserAuthenticationHandler->checkInnerFilePermissionAuthentication("vendor/$path", "layer", "access"); $file_path = VENDOR_PATH . $path; } else if ($bean_name == "test_unit") { $UserAuthenticationHandler->checkInnerFilePermissionAuthentication("vendor/testunit/$path", "layer", "access"); $file_path = TEST_UNIT_PATH . $path; } else { $WorkFlowBeansFileHandler = new WorkFlowBeansFileHandler($user_beans_folder_path . $bean_file_name, $user_global_variables_file_path); $obj = $WorkFlowBeansFileHandler->getBeanObject($bean_name); if (is_a($obj, "BusinessLogicLayer")) $item_type = "business_logic"; else { $item_type = "presentation"; $PEVC = $WorkFlowBeansFileHandler->getEVCBeanObject($bean_name, $path); if ($PEVC) { $obj = $PEVC->getPresentationLayer(); $pre_init_config_file_path = $PEVC->getConfigPath("pre_init_config"); } else $obj = null; } if ($obj) { $layer_path = $obj->getLayerPathSetting(); $UserAuthenticationHandler->checkInnerFilePermissionAuthentication($layer_path . $path, "layer", "access"); $file_path = $layer_path . $path; if ($item_type == "business_logic") { $bean_objs = $obj->getPHPFrameWork()->getObjects(); $vars = is_array($bean_objs["vars"]) ? array_merge($bean_objs["vars"], $obj->settings) : $obj->settings; $vars["current_business_logic_module_path"] = $file_path; $vars["current_business_logic_module_id"] = substr($path, 0, strlen($path) - 4); } } } $PHPVariablesFileHandler = new PHPVariablesFileHandler(array($user_global_variables_file_path, $pre_init_config_file_path)); $PHPVariablesFileHandler->startUserGlobalVariables(); if ($path && $file_path && file_exists($file_path)) { if ($PEVC) { $OLD_EVC = $EVC; $EVC = $PEVC; } switch ($type) { case "properties": include_once $file_path; $props = array(); $class_name = PHPCodePrintingHandler::getClassPathFromClassName($file_path, $class_name); if ($class_name) { $reflect = new ReflectionClass($class_name); $publics = $reflect->getProperties(ReflectionProperty::IS_PUBLIC); foreach ($publics as $prop) { $comments = $prop->getDocComment(); $is_hidden = !empty($comments) && strpos($comments, "@hidden") !== false; $props[] = array( "name" => $prop->getName(), "static" => $prop->isStatic() ? 1 : 0, "hidden" => $is_hidden ? 1 : 0, ); } } break; case "methods": include_once $file_path; $props = array(); $class_name = PHPCodePrintingHandler::getClassPathFromClassName($file_path, $class_name); if ($class_name) { $reflect = new ReflectionClass($class_name); $publics = $reflect->getMethods(ReflectionProperty::IS_PUBLIC); foreach ($publics as $prop) { $name = $prop->getName(); if ($name != "__construct") { $comments = $prop->getDocComment(); $is_hidden = !empty($comments) && strpos($comments, "@hidden") !== false; $prop = array( "name" => $name, "static" => $prop->isStatic() ? 1 : 0, "hidden" => $is_hidden ? 1 : 0, ); if ($bean_name == "test_unit") $prop["enabled"] = !empty($comments) && strpos($comments, "@enabled") !== false; $props[] = $prop; } } } break; case "functions": include_once $file_path; $functions = PHPCodePrintingHandler::getPHPClassesFromFile($file_path); $functions = is_array($functions[0]["methods"]) ? $functions[0]["methods"] : array(); $props = array(); foreach ($functions as $func) { $name = $func["name"]; $reflect = new ReflectionFunction($name); $comments = $reflect->getDocComment(); $is_hidden = !empty($comments) && strpos($comments, "@hidden") !== false; $props[] = array( "name" => $name, "hidden" => $is_hidden ? 1 : 0, ); } break; case "arguments": include_once $file_path; $params = null; if ($class_name && $method_id) { $class_name = PHPCodePrintingHandler::getClassPathFromClassName($file_path, $class_name); if ($class_name) { $method = new ReflectionMethod($class_name, $method_id); $params = $method->getParameters(); } } else if ($function_id) { $function = new ReflectionFunction($function_id); $params = $function->getParameters(); } $props = array(); if ($params) { $docbook_params = null; if ($bean_name == "lib") { $SYSTEM_EVC = $OLD_EVC ? $OLD_EVC : $EVC; $docbook_file_path = $SYSTEM_EVC->getEntitiesPath() . "docbook/files" . substr($file_path, strlen( dirname(LIB_PATH) )) . ".ser"; if (file_exists($docbook_file_path)) { $file_properties = unserialize(file_get_contents($docbook_file_path)); if ($file_properties) { if ($class_name && $method_id) $docbook_params = $file_properties[$class_name]["methods"][$method_id]["arguments"]; else $docbook_params = $file_properties[0]["methods"][$function_id]["arguments"]; if ($docbook_params) $docbook_params = array_keys($docbook_params); } } } foreach ($params as $i => $param) { $item = array( "name" => $param->getName(), ); if ($docbook_params && $docbook_params[$i]) $item["name"] = substr($docbook_params[$i], 0, 1) == '$' ? substr($docbook_params[$i], 1) : $docbook_params[$i]; if ($param->isDefaultValueAvailable()) { $value = $param->getDefaultValue(); if (!$param->isDefaultValueAvailable()) { $type = ""; $value = "null"; } else if ($param->isArray() || is_array($value)) { $type = "array"; $value = json_encode($value); } else if (is_numeric($value)) { $type = "numeric"; $value = "$value"; } else if (is_bool($value)) { $type = "boolean"; $value = $value ? "true" : "false"; } else { $type = substr($value, 0, 1) == "$" && strpos($value, " ") === false ? "variable" : (!isset($value) ? "" : "string"); } $item["value"] = $value; $item["type"] = $type; } $props[] = $item; } } break; } if ($PEVC) $EVC = $OLD_EVC; } $PHPVariablesFileHandler->endUserGlobalVariables(); ?>
