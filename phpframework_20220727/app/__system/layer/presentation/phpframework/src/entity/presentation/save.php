<?php
/*
 * Copyright (c) 2007 PHPMyFrameWork - Joao Pinto
 * AUTHOR: Joao Paulo Lopes Pinto -- http://jplpinto.com
 * 
 * The use of this code must be allowed first by the creator Joao Pinto, since this is a private and proprietary code.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

include_once get_lib("org.phpframework.util.MyArray"); include_once $EVC->getUtilPath("SequentialLogicalActivitiesSettingsCodeCreator"); $bean_name = $_GET["bean_name"]; $bean_file_name = $_GET["bean_file_name"]; $path = $_GET["path"]; $file_modified_time = $_GET["file_modified_time"]; $path = str_replace("../", "", $path); if ($_SERVER['REQUEST_METHOD'] === 'POST' && $path) { $WorkFlowBeansFileHandler = new WorkFlowBeansFileHandler($user_beans_folder_path . $bean_file_name, $user_global_variables_file_path); $PEVC = $WorkFlowBeansFileHandler->getEVCBeanObject($bean_name, $path); if ($PEVC) { $P = $PEVC->getPresentationLayer(); $PHPVariablesFileHandler = new PHPVariablesFileHandler(array($user_global_variables_file_path, $PEVC->getConfigPath("pre_init_config"))); $PHPVariablesFileHandler->startUserGlobalVariables(); $layer_path = $P->getLayerPathSetting(); $default_extension = $P->getPresentationFileExtension(); $file_path = trim($layer_path . $path); if (!is_dir($file_path)) { $UserAuthenticationHandler->checkInnerFilePermissionAuthentication($file_path, "layer", "access"); UserAuthenticationHandler::checkUsersMaxNum($UserAuthenticationHandler); UserAuthenticationHandler::checkActionsMaxNum($UserAuthenticationHandler); $folder_path = dirname($file_path); if (!is_dir($folder_path)) mkdir($folder_path, 0755, true); $file_was_changed = file_exists($file_path) && $file_modified_time && $file_modified_time < filemtime($file_path); $object = $_POST["object"] ? $_POST["object"] : array(); switch ($file_type) { case "save_entity_advanced": case "save_view": case "save_template": case "save_block_advanced": case "save_util": $code = $object["code"]; $status = save($PEVC, $file_type, $file_path, $file_was_changed, $code); break; case "save_config": $code = $object["code"]; $is_config_file = substr($file_path, -22) == "/src/config/config.php"; if (!$is_config_file || f14e414e305($PEVC, $code, $error_message)) $status = save($PEVC, $file_type, $file_path, $file_was_changed, $code); else $status = "You must create the '\$project_url_prefix' and '\$project_common_url_prefix' variables with the correspondent urls!"; break; case "save_entity_simple": $selected_project_id = $P->getSelectedPresentationId(); $default_extension = $P->getPresentationFileExtension(); if ($object["sla_settings"] && !$object["sla_settings_code"]) $object["sla_settings_code"] = SequentialLogicalActivitiesSettingsCodeCreator::getActionsCode($webroot_cache_folder_path, $webroot_cache_folder_url, $object["sla_settings"], "\t"); $code = CMSPresentationLayerHandler::createEntityCode($object, $selected_project_id, $default_extension); $status = save($PEVC, $file_type, $file_path, $file_was_changed, $code); if (is_array($status) && $status["status"] === true) { $UserCacheHandler = $PHPFrameWork->getObject("UserCacheHandler"); CMSPresentationLayerHandler::cacheEntitySaveActionTime($PEVC, $UserCacheHandler, $cms_page_cache_path_prefix, $file_path, true, $workflow_paths_id, $bean_name); } break; case "save_project_global_variables_advanced": case "save_project_global_variables_simple": case "save_project_default_template": $original_code = file_get_contents($file_path); $status = true; if ($file_type == "save_project_global_variables_advanced") $code = $object["code"]; else if ($file_type == "save_project_default_template") { $find = '$presentation_id = substr($project_path, strlen($layer_path), -1);'; $pos = strpos($original_code, $find) + strlen($find); $code_aux = "<?php\n" . trim(substr($original_code, $pos)); $code_aux = str_replace("<?php\n?>", "", $code_aux); $is_code_valid = PHPVariablesFileHandler::isSimpleVarsContent($code_aux); if ($is_code_valid) { $vars = PHPVariablesFileHandler::getVarsFromContent($code_aux); $vars["project_default_template"] = $object["project_default_template"]; $code = PHPVariablesFileHandler::getVarsCode($vars); } else $status = false; } else { $vars_name = $object["vars_name"]; $vars_value = $object["vars_value"]; $global_variables = array(); if ($vars_name) { $t = count($vars_name); for($i = 0; $i < $t; $i++) { $var_name = $vars_name[$i]; $var_value = $vars_value[$i]; if ($var_name == "log_level" && !strlen($var_value)) continue 1; if ($var_value != "__DEFAULT__") { $var_value_lower = strtolower($var_value); if ($var_value_lower == "true") $global_variables[$var_name] = true; else if ($var_value_lower == "false") $global_variables[$var_name] = false; else if ($var_value_lower == "null") $global_variables[$var_name] = null; else $global_variables[$var_name] = $var_value; } } } $code = PHPVariablesFileHandler::getVarsCode($global_variables); } if ($status) { $find = '$presentation_id = substr($project_path, strlen($layer_path), -1);'; $pos = strpos($original_code, $find) + strlen($find); $reserved_code = trim(substr($original_code, strlen("<?php"), $pos - strlen("<?php"))); if (!$reserved_code) $reserved_code = '//Do not change any of these variables bc when a project is created, I\'m changing this code based in str_replace.
	$project_path = dirname(dirname(str_replace(DIRECTORY_SEPARATOR, "/", __DIR__))) . "/";
	$layer_path = dirname($project_path) . "/";

	//Note that this project could be inside of folders and sub-folders
	$presentation_id = substr($project_path, strlen($layer_path), -1);'; $code = "<?php\n" . $reserved_code . "\n?>" . $code; $code = str_replace("", "", str_replace("", "", $code)); $status = save($PEVC, $file_type, $file_path, $file_was_changed, $code); } break; case "save_page_module_block": case "save_block_simple": if ($file_type == "save_page_module_block") { $selected_project_id = $P->getSelectedPresentationId(); $new_path = str_replace("//", "/", "$selected_project_id/" . $P->settings["presentation_blocks_path"] . "/"); $entity_path_prefix = str_replace("//", "/", "$selected_project_id/" . $P->settings["presentation_entities_path"] . "/"); $entity_path_pos = strpos($path, $entity_path_prefix); if ($entity_path_pos === 0) { $new_path .= substr($path, strlen($entity_path_prefix)); $new_path = $new_path ? dirname($new_path) . "/" : ""; } $file_path = trim($layer_path . $new_path) . trim(strtolower(str_replace("/", "_", $object["module_id"]))) . ".php"; $folder_path = dirname($file_path); if (!is_dir($folder_path)) mkdir($folder_path, 0755, true); CMSPresentationLayerHandler::configureUniqueFileId($file_path); $file_was_changed = file_exists($file_path) && $file_modified_time && $file_modified_time < filemtime($file_path); } $code = CMSPresentationLayerHandler::createBlockCode($object); $status = save($PEVC, $file_type, $file_path, $file_was_changed, $code); if ($file_type == "save_page_module_block" && is_array($status) && $status["status"] === true) $status["block_id"] = substr(str_replace($PEVC->getBlocksPath(), "", $file_path), 0, (strlen($default_extension) + 1) * -1); break; } if ($status && is_array($status) && $status["status"] === true) $UserAuthenticationHandler->incrementUsedActionsTotal(); } $PHPVariablesFileHandler->endUserGlobalVariables(); } } echo json_encode($status); die(); function save($v188b4f5fa6, $v982d6fe381, $pf3dc0762, $v29fd857dd2, $v067674f4e4) { if ($v29fd857dd2) $v5c1c342594 = array( "status" => "CHANGED", "old_code" => file_get_contents($pf3dc0762), "new_code" => $v067674f4e4, ); else { $v5c1c342594 = PHPScriptHandler::isValidPHPContents($v067674f4e4, $pf7dd614f) ? file_put_contents($pf3dc0762, $v067674f4e4) !== false : false; if ($v5c1c342594) { clearstatcache(true, $pf3dc0762); $v5c1c342594 = array( "status" => true, "modified_time" => filemtime($pf3dc0762), ); } else if ($pf7dd614f) $v5c1c342594 = $pf7dd614f; } return $v5c1c342594; } function f14e414e305($EVC, $v067674f4e4, &$pef612b9d) { try { $v067674f4e4 = trim($v067674f4e4); if ($v067674f4e4) { $v067674f4e4 = substr($v067674f4e4, 0, 5) == "<?php" ? substr($v067674f4e4, 5) : (substr($v067674f4e4, 0, 3) == "<?" ? substr($v067674f4e4, 3) : $v067674f4e4); $v067674f4e4 = substr($v067674f4e4, -2) == "?>" ? substr($v067674f4e4, 0, -2) : $v067674f4e4; eval($v067674f4e4); } } catch(Exception $paec2c009) { $pef612b9d = $paec2c009->getMessage(); } return isset($project_url_prefix) && isset($project_common_url_prefix); } ?>
