<?php
/*
 * Copyright (c) 2007 PHPMyFrameWork - Joao Pinto
 * AUTHOR: Joao Paulo Lopes Pinto -- http://jplpinto.com
 * 
 * The use of this code must be allowed first by the creator Joao Pinto, since this is a private and proprietary code.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

include_once $EVC->getUtilPath("WorkFlowBeansFileHandler"); include_once $EVC->getUtilPath("WorkFlowDBHandler"); include_once $EVC->getUtilPath("WorkFlowDataAccessHandler"); $UserAuthenticationHandler->checkPresentationFileAuthentication($entity_path, "access"); if ($_POST) { $bean_name = $_GET["bean_name"]; $bean_file_name = $_GET["bean_file_name"]; $global_default_db_driver_broker = $_GET["global_default_db_driver_broker"]; $db_broker = $_POST["db_broker"]; $db_driver = $_POST["db_driver"]; $type = $_POST["type"]; $db_table = $_POST["db_table"]; $detailed_info = $_POST["detailed_info"]; $user_global_variables_files_path = array($user_global_variables_file_path); $PHPVariablesFileHandler = new PHPVariablesFileHandler($user_global_variables_files_path); $PHPVariablesFileHandler->startUserGlobalVariables(); $WorkFlowBeansFileHandler = new WorkFlowBeansFileHandler($user_beans_folder_path . $bean_file_name, $user_global_variables_files_path); $obj = $WorkFlowBeansFileHandler->getBeanObject($bean_name); if ($obj && (is_a($obj, "Layer") || is_a($obj, "DB"))) { if ($type == "diagram") { $tasks_file_path = WorkFlowTasksFileHandler::getDBDiagramTaskFilePath($workflow_paths_id, "db_diagram", $db_driver); $WorkFlowDataAccessHandler = new WorkFlowDataAccessHandler(); $WorkFlowDataAccessHandler->setTasksFilePath($tasks_file_path); $tasks = $WorkFlowDataAccessHandler->getTasks(); } else if (!$db_broker) { $WorkFlowDBHandler = new WorkFlowDBHandler($user_beans_folder_path, $user_global_variables_files_path); $db_driver_props = WorkFlowBeansFileHandler::getLayerDBDriverProps($user_global_variables_files_path, $user_beans_folder_path, $obj, $db_driver); } $db_options = array("db_driver" => $db_driver); if (!is_a($obj, "DataAccessLayer") && !is_a($obj, "DB")) { $db_driver_db_broker = WorkFlowBeansFileHandler::getLayerLocalDBBrokerNameForChildBrokerDBDriver($user_global_variables_file_path, $user_beans_folder_path, $obj, $db_driver); $db_options["db_broker"] = $db_driver_db_broker ? $db_driver_db_broker : $global_default_db_driver_broker; } if ($db_table) { if ($type == "diagram") { $props = $tasks["tasks"][$db_table]["properties"]; if (!$detailed_info) $items = $props["table_attr_names"]; else { $items = array(); if ($props["table_attr_names"]) { $t = count($props["table_attr_names"]); for ($i = 0; $i < $t; $i++) { $name = $props["table_attr_names"][$i]; $items[$name] = array( "name" => $name, "type" => $props["table_attr_types"][$i], "length" => $props["table_attr_lengths"][$i], "null" => $props["table_attr_nulls"][$i], "primary_key" => $props["table_attr_primary_keys"][$i], "unsigned" => $props["table_attr_unsigneds"][$i], "unique" => $props["table_attr_uniques"][$i], "auto_increment" => $props["table_attr_auto_increments"][$i], "default" => $props["table_attr_has_defaults"][$i] ? $props["table_attr_defaults"][$i] : null, "extra" => $props["table_attr_extras"][$i], "charset" => $props["table_attr_charsets"][$i], "collation" => null, "comment" => $props["table_attr_comments"][$i], ); } } } } else { if (is_a($obj, "DB")) $items = $obj->listTableFields($db_table); else if (is_a($obj, "DBLayer")) $items = $obj->getFunction("listTableFields", $db_table, $db_options); else if ($db_broker) $items = $obj->getBroker($db_broker)->getFunction("listTableFields", $db_table, $db_options); else if ($db_driver_props) $items = $WorkFlowDBHandler->getDBTableAttributes($db_driver_props[1], $db_driver_props[2], $db_table); if (!$detailed_info) $items = is_array($items) ? array_keys($items) : array(); } } else { if ($type == "diagram") $items = $tasks["tasks"] ? array_keys($tasks["tasks"]) : null; else { if (is_a($obj, "DB")) $tables = $obj->listTables(); else if (is_a($obj, "DBLayer")) $tables = $obj->getFunction("listTables", null, $db_options); else if ($db_broker) $tables = $obj->getBroker($db_broker)->getFunction("listTables", null, $db_options); else if ($db_driver_props) $tables = $WorkFlowDBHandler->getDBTables($db_driver_props[1], $db_driver_props[2]); $items = array(); if ($tables) foreach ($tables as $table) $items[] = $table["name"]; } } } $PHPVariablesFileHandler->endUserGlobalVariables(); } ?>
