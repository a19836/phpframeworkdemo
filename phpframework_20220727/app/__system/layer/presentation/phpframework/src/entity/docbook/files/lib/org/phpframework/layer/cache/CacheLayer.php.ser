a:1:{s:10:"CacheLayer";a:2:{s:7:"methods";a:14:{s:13:"getModulePath";a:15:{s:4:"name";s:13:"getModulePath";s:16:"start_line_index";i:24;s:17:"start_token_index";i:125;s:4:"type";s:6:"public";s:8:"abstract";b:1;s:6:"static";b:0;s:22:"start_args_token_index";i:132;s:20:"end_args_token_index";i:134;s:9:"arguments";a:1:{s:10:"$module_id";N;}s:25:"start_brackets_line_index";i:24;s:26:"start_brackets_token_index";i:135;s:23:"end_brackets_line_index";i:24;s:24:"end_brackets_token_index";i:135;s:14:"end_line_index";i:24;s:15:"end_token_index";i:135;}s:15:"initModuleCache";a:15:{s:4:"name";s:15:"initModuleCache";s:16:"start_line_index";i:25;s:17:"start_token_index";i:137;s:4:"type";s:6:"public";s:8:"abstract";b:1;s:6:"static";b:0;s:22:"start_args_token_index";i:144;s:20:"end_args_token_index";i:146;s:9:"arguments";a:1:{s:10:"$module_id";N;}s:25:"start_brackets_line_index";i:25;s:26:"start_brackets_token_index";i:147;s:23:"end_brackets_line_index";i:25;s:24:"end_brackets_token_index";i:147;s:14:"end_line_index";i:25;s:15:"end_token_index";i:147;}s:17:"getModuleCacheObj";a:15:{s:4:"name";s:17:"getModuleCacheObj";s:16:"start_line_index";i:26;s:17:"start_token_index";i:149;s:4:"type";s:6:"public";s:8:"abstract";b:1;s:6:"static";b:0;s:22:"start_args_token_index";i:156;s:20:"end_args_token_index";i:164;s:9:"arguments";a:3:{s:10:"$module_id";N;s:11:"$service_id";N;s:5:"$data";N;}s:25:"start_brackets_line_index";i:26;s:26:"start_brackets_token_index";i:165;s:23:"end_brackets_line_index";i:26;s:24:"end_brackets_token_index";i:165;s:14:"end_line_index";i:26;s:15:"end_token_index";i:165;}s:16:"getCachedDirPath";a:14:{s:4:"name";s:16:"getCachedDirPath";s:16:"start_line_index";i:27;s:17:"start_token_index";i:167;s:4:"type";s:6:"public";s:8:"abstract";b:1;s:6:"static";b:0;s:22:"start_args_token_index";i:174;s:20:"end_args_token_index";i:175;s:25:"start_brackets_line_index";i:27;s:26:"start_brackets_token_index";i:176;s:23:"end_brackets_line_index";i:27;s:24:"end_brackets_token_index";i:176;s:14:"end_line_index";i:27;s:15:"end_token_index";i:176;}s:19:"prepareModulesCache";a:15:{s:4:"name";s:19:"prepareModulesCache";s:16:"start_line_index";i:29;s:17:"start_token_index";i:178;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:183;s:20:"end_args_token_index";i:185;s:9:"arguments";a:1:{s:10:"$module_id";N;}s:25:"start_brackets_line_index";i:29;s:26:"start_brackets_token_index";i:187;s:23:"end_brackets_line_index";i:53;s:24:"end_brackets_token_index";i:444;s:14:"end_line_index";i:53;s:15:"end_token_index";i:444;}s:5:"check";a:20:{s:4:"name";s:5:"check";s:16:"start_line_index";i:149;s:17:"start_token_index";i:754;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:8:"comments";a:1:{i:0;s:640:"/*
	Checks if the $service_id has cache and it has, create the cache for the $service_id.
	Additionally add the correspondent cache key ($service_key) for the $service_id, to the related services, this is call:
		$CacheHandler->addServiceToRelatedKeysToDelete($service_id, $key, $service_related_keys_to_delete, $service["cache_type"]);
		
		(Basically the addServiceToRelatedKeysToDelete function, loops the $service_related_keys_to_delete and for each item, adds the $service_key => but check this explanation bellow)
	
	Then based in the TO_DELETE keys, gets all the service_ids to delete and for each call the delete method.
	*/";}s:25:"start_comments_line_index";i:140;s:26:"start_comments_token_index";i:752;s:23:"end_comments_line_index";i:148;s:24:"end_comments_token_index";i:752;s:22:"start_args_token_index";i:759;s:20:"end_args_token_index";i:778;s:9:"arguments";a:5:{s:10:"$module_id";N;s:11:"$service_id";N;s:5:"$data";N;s:8:"&$result";N;s:8:"$options";s:5:"false";}s:25:"start_brackets_line_index";i:149;s:26:"start_brackets_token_index";i:780;s:23:"end_brackets_line_index";i:230;s:24:"end_brackets_token_index";i:1038;s:14:"end_line_index";i:230;s:15:"end_token_index";i:1038;}s:22:"deleteSearchedServices";a:20:{s:4:"name";s:22:"deleteSearchedServices";s:16:"start_line_index";i:294;s:17:"start_token_index";i:1042;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:8:"comments";a:1:{i:0;s:2504:"/*
	$searched_services sample:
		Array(
		    [ #service_id# ] => Array
		        (
		            [TYPE] => PREFIX | SUFFIX => the search type
		            [KEY] => #the key in the <to_delete> tag for each service. Check the XML sample bellow#
		        )
		        
		or
		
		Array(
		    [select_item] => Array
		        (
		            [TYPE] => PREFIX
		            [KEY] => select_item_id-
		        )

		    [select_items] => Array
		        (
		            [TYPE] => PREFIX
		            [KEY] => select_items
		        )
		)
		
		or
		
		Array(
		    [private/article/article_properties] => Array
			   (
				  [key] => article_properties_<?php echo $_SERVER["HTTP_HOST"] . "_" . $GLOBALS["condo_id"] . "_" . $_GET["article_id"]; ?>
				  [module_id] => 
			   )

		    [private/article/channel_articles] => Array
			   (
				  [type] => prefix
				  [key] => channel_articles_<?php echo $_SERVER["HTTP_HOST"] . "_" . $input["object_to_objects"][0]["object_type_id"] . "_" . $input["object_to_objects"][0]["object_id"] . "_" . $input["object_to_objects"][0]["group"] . "_"; ?>
				  [module_id] => 
			   )
		)
	
	FROM XML FILE:
		<service id="private/article/article_properties" cache_handler="ServiceCacheHandler" to_cache="true" ttl="600">
			<validation_script>return $_GET["article_id"] > 0;</validation_script>
			<key>article_properties_&lt;?php echo $_SERVER["HTTP_HOST"] . "_" . $GLOBALS["condo_id"] . "_" . $_GET["article_id"]; ?&gt;</key>
		</service>
		<service id="private/article/channel_articles" cache_handler="ServiceCacheHandler" to_cache="true" ttl="600">
			<key>channel_articles_&lt;?php echo $_SERVER["HTTP_HOST"] . "_" . $input["object_type_id"] . "_" . $input["object_id"] . "_" . $input["group"] . "_" . hash("crc32b", strtolower($_GET["tag"])); ?&gt;</key>
		</service>
		<service id="private/admin/article/edit_article" cache_handler="ServiceCacheHandler">
			<validation_script>return $_POST;</validation_script>
			<to_delete>
				<service>
					<key>article_properties_&lt;?php echo $_SERVER["HTTP_HOST"] . "_" . $GLOBALS["condo_id"] . "_" . $_GET["article_id"]; ?&gt;</key>
				</service>
				<service type="prefix">
					<key>channel_articles_&lt;?php echo $_SERVER["HTTP_HOST"] . "_" . $input["object_to_objects"][0]["object_type_id"] . "_" . $input["object_to_objects"][0]["object_id"] . "_" . $input["object_to_objects"][0]["group"] . "_"; ?&gt;</key>
				</service>
			</to_delete>
		</service>
	*/";}s:25:"start_comments_line_index";i:232;s:26:"start_comments_token_index";i:1040;s:23:"end_comments_line_index";i:293;s:24:"end_comments_token_index";i:1040;s:22:"start_args_token_index";i:1047;s:20:"end_args_token_index";i:1068;s:9:"arguments";a:4:{s:10:"$module_id";N;s:18:"$searched_services";N;s:5:"$data";s:7:"array()";s:8:"$options";s:5:"false";}s:25:"start_brackets_line_index";i:294;s:26:"start_brackets_token_index";i:1070;s:23:"end_brackets_line_index";i:311;s:24:"end_brackets_token_index";i:1181;s:14:"end_line_index";i:311;s:15:"end_token_index";i:1181;}s:21:"deleteServiceBySearch";a:20:{s:4:"name";s:21:"deleteServiceBySearch";s:16:"start_line_index";i:317;s:17:"start_token_index";i:1185;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:8:"comments";a:1:{i:0;s:290:"/*
	$service_key_to_search: channel_articles_&lt;?php echo $_SERVER["HTTP_HOST"] . "_" . $input["object_to_objects"][0]["object_type_id"] . "_" . $input["object_to_objects"][0]["object_id"] . "_" . $input["object_to_objects"][0]["group"] . "_"; ?&gt;
	$service_type_to_search: prefix
	*/";}s:25:"start_comments_line_index";i:313;s:26:"start_comments_token_index";i:1183;s:23:"end_comments_line_index";i:316;s:24:"end_comments_token_index";i:1183;s:22:"start_args_token_index";i:1190;s:20:"end_args_token_index";i:1208;s:9:"arguments";a:5:{s:10:"$module_id";N;s:22:"$service_key_to_search";N;s:23:"$service_type_to_search";N;s:5:"$data";N;s:8:"$options";s:5:"false";}s:25:"start_brackets_line_index";i:317;s:26:"start_brackets_token_index";i:1210;s:23:"end_brackets_line_index";i:325;s:24:"end_brackets_token_index";i:1272;s:14:"end_line_index";i:325;s:15:"end_token_index";i:1272;}s:6:"delete";a:20:{s:4:"name";s:6:"delete";s:16:"start_line_index";i:341;s:17:"start_token_index";i:1276;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:8:"comments";a:1:{i:0;s:686:"/*
	For each TO_DELETE element call delete with the following parameters:
		$service_id = "select_item";
		$service_key = "select_item_id-";
		$service_key_type = "prefix";
		$service_module_id = "test";
	
	Gets the real service_key from the $service_id, this is, $real_service_key_from_service_id.
		$real_service_key_from_service_id = "select_item_id-&lt;?php echo $input;?&gt;-&lt;?php echo $options['db_driver'];?&gt;";
	
	Then checks if the $service_key is IN the $real_service_key_from_service_id, based of the checkIfKeyTypeMatchValue function and the $service_key_type.
	If it does deleteAll elements from the $service_id;
	Otherwise call $CacheHandler->delete;
	*/";}s:25:"start_comments_line_index";i:327;s:26:"start_comments_token_index";i:1274;s:23:"end_comments_line_index";i:340;s:24:"end_comments_token_index";i:1274;s:22:"start_args_token_index";i:1281;s:20:"end_args_token_index";i:1296;s:9:"arguments";a:4:{s:10:"$module_id";N;s:13:"$service_data";N;s:5:"$data";N;s:8:"$options";s:5:"false";}s:25:"start_brackets_line_index";i:341;s:26:"start_brackets_token_index";i:1298;s:23:"end_brackets_line_index";i:400;s:24:"end_brackets_token_index";i:1609;s:14:"end_line_index";i:400;s:15:"end_token_index";i:1609;}s:3:"get";a:20:{s:4:"name";s:3:"get";s:16:"start_line_index";i:437;s:17:"start_token_index";i:1817;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:8:"comments";a:1:{i:0;s:36:"/*
	Gets the data of a service
	*/";}s:25:"start_comments_line_index";i:434;s:26:"start_comments_token_index";i:1815;s:23:"end_comments_line_index";i:436;s:24:"end_comments_token_index";i:1815;s:22:"start_args_token_index";i:1822;s:20:"end_args_token_index";i:1837;s:9:"arguments";a:4:{s:10:"$module_id";N;s:11:"$service_id";N;s:5:"$data";N;s:8:"$options";s:5:"false";}s:25:"start_brackets_line_index";i:437;s:26:"start_brackets_token_index";i:1839;s:23:"end_brackets_line_index";i:450;s:24:"end_brackets_token_index";i:1950;s:14:"end_line_index";i:450;s:15:"end_token_index";i:1950;}s:10:"getHeaders";a:20:{s:4:"name";s:10:"getHeaders";s:16:"start_line_index";i:455;s:17:"start_token_index";i:1954;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:8:"comments";a:1:{i:0;s:39:"/*
	Gets the headers of a service
	*/";}s:25:"start_comments_line_index";i:452;s:26:"start_comments_token_index";i:1952;s:23:"end_comments_line_index";i:454;s:24:"end_comments_token_index";i:1952;s:22:"start_args_token_index";i:1959;s:20:"end_args_token_index";i:1964;s:9:"arguments";a:2:{s:10:"$module_id";N;s:11:"$service_id";N;}s:25:"start_brackets_line_index";i:455;s:26:"start_brackets_token_index";i:1966;s:23:"end_brackets_line_index";i:462;s:24:"end_brackets_token_index";i:2020;s:14:"end_line_index";i:462;s:15:"end_token_index";i:2020;}s:7:"isValid";a:20:{s:4:"name";s:7:"isValid";s:16:"start_line_index";i:468;s:17:"start_token_index";i:2024;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:8:"comments";a:1:{i:0;s:257:"/*
	Checks if the data of a service is valid according with the TTL and the validation script if exists.
	Additionally calls the $CacheHandler->checkServiceToRelatedKeysToDelete for the service_related_keys_to_delete of the correspondent $service_id.
	*/";}s:25:"start_comments_line_index";i:464;s:26:"start_comments_token_index";i:2022;s:23:"end_comments_line_index";i:467;s:24:"end_comments_token_index";i:2022;s:22:"start_args_token_index";i:2029;s:20:"end_args_token_index";i:2044;s:9:"arguments";a:4:{s:10:"$module_id";N;s:11:"$service_id";N;s:5:"$data";N;s:8:"$options";s:5:"false";}s:25:"start_brackets_line_index";i:468;s:26:"start_brackets_token_index";i:2046;s:23:"end_brackets_line_index";i:494;s:24:"end_brackets_token_index";i:2252;s:14:"end_line_index";i:494;s:15:"end_token_index";i:2252;}s:6:"search";a:20:{s:4:"name";s:6:"search";s:16:"start_line_index";i:560;s:17:"start_token_index";i:2256;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:8:"comments";a:1:{i:0;s:2659:"/*
	For each item in the $services_to_search, loop the $services_keys and checks if any of the keys are inside of the others.
	Then return the searched result;
	Sample of the result:
		Array(
		    [ #service_id# ] => Array
		        (
		            [TYPE] => PREFIX | SUFFIX => the search type
		            [KEY] => #the key in the <to_delete> tag for each service. Check the XML sample bellow#
		        )
		        
		or
		
		Array(
		    [select_item] => Array
		        (
		            [TYPE] => PREFIX
		            [KEY] => select_item_id-
		        )

		    [select_items] => Array
		        (
		            [TYPE] => PREFIX
		            [KEY] => select_items
		        )
		)
		
		or 
		
		Array(
		    [private/article/article_properties] => Array
			   (
				  [key] => article_properties_<?php echo $_SERVER["HTTP_HOST"] . "_" . $GLOBALS["condo_id"] . "_" . $_GET["article_id"]; ?>
				  [module_id] => 
			   )

		    [private/article/channel_articles] => Array
			   (
				  [type] => prefix
				  [key] => channel_articles_<?php echo $_SERVER["HTTP_HOST"] . "_" . $input["object_to_objects"][0]["object_type_id"] . "_" . $input["object_to_objects"][0]["object_id"] . "_" . $input["object_to_objects"][0]["group"] . "_"; ?>
				  [module_id] => 
			   )
		)
	
	FROM XML FILE:
		<service id="private/article/article_properties" cache_handler="ServiceCacheHandler" to_cache="true" ttl="600">
			<validation_script>return $_GET["article_id"] > 0;</validation_script>
			<key>article_properties_&lt;?php echo $_SERVER["HTTP_HOST"] . "_" . $GLOBALS["condo_id"] . "_" . $_GET["article_id"]; ?&gt;</key>
		</service>
		<service id="private/article/channel_articles" cache_handler="ServiceCacheHandler" to_cache="true" ttl="600">
			<key>channel_articles_&lt;?php echo $_SERVER["HTTP_HOST"] . "_" . $input["object_type_id"] . "_" . $input["object_id"] . "_" . $input["group"] . "_" . hash("crc32b", strtolower($_GET["tag"])); ?&gt;</key>
		</service>
		<service id="private/admin/article/edit_article" cache_handler="ServiceCacheHandler">
			<validation_script>return $_POST;</validation_script>
			<to_delete>
				<service>
					<key>article_properties_&lt;?php echo $_SERVER["HTTP_HOST"] . "_" . $GLOBALS["condo_id"] . "_" . $_GET["article_id"]; ?&gt;</key>
				</service>
				<service type="prefix">
					<key>channel_articles_&lt;?php echo $_SERVER["HTTP_HOST"] . "_" . $input["object_to_objects"][0]["object_type_id"] . "_" . $input["object_to_objects"][0]["object_id"] . "_" . $input["object_to_objects"][0]["group"] . "_"; ?&gt;</key>
				</service>
			</to_delete>
		</service>
	*/";}s:25:"start_comments_line_index";i:496;s:26:"start_comments_token_index";i:2254;s:23:"end_comments_line_index";i:559;s:24:"end_comments_token_index";i:2254;s:22:"start_args_token_index";i:2261;s:20:"end_args_token_index";i:2266;s:9:"arguments";a:2:{s:10:"$module_id";N;s:19:"$services_to_search";N;}s:25:"start_brackets_line_index";i:560;s:26:"start_brackets_token_index";i:2268;s:23:"end_brackets_line_index";i:607;s:24:"end_brackets_token_index";i:2793;s:14:"end_line_index";i:607;s:15:"end_token_index";i:2793;}s:14:"parseCacheFile";a:15:{s:4:"name";s:14:"parseCacheFile";s:16:"start_line_index";i:685;s:17:"start_token_index";i:3536;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:3541;s:20:"end_args_token_index";i:3546;s:9:"arguments";a:2:{s:10:"$module_id";N;s:16:"$cache_file_path";N;}s:25:"start_brackets_line_index";i:685;s:26:"start_brackets_token_index";i:3548;s:23:"end_brackets_line_index";i:739;s:24:"end_brackets_token_index";i:4181;s:14:"end_line_index";i:739;s:15:"end_token_index";i:4181;}}s:5:"props";a:6:{s:13:"modules_cache";a:11:{s:4:"name";s:13:"modules_cache";s:4:"type";s:6:"public";s:5:"value";s:7:"array()";s:8:"var_type";s:0:"";s:6:"static";b:0;s:8:"abstract";b:0;s:5:"const";b:0;s:16:"start_line_index";i:11;s:17:"start_token_index";i:43;s:14:"end_line_index";i:11;s:15:"end_token_index";i:52;}s:4:"keys";a:11:{s:4:"name";s:4:"keys";s:4:"type";s:6:"public";s:5:"value";s:7:"array()";s:8:"var_type";s:0:"";s:6:"static";b:0;s:8:"abstract";b:0;s:5:"const";b:0;s:16:"start_line_index";i:12;s:17:"start_token_index";i:54;s:14:"end_line_index";i:12;s:15:"end_token_index";i:63;}s:30:"service_related_keys_to_delete";a:11:{s:4:"name";s:30:"service_related_keys_to_delete";s:4:"type";s:6:"public";s:5:"value";s:7:"array()";s:8:"var_type";s:0:"";s:6:"static";b:0;s:8:"abstract";b:0;s:5:"const";b:0;s:16:"start_line_index";i:13;s:17:"start_token_index";i:65;s:14:"end_line_index";i:13;s:15:"end_token_index";i:74;}s:9:"bean_objs";a:11:{s:4:"name";s:9:"bean_objs";s:4:"type";s:6:"public";s:5:"value";s:0:"";s:8:"var_type";s:0:"";s:6:"static";b:0;s:8:"abstract";b:0;s:5:"const";b:0;s:16:"start_line_index";i:15;s:17:"start_token_index";i:76;s:14:"end_line_index";i:15;s:15:"end_token_index";i:79;}s:5:"Layer";a:11:{s:4:"name";s:5:"Layer";s:4:"type";s:6:"public";s:5:"value";s:0:"";s:8:"var_type";s:0:"";s:6:"static";b:0;s:8:"abstract";b:0;s:5:"const";b:0;s:16:"start_line_index";i:16;s:17:"start_token_index";i:81;s:14:"end_line_index";i:16;s:15:"end_token_index";i:84;}s:8:"settings";a:11:{s:4:"name";s:8:"settings";s:4:"type";s:6:"public";s:5:"value";s:0:"";s:8:"var_type";s:0:"";s:6:"static";b:0;s:8:"abstract";b:0;s:5:"const";b:0;s:16:"start_line_index";i:17;s:17:"start_token_index";i:86;s:14:"end_line_index";i:17;s:15:"end_token_index";i:89;}}}}