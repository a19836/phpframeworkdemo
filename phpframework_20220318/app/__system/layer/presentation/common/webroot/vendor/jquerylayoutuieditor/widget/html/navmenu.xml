<?xml version="1.0" encoding="UTF-8"?>
<widget>
	<label>Nav Menu</label>
	<tag>navmenu</tag>
	<settings>
		<template_class>container</template_class>
		<template_node_name>nav</template_node_name>
		<create_widget_class>NavMenuWidget</create_widget_class>
	</settings>
	<menu_widget><![CDATA[
		<i class="zmdi zmdi-menu"></i>
	]]></menu_widget>
	<template_widget><![CDATA[
		<a href="#" class="droppable">Home</a>
		<a href="#" class="droppable">About</a>
		<a href="#" class="droppable">Contact</a>
	]]></template_widget>
	<properties><![CDATA[]]></properties>
	<menu_css><![CDATA[
		.layout_ui_editor > .menu-widgets .menu-widget.menu-widget-navmenu,
		  body > .menu-widget.menu-widget-navmenu.ui-draggable-dragging {
			height:auto;
			display:inline-block;
			border-radius:5px;
			border:0;
			color:inherit;
			overflow:hidden;
		}
		.layout_ui_editor > .menu-widgets .menu-widget.menu-widget-navmenu i,
		  body > .menu-widget.menu-widget-navmenu.ui-draggable-dragging i {
			font-size:300%;
		}
		
		.layout_ui_editor > .template-widgets > .droppable-header.droppable-header-navmenu {
			margin-top:-1rem;
		}
	]]></menu_css>
	<menu_js><![CDATA[
		function NavMenuWidget(ui_creator, menu_widget) {
			var me = this;
			me.ignore_attributes = ["contenteditable"];
			
			me.init = function() {
				//init the other part of the container
				var obj = new CreateWidgetContainerClassObj(ui_creator, menu_widget);
				obj.options.default_column_class = "";
				obj.options.default_column_class_prefix = "";
				obj.options.default_column_node_name = "a";
				obj.options.is_reset_columns_allowed = true;
				obj.init();
				
				//extends this obj methods to this class
				for (var key in obj)
					if (typeof me[key] == "undefined" && typeof obj[key] == "function")
						me[key] = obj[key];
				
				menu_widget.attr({
						"data-on-parse-template-widget-html-func": ui_creator.obj_var_name + ".menu_widgets_objs.navmenu.parseHtml",
						"data-on-clone-menu-widget-func": ui_creator.obj_var_name + ".menu_widgets_objs.navmenu.onCloneMenuWidget",
						"data-on-clean-template-widget-html-func": ui_creator.obj_var_name + ".menu_widgets_objs.navmenu.cleanHtml",
						"data-on-create-template-widget-func": ui_creator.obj_var_name + ".menu_widgets_objs.navmenu.onCreateTemplateWidget",
						"data-on-open-droppable-header-func": ui_creator.obj_var_name + ".menu_widgets_objs.navmenu.onOpenDroppableHeader",
				});
				
				menu_widget.children(".properties").attr({
					"data-on-before-parse-widget-settings-func": ui_creator.obj_var_name + ".menu_widgets_objs.navmenu.parseSettings",
					"data-on-after-save-settings-field-func": ui_creator.obj_var_name + ".menu_widgets_objs.navmenu.saveSettingsField",
				});
			};
			
			me.parseHtml = function(html_element) {
				if (html_element && html_element.nodeName.toLowerCase() == "nav") {
					html_element = $(html_element);
					
					if (html_element.children().length == html_element.children("a").length) {
						html_element.children().addClass("droppable ignore-widget");
						
						return {
							droppable: html_element,
						}
					}
				}
			};
			
			me.parseSettings = function(widget, widget_settings) {
				widget.children().removeAttr("contenteditable");
				widget_settings["cols"] = me.getContainerColsProperties(widget);
				widget.children().attr("contenteditable", "true");
			};
			
			me.onCloneMenuWidget = function(widget, html_element) {
				if (html_element) //otherwise the widget will have the default content defined in the template_widget xml tag
					widget = ui_creator.getNewTemplateWidgetBasedInHtmlElement(widget, html_element, null);
				
				widget.attr("contenteditable", "false");
				
				widget.children().each(function(id, child) {
					child = $(child);
					child.attr("contenteditable", "true");
					ui_creator.updateTemplateWidgetLabel(child, "A");
				});
				
				return widget;
			};
			
			me.cleanHtml = function(html_element) {
				var widget = $(html_element);
				widget.removeAttr("contenteditable");
				widget.children().removeAttr("contenteditable");
				
				var html = ui_creator.getCleanedHtmlElement(widget[0]);
				
				widget.attr("contenteditable", "false");
				widget.children().attr("contenteditable", "true");
				
				return html;
			};
			
			me.onCreateTemplateWidget = function(widget, html_element) {
				//prepare editable box
				widget.attr("contenteditable", "false");
				widget.children("a").attr("contenteditable", "true");
			};
			
			me.onOpenDroppableHeader = function(droppable, droppable_header) {
				var label = droppable_header.children("label");
				label.attr("data-label-bkp", label.html());
				label.html("A");
			};

			me.saveSettingsField = function(field, widget, status) {
				if (status) {
					field = $(field);
					var sp = field.parent().closest(".settings-properties");
					var sprop = field.parentsUntil(sp, ".settings-property").first();
					
					if (sprop.hasClass("columns")) {
						var curr_length = widget.children().length;
						me.saveContainerSettingsField(field, widget, status);
						var new_length = widget.children().length;
						
						if (curr_length < new_length) {
							sprop.find("table tbody tr").last().find(" > .container-col-attrs input").val('href="#"');
							widget.children().last().html("Some text here").attr("href", "#").attr("contenteditable", "true");
						}
					}
				}
				
				return status;
			};
		}
	]]></menu_js>
</widget>
