<?php
/*
 * Copyright (c) 2007 PHPMyFrameWork - Joao Pinto
 * AUTHOR: Joao Paulo Lopes Pinto -- http://jplpinto.com
 * 
 * The use of this code must be allowed first by the creator Joao Pinto, since this is a private and proprietary code.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

include_once $EVC->getUtilPath("WorkFlowBeansFileHandler"); $UserAuthenticationHandler->checkPresentationFileAuthentication($entity_path, "access"); $layer_bean_folder_name = $_GET["layer_bean_folder_name"]; $bean_name = $_GET["bean_name"]; $bean_file_name = $_GET["bean_file_name"]; $type = $_GET["type"]; $table = str_replace("/", "", $_GET["table"]); $PHPVariablesFileHandler = new PHPVariablesFileHandler($user_global_variables_file_path); $PHPVariablesFileHandler->startUserGlobalVariables(); $WorkFlowBeansFileHandler = new WorkFlowBeansFileHandler($user_beans_folder_path . $bean_file_name, $user_global_variables_file_path); $obj = $WorkFlowBeansFileHandler->getBeanObject($bean_name); if ($obj && is_a($obj, "DB")) { $layer_object_id = LAYER_PATH . "$layer_bean_folder_name/$bean_name"; $UserAuthenticationHandler->checkInnerFilePermissionAuthentication($layer_object_id, "layer", "access"); $available_tables = $obj->listTables(); $table_exists = $obj->isTableInNamesList($available_tables, $table); if (!$table || $table_exists) { $table_attrs = $table_exists ? $obj->listTableFields($table) : array(); $table_attrs = array_values($table_attrs); if ($_POST) { $UserAuthenticationHandler->checkPresentationFileAuthentication($entity_path, "write"); $step = $_POST["step"]; if ($step >= 2) { $action = $_POST["action"]; $sql_statements = $_POST["sql_statements"]; $data = json_decode($_POST["data"], true); $errors = array(); if ($sql_statements) foreach ($sql_statements as $idx => $sql) if (!$sql) unset($sql_statements[$idx]); if (!$sql_statements) $error_message = "No sql to execute!"; else { foreach ($sql_statements as $sql) { $e = $obj->setData($sql); if ($e !== true) $errors[] = (is_a($e, "Exception") ? $e-getMessage() . "\n\n" : "") . $sql; } if ($errors) $error_message = "There were some errors trying to $action this table."; else if ($action == "delete") $status_message = "Table deletion successfully!"; else { $msg = "Table was $action" . ($action == "add" ? "e" : "") . "d successfully!\\nThis Page will now be refreshed so you can confirm if your changes were really made in the DB..."; $status_message = str_replace('\n', "<br>", $msg) . "<script>
							alert('$msg');
							document.location = ('' + document.location).replace(/&table=([^#&]*)/g, '') + '&table=" . $data["table_name"] . "';
						</script>"; } } } else if ($step == 1) { $data = $_POST; $action = $_POST["add"] ? "add" : ($_POST["update"] ? "update" : "delete"); unset($data["delete"]); unset($data["add"]); unset($data["update"]); unset($data["step"]); $sql_options = $obj->getOptions(); $sql_statements = array(); $sql_statements_labels = array(); if ($_POST["delete"]) { $sql_statements[] = $obj->getDropTableStatement($table, $sql_options); $sql_statements_labels[] = "Drop table $table"; } else if ($_POST["add"]) { $sql_statements[] = $obj->getCreateTableStatement($data, $sql_options); $sql_statements_labels[] = "Create table " . $data["table_name"]; } else if ($_POST["update"]) { $attributes_to_add = array(); $attributes_to_modify = array(); $attributes_to_rename = array(); $attributes_to_delete = array(); $new_pks = $new_pks_attrs = $old_pks = array(); $changed = false; $column_types_ignored_props = $obj->getDBColumnTypesIgnoredProps(); if ($data["attributes"]) foreach ($data["attributes"] as $new_attr) if (trim($new_attr["name"])) { $exists = false; $is_different = false; if ($table_attrs) foreach ($table_attrs as $old_attr) if (strtolower($new_attr["old_name"]) == strtolower($old_attr["name"])) { $exists = true; if ($new_attr["name"] != $old_attr["name"]) $attributes_to_rename[ $old_attr["name"] ] = $new_attr["name"]; $new_attr["name"] = $old_attr["name"]; if (is_array($column_types_ignored_props[ $old_attr["type"] ])) foreach ($column_types_ignored_props[ $old_attr["type"] ] as $attr_to_ignore) $new_attr[$attr_to_ignore] = $old_attr[$attr_to_ignore]; if ($new_attr["primary_key"] != $old_attr["primary_key"] || $new_attr["type"] != $old_attr["type"] || $new_attr["length"] != $old_attr["length"] || $new_attr["null"] != $old_attr["null"] || $new_attr["unsigned"] != $old_attr["unsigned"] || $new_attr["unique"] != $old_attr["unique"] || $new_attr["auto_increment"] != $old_attr["auto_increment"] || $new_attr["default"] != $old_attr["default"] || $new_attr["extra"] != $old_attr["extra"] || ($new_attr["charset"] && $new_attr["charset"] != $old_attr["charset"]) || ($new_attr["collation"] && $new_attr["collation"] != $old_attr["collation"]) || $new_attr["comment"] != $old_attr["comment"]) $is_different = true; break; } if (!$exists) $attributes_to_add[] = $new_attr; else if ($is_different) $attributes_to_modify[] = $new_attr; if ($new_attr["primary_key"]) { $new_pks[] = $new_attr["name"]; $new_pks_attrs[] = $new_attr; } if ($old_attr["primary_key"]) $old_pks[] = $old_attr["name"]; } if ($table_attrs) foreach ($table_attrs as $old_attr) { $exists = false; if ($data["attributes"]) foreach ($data["attributes"] as $new_attr) if (strtolower($new_attr["old_name"]) == strtolower($old_attr["name"])) { $exists = true; break; } if (!$exists) $attributes_to_delete[] = $old_attr; } if ($attributes_to_add || $attributes_to_modify || $attributes_to_rename || $attributes_to_delete) { $changed = true; foreach ($attributes_to_add as $attr) { $sql_statements[] = $obj->getAddTableAttributeStatement($table, $attr, $sql_options); $sql_statements_labels[] = "Add attribute " . $attr["name"] . " to table $table"; } if (count($new_pks) != count($old_pks) || array_diff($new_pks, $old_pks)) { $sql_statements[] = $obj->getDropTablePrimaryKeysStatement($table, $sql_options); $sql_statements_labels[] = "Drop primary keys in table $table"; } foreach ($attributes_to_modify as $attr) { $sql_statements[] = $obj->getModifyTableAttributeStatement($table, $attr, $sql_options); $sql_statements_labels[] = "Modify attribute " . $attr["name"] . " in table $table"; } if ($new_pks &&(count($new_pks) != count($old_pks) || array_diff($new_pks, $old_pks))) { $sql_statements[] = $obj->getAddTablePrimaryKeysStatement($table, $new_pks_attrs, $sql_options); $sql_statements_labels[] = "Add primary key in table $table"; } foreach ($attributes_to_delete as $attr) { $sql_statements[] = $obj->getDropTableAttributeStatement($table, $attr["name"], $sql_options); $sql_statements_labels[] = "Drop attribute " . $attr["name"] . " in table $table"; } foreach ($attributes_to_rename as $old_name => $new_name) { $sql_statements[] = $obj->getRenameTableAttributeStatement($table, $old_name, $new_name, $sql_options); $sql_statements_labels[] = "Rename attribute $old_name in table $table"; } } if ($data["table_name"] != $table) { $changed = true; $sql_statements[] = $obj->getRenameTableStatement($table, $data["table_name"], $sql_options); $sql_statements_labels[] = "Rename table " . $data["table_name"]; } if (!$changed) $status_message = "No changes to be made!"; } } } else $data = array( "table_name" => $table, "attributes" => $table_attrs, ); } } else $error_message = "Error: Bean object is not a DBDriver!"; $PHPVariablesFileHandler->endUserGlobalVariables(); ?>
