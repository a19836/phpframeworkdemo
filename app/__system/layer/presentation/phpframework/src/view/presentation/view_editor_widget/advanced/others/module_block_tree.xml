<?xml version="1.0" encoding="UTF-8"?>
<widget>
	<label>Call Tree Module or Block</label>
	<tag>call-tree-module-or-block</tag>
	<settings>
		<create_widget_class>TemplateCallTreeModuleOrBlockWidget</create_widget_class>
		<menu_class>menu-widget-call-module-or-block</menu_class>
		<template_class>template-widget-call-module-or-block</template_class>
	</settings>
	<menu_widget></menu_widget>
	<template_widget><![CDATA[
		<pre></pre>
	]]></template_widget>
	<menu_css><![CDATA[
		.layout-ui-editor > .menu-widgets .menu-widget.menu-widget-call-tree-module-or-block {
			display:none !important;
		}
	]]></menu_css>
	<menu_js><![CDATA[
		function TemplateCallTreeModuleOrBlockWidget(ui_creator, menu_widget) {
			var me = this;
			var obj_php_widget = new PHPWidget(ui_creator, menu_widget);
			
			me.init = function() {
				obj_php_widget.init();
				
				menu_widget.removeAttr("data-on-parse-template-widget-html-func");
				
				menu_widget.attr({
					"data-on-drag-helper-func": ui_creator.obj_var_name + ".menu_widgets_objs['call-tree-module-or-block'].onDragHelper",
					"data-on-drag-start-func": ui_creator.obj_var_name + ".menu_widgets_objs['call-tree-module-or-block'].onDragStart",
					"data-on-drag-stop-func": ui_creator.obj_var_name + ".menu_widgets_objs['call-tree-module-or-block'].onDragStop",
					"data-on-create-template-widget-func": ui_creator.obj_var_name + ".menu_widgets_objs['call-tree-module-or-block'].onCreateTemplateWidget",
				});
			};
			
			me.onDragHelper = function(li, event, ui_obj) {
				li = $(li);
				
				var label = li.find(" > a > label").text();
				var helper = $('<div class="dragging_menu_item">' + label + '</div>');
				helper.css("width", li.css("width"));
				
				return helper;
			};
			
			me.onDragStart = function(li, event, ui_obj) {
				li = $(li);
				var tree_item_id = li.attr("id");
				
				if (!chooseCodeLayoutUIEditorModuleBlockFromFileManagerTreeRightContainer.isNodeSelected(tree_item_id))
					chooseCodeLayoutUIEditorModuleBlockFromFileManagerTreeRightContainer.selectNode(tree_item_id);
				
				li.data("tree-item-id", tree_item_id);
				li.attr("id", menu_widget.attr("id"));
			};
			
			me.onDragStop = function(li, event, ui_obj) {
				li = $(li);
				li.attr("id", li.data("tree-item-id"));
			};
			
			me.onCreateTemplateWidget = function(widget, html_element) {
				var has_html_element = html_element ? true : false;
				
				if (!has_html_element)
					html_element = document.createComment('? ?');
				
				obj_php_widget.onCreateTemplateWidget(widget, html_element);
				
				if (!has_html_element) {
					if (typeof chooseCodeLayoutUIEditorModuleBlock == "function" && MyCodeLayoutUIEditorFancyPopup) {
						if (!MyCodeLayoutUIEditorFancyPopup.settings)
							MyCodeLayoutUIEditorFancyPopup.settings = {};
						
						MyCodeLayoutUIEditorFancyPopup.settings.targetField = widget;
						
						chooseCodeLayoutUIEditorModuleBlock(chooseCodeLayoutUIEditorModuleBlockFromFileManagerTreeRightContainer);
					}
					else
						alert("chooseCodeLayoutUIEditorModuleBlock function does not exist! Please only use this widget in the __system/phpframework/src/view/presentation/edit_view.php file");
				}
			};
		}
	]]></menu_js>
</widget>
