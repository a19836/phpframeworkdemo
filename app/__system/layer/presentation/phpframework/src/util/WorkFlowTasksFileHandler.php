<?php
/*
 * Copyright (c) 2007 PHPMyFrameWork - Joao Pinto
 * AUTHOR: Joao Paulo Lopes Pinto -- http://jplpinto.com
 * 
 * The use of this code must be allowed first by the creator Joao Pinto, since this is a private and proprietary code.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
include_once get_lib("org.phpframework.util.xml.MyXML"); include_once get_lib("org.phpframework.util.xml.MyXMLArray"); include_once $EVC->getUtilPath("WorkFlowBeansConverter"); class WorkFlowTasksFileHandler { private $v5e053dece2; private $v1d696dbd12; private static $pfc8be585 = array( "dbdriver" => "dbdriver", "db" => "db", "dataaccess" => "dataaccess", "businesslogic" => "businesslogic", "presentation" => "presentation", ); public function __construct($v5e053dece2) { $this->v5e053dece2 = $v5e053dece2; } public function init() { $this->v1d696dbd12 = array(); $v09421cf63e = file_exists($this->v5e053dece2) ? file_get_contents($this->v5e053dece2) : ""; if (!empty($v09421cf63e)) { $v6dcd71ad57 = new MyXML($v09421cf63e); $pfb662071 = $v6dcd71ad57->toArray(); $v826ff96094 = $v6dcd71ad57->complexArrayToBasicArray($pfb662071, array("lower_case_keys" => true, "trim" => true)); $this->v1d696dbd12 = $v826ff96094["tasks"]; if ($this->v1d696dbd12["container"] && isset($this->v1d696dbd12["container"]["id"])) $this->v1d696dbd12["container"] = array($this->v1d696dbd12["container"]); if ($this->v1d696dbd12["task"] && isset($this->v1d696dbd12["task"]["id"])) $this->v1d696dbd12["task"] = array($this->v1d696dbd12["task"]); } } public function getTasks() { return $this->v1d696dbd12; } public static function getTaskLayerTags() { return self::$pfc8be585; } public function getTasksByLayerTag($v1b1c6a10a2, $v552b831ecd = -1) { $v1d696dbd12 = array(); if (is_array($this->v1d696dbd12["task"])) { foreach ($this->v1d696dbd12["task"] as $v7f5911d32d) { if ($v552b831ecd == 0) break; if ($v7f5911d32d["tag"] == self::$pfc8be585[$v1b1c6a10a2]) { $v1d696dbd12[] = $v7f5911d32d; if ($v552b831ecd > 0) { --$v552b831ecd; if ($v552b831ecd == 0) break; } } } } return $v1d696dbd12; } public function getWorkflowData() { return self::getWorkflowDataByTasks($this->v1d696dbd12); } public function getWorkflowDataWithInnerTasks() { $v1d696dbd12 = self::getWorkflowDataByTasks($this->v1d696dbd12); if ($v1d696dbd12 && $v1d696dbd12["tasks"]) foreach ($v1d696dbd12["tasks"] as $v8282c7dd58 => $v7f5911d32d) { $v7f5911d32d = self::f6df6930eb0($v1d696dbd12["tasks"], $v8282c7dd58); if ($v7f5911d32d) $v1d696dbd12["tasks"][$v8282c7dd58] = $v7f5911d32d; } return $v1d696dbd12; } private function f6df6930eb0(&$v1d696dbd12, $v8282c7dd58) { if ($v1d696dbd12 && $v1d696dbd12[$v8282c7dd58]) { if ($v1d696dbd12[$v8282c7dd58]["tasks"]) foreach ($v1d696dbd12[$v8282c7dd58]["tasks"] as $pd12cba7e => $v8cecff3403) if ($pd12cba7e != $v8282c7dd58 && $v1d696dbd12[$pd12cba7e]) { $v1d696dbd12[$v8282c7dd58]["tasks"][$pd12cba7e] = self::f6df6930eb0($v1d696dbd12, $pd12cba7e); unset($v1d696dbd12[$pd12cba7e]); } return $v1d696dbd12[$v8282c7dd58]; } return null; } public static function getWorkflowDataByTasks($v1d696dbd12) { $v1d696dbd12["container"] = isset($v1d696dbd12["container"]["id"]) ? array($v1d696dbd12["container"]) : $v1d696dbd12["container"]; $v1d696dbd12["task"] = isset($v1d696dbd12["task"]["id"]) ? array($v1d696dbd12["task"]) : $v1d696dbd12["task"]; $v09fd35a416 = array(); $v09fd35a416["settings"] = array(); $v09fd35a416["containers"] = array(); $v09fd35a416["tasks"] = array(); if ($v1d696dbd12["settings"]) foreach ($v1d696dbd12["settings"] as $pbfa01ed1 => $v67db1bd535) { if ( (substr($v67db1bd535, 0, 1) == "{" && substr($v67db1bd535, -1) == "}") || (substr($v67db1bd535, 0, 1) == "[" && substr($v67db1bd535, -1) == "]") ) $v67db1bd535 = json_decode($v67db1bd535, true); $v09fd35a416["settings"][$pbfa01ed1] = $v67db1bd535; } foreach ($v1d696dbd12 as $pbfa01ed1 => $v67db1bd535) if ($pbfa01ed1 != "container" && $pbfa01ed1 != "task" && $pbfa01ed1 != "settings") $v09fd35a416[$pbfa01ed1] = $v67db1bd535; foreach ($v1d696dbd12 as $pbfa01ed1 => $v67db1bd535) if (($pbfa01ed1 == "container" || $pbfa01ed1 == "task") && is_array($v67db1bd535)) { foreach ($v67db1bd535 as $v972f1a5c2b) $v09fd35a416[$pbfa01ed1 . "s"][ $v972f1a5c2b["id"] ] = $v972f1a5c2b; } return $v09fd35a416; } public static function createTasksFile($pbe261fe2, $v539082ff30, $v84abb6d4d4 = null) { if (!empty($pbe261fe2)) { $v25dfe304be = dirname($pbe261fe2); if (is_dir($v25dfe304be) || mkdir($v25dfe304be, 0775, true)) { $v252ad09e5b = file_exists($pbe261fe2) ? filemtime($pbe261fe2) : null; if ($v84abb6d4d4 && $v252ad09e5b && $v252ad09e5b > $v84abb6d4d4) return 2; $v241205aec6 = self::convertTasksArrayIntoXml($v539082ff30); return file_put_contents($pbe261fe2, $v241205aec6) > 0; } } return false; } public static function convertTasksArrayIntoXml($v539082ff30) { $v241205aec6 = '<?xml version="1.0" encoding="UTF-8"?>' . "\n"; $v241205aec6 .= "<tasks>\n"; if (is_array($v539082ff30)) { if (is_array($v539082ff30["settings"])) { $v4f8d6b1eb8 = ""; foreach ($v539082ff30["settings"] as $pd69ccec5 => $v9b832d20fb) if ($pd69ccec5 && !is_numeric($pd69ccec5)) { if (is_array($v9b832d20fb) || is_object($v9b832d20fb)) $v9b832d20fb = json_encode($v9b832d20fb); if (!is_numeric($v9b832d20fb) && !is_bool($v9b832d20fb)) $v9b832d20fb = "<![CDATA[$v9b832d20fb]]>"; $v4f8d6b1eb8 .= "\t\t<$pd69ccec5>$v9b832d20fb</$pd69ccec5>\n"; } if ($v4f8d6b1eb8) { $v241205aec6 .= "\t<settings>\n"; $v241205aec6 .= $v4f8d6b1eb8; $v241205aec6 .= "\t</settings>\n"; } } foreach ($v539082ff30 as $pbfa01ed1 => $v67db1bd535) if ($pbfa01ed1 != "containers" && $pbfa01ed1 != "tasks" && $pbfa01ed1 != "settings") { if (is_array($v67db1bd535)) { $v241205aec6 .= "\t<$pbfa01ed1>\n"; $v241205aec6 .= self::f1679e3c23b($v67db1bd535, "\t\t"); $v241205aec6 .= "\t</$pbfa01ed1>\n"; } else $v241205aec6 .= "\t<$pbfa01ed1>" . self::f1679e3c23b($v67db1bd535) . "</$pbfa01ed1>\n"; } foreach ($v539082ff30 as $pbfa01ed1 => $v67db1bd535) if (is_array($v67db1bd535) && ($pbfa01ed1 == "containers" || $pbfa01ed1 == "tasks")) { $v68e994bbc0 = substr($pbfa01ed1, 0, -1); foreach ($v67db1bd535 as $v9ff79a4a24 => $v972f1a5c2b) { $v241205aec6 .= "\t<$v68e994bbc0"; if ($pbfa01ed1 == "tasks") { if ($v972f1a5c2b["start"] > 0) $v241205aec6 .= " start=\"" . $v972f1a5c2b["start"] . "\""; unset($v972f1a5c2b["start"]); } $v241205aec6 .= ">\n"; $v241205aec6 .= self::f1679e3c23b($v972f1a5c2b, "\t\t"); $v241205aec6 .= "\t</$v68e994bbc0>\n"; } } } $v241205aec6 .= "</tasks>"; return $v241205aec6; } private static function f1679e3c23b($pfb662071, $pdcf670f6 = "") { $v241205aec6 = ""; if (is_array($pfb662071)) { foreach ($pfb662071 as $pbfa01ed1 => $v67db1bd535) { if (is_array($v67db1bd535)) { $pa7bdcb52 = array(); $pa64fb460 = array(); foreach ($v67db1bd535 as $v43dd7d0051 => $v342a134247) { if (is_numeric($v43dd7d0051)) { $pa64fb460[$v43dd7d0051] = $v342a134247; } else { $pa7bdcb52[$v43dd7d0051] = $v342a134247; } } if (!empty($pa7bdcb52) && empty($pa64fb460)) { $pa64fb460 = array($v67db1bd535); $pa7bdcb52 = array(); } foreach ($pa64fb460 as $v342a134247) { if (is_array($v342a134247)) { $v241205aec6 .= "$pdcf670f6<$pbfa01ed1>\n"; $v241205aec6 .= self::f1679e3c23b($v342a134247, $pdcf670f6 . "\t"); $v241205aec6 .= "$pdcf670f6</$pbfa01ed1>\n"; } else { $v241205aec6 .= "$pdcf670f6<$pbfa01ed1>" . self::f1679e3c23b($v342a134247) . "</$pbfa01ed1>\n"; } } if (!empty($pa7bdcb52) && !empty($pa64fb460)) { $v241205aec6 .= self::f1679e3c23b($pa7bdcb52, $pdcf670f6); } } else { $v241205aec6 .= "$pdcf670f6<$pbfa01ed1>" . self::f1679e3c23b($v67db1bd535) . "</$pbfa01ed1>\n"; } } } else { $v241205aec6 .= is_numeric($pfb662071) || is_bool($v67db1bd535) ? $pfb662071 : (!empty($pfb662071) ? "<![CDATA[$pfb662071]]>" : ""); } return $v241205aec6; } public static function updateTaskProperties($pbe261fe2, $v89cfc6ba9c, $v49ba52cfb2) { $pae77d38c = file_get_contents($pbe261fe2); $v6dcd71ad57 = new MyXML($pae77d38c); $v1d696dbd12 = $v6dcd71ad57->toArray(array("lower_case_keys" => true)); $v54817707c7 = false; if (is_array($v1d696dbd12["tasks"][0]["childs"]["task"])) { $pc37695cb = count($v1d696dbd12["tasks"][0]["childs"]["task"]); for ($v43dd7d0051 = 0; $v43dd7d0051 < $pc37695cb; $v43dd7d0051++) { $v7f5911d32d = $v1d696dbd12["tasks"][0]["childs"]["task"][$v43dd7d0051]; if (strtolower($v7f5911d32d["childs"]["label"][0]["value"]) == strtolower($v89cfc6ba9c)) { foreach ($v49ba52cfb2 as $v1cfba8c105 => $pa6209df1) { $v791afae49a = strtolower($v1cfba8c105); $v67db1bd535 = $v7f5911d32d["childs"]["properties"][0]["childs"][$v791afae49a][0]["value"]; if (isset($v67db1bd535)) { $v7f5911d32d["childs"]["properties"][0]["childs"][$v791afae49a][0]["value"] = $v49ba52cfb2[$v1cfba8c105]; $v54817707c7 = true; } } $v1d696dbd12["tasks"][0]["childs"]["task"][$v43dd7d0051] = $v7f5911d32d; break; } } } if ($v54817707c7) { $pa694ba99 = new MyXMLArray($v1d696dbd12); $v241205aec6 = $pa694ba99->toXML(array("lower_case_keys" => true)); $v241205aec6 = '<?xml version="1.0" encoding="UTF-8"?>' . str_replace("&amp;", "&", $v241205aec6); return file_put_contents($pbe261fe2, $v241205aec6); } return true; } public static function getTaskFilePathByPath($pdb9e96e6, $pa32be502, $v31199c28eb = false) { $pa32be502 = $pdb9e96e6[$pa32be502] ? $pdb9e96e6[$pa32be502] : $pa32be502; $v14b888c9ab = pathinfo($pa32be502); $pa32be502 = $v14b888c9ab['dirname'] . "/" . $v14b888c9ab['filename'] . $v31199c28eb . ($v14b888c9ab['extension'] ? "." . $v14b888c9ab['extension'] : ""); return $pa32be502; } public static function getDBDiagramTaskFilePath($pdb9e96e6, $pa32be502, $v181884a7f4) { $v31199c28eb = "_" . WorkFlowBeansConverter::getObjectNameFromRawLabel($v181884a7f4); $pa32be502 = self::getTaskFilePathByPath($pdb9e96e6, $pa32be502, $v31199c28eb); return $pa32be502; } private static function f57458ca210($v67db1bd535) { return strpos($v67db1bd535, '$') !== false; } } ?>
