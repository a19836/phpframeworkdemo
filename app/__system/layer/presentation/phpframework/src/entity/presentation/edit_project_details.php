<?php
/*
 * Copyright (c) 2007 PHPMyFrameWork - Joao Pinto
 * AUTHOR: Joao Paulo Lopes Pinto -- http://jplpinto.com
 * 
 * The use of this code must be allowed first by the creator Joao Pinto, since this is a private and proprietary code.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
 include_once get_lib("org.phpframework.workflow.WorkFlowTaskHandler"); include_once $EVC->getUtilPath("CMSPresentationLayerHandler"); include_once $EVC->getUtilPath("LayoutTypeProjectHandler"); include_once $EVC->getUtilPath("WorkFlowDBHandler"); include_once $EVC->getUtilPath("FlushCacheHandler"); $bean_name = $_GET["bean_name"]; $bean_file_name = $_GET["bean_file_name"]; $path = $_GET["path"]; $popup = $_GET["popup"]; $on_success_js_func = $_GET["on_success_js_func"]; $path = str_replace("../", "", $path); $UserAuthenticationHandler->checkPresentationFileAuthentication($entity_path, "access"); $layers_projects = CMSPresentationLayerHandler::getPresentationLayersProjectsFiles($user_global_variables_file_path, $user_beans_folder_path, false, false, -1, false, null, true); $LayoutTypeProjectHandler = new LayoutTypeProjectHandler($UserAuthenticationHandler, $user_global_variables_file_path, $user_beans_folder_path, $bean_file_name, $bean_name); $LayoutTypeProjectHandler->filterPresentationLayersProjectsByUserAndLayoutPermissions($layers_projects, $filter_by_layout); $presentation_brokers = array(); if ($layers_projects) foreach ($layers_projects as $bn => $layer_props) { $layer_bean_folder_name = WorkFlowBeansFileHandler::getLayerBeanFolderName($user_beans_folder_path . $layer_props["bean_file_name"], $bn, $user_global_variables_file_path); $presentation_brokers[] = array($layer_bean_folder_name, $layer_props["bean_file_name"], $bn); } if ($_POST && trim($_POST["name"])) { $project = trim($_POST["old_name"]) ? trim($_POST["old_name"]) : trim($_POST["name"]); $project_folder = trim($_POST["old_project_folder"]); $path = ($project_folder ? $project_folder . "/" : "") . $project; if ($_POST["is_existent_project"]) { $is_rename_project = trim($_POST["project_folder"]) != trim($_POST["old_project_folder"]) || trim($_POST["name"]) != trim($_POST["old_name"]); if ($is_rename_project) $path = (trim($_POST["project_folder"]) ? trim($_POST["project_folder"]) . "/" : "") . trim($_POST["name"]); } else $path = (trim($_POST["project_folder"]) ? trim($_POST["project_folder"]) . "/" : "") . trim($_POST["name"]); } $path = preg_replace("/[\/]+/", "/", $path); $path = preg_replace("/^[\/]+/", "", $path); $path = preg_replace("/[\/]+$/", "", $path); $project_props = $layers_projects && $layers_projects[$bean_name] && $layers_projects[$bean_name]["projects"] && $layers_projects[$bean_name]["projects"][$path] ? $layers_projects[$bean_name]["projects"][$path] : null; $is_existent_project = $project_props && $project_props["item_type"] != "project_folder"; $WorkFlowBeansFileHandler = new WorkFlowBeansFileHandler($user_beans_folder_path . $layers_projects[$bean_name]["bean_file_name"], $user_global_variables_file_path); $PEVC = $WorkFlowBeansFileHandler->getEVCBeanObject($bean_name, $path); $P = $PEVC->getPresentationLayer(); $layer_brokers_settings = WorkFlowBeansFileHandler::getLayerBrokersSettings($user_global_variables_file_path, $user_beans_folder_path, $P->getBrokers(), '$EVC->getBroker'); $db_brokers_exist = !empty($layer_brokers_settings["db_brokers"]); if ($db_brokers_exist) { $db_drivers_props = WorkFlowBeansFileHandler::getLayerDBDrivers($user_global_variables_file_path, $user_beans_folder_path, $P, true); $db_drivers_names = array_keys($db_drivers_props); } if ($is_existent_project) { prepareProjectPaths($path, $project_folder, $project); $old_project_folder = $project_folder; $old_project = $project; $project_description = $project_props["description"]; $project_image = $project_props["logo_url"]; $project_layout_type_data = $LayoutTypeProjectHandler->getLayoutFromProjectPath($project_props["path"]); $project_layout_type_id = $project_layout_type_data ? $project_layout_type_data["layout_type_id"] : null; if ($_POST) { if (!trim($_POST["name"])) $error_message = "Project name cannot be empty"; else { $is_previous_existent_project = $_POST["is_existent_project"]; $project = trim($_POST["name"]); $project_description = $_POST["description"]; $project_folder = trim($_POST["project_folder"]); $project_folder = $project_folder == "." ? "" : $project_folder; $project_path = ($project_folder ? $project_folder . "/" : "") . $project; prepareProjectPaths($project_path, $project_folder, $project); $status = true; if ($is_rename_project) { $status = is_dir($project_props["path"]); if (!$status) $error_message = "Project could not be moved to the new folder. Maybe there is already a project with the same name in this new folder."; } if ($status) { $webroot_path = $PEVC->getWebrootPath(); $file_path = $webroot_path . "humans.txt"; $status = file_put_contents($file_path, $project_description) !== false; if ($status && $_FILES["image"]["name"]) { $dst_path = $project_props["logo_path"]; $dst_path = $dst_path ? $dst_path : $webroot_path . "favicon.ico"; if (move_uploaded_file($_FILES["image"]["tmp_name"], $dst_path)) $project_image = $project_props["logo_path"] ? $project_props["logo_url"] : $project_props["url"] . "favicon.ico"; else $status = false; } if ($status && !$is_previous_existent_project) { $project_db_driver = $_POST["project_db_driver"]; $db_details = $_POST["db_details"]; if (is_numeric($project_db_driver) && intval($project_db_driver) === 1 && $db_details) $project_db_driver = createNewDB($EVC, $PEVC, $workflow_paths_id, $user_global_variables_file_path, $user_beans_folder_path, $user_global_settings_file_path, $webroot_cache_folder_path, $webroot_cache_folder_url, $css_and_js_optimizer_webroot_cache_folder_path, $deployments_temp_folder_path, $db_details, $error_message, $extra_message); if ($project_db_driver && !is_numeric($project_db_driver)) { if (!$LayoutTypeProjectHandler->createLayoutTypePermissionsForDBDriverFromProjectPath($project_props["path"], $project_db_driver)) $error_message = "Could not assign DB Driver '$project_db_driver' to project."; if ($project_db_driver) { $pre_init_config_path = $PEVC->getConfigPath("pre_init_config"); if (file_exists($pre_init_config_path)) { $contents = file_get_contents($pre_init_config_path); $replacement = '$default_db_driver = "' . $project_db_driver . '";'; if (preg_match('/\$default_db_driver\s*=/', $contents)) $contents = preg_replace('/\$default_db_driver\s*=\s*([^;]+);/', $replacement, $contents); else { $pos = strpos($contents, "?>"); if ($pos !== false) $contents = substr($contents, 0, $pos) . $replacement . "\n" . substr($contents, $pos); else $contents .= "<?php\n" . $replacement . "\n?>"; } if (file_put_contents($pre_init_config_path, $contents) === false) $error_message = "Could not save default DB Driver to project."; } else $error_message = "config/pre_init_config.php file does NOT exists! Something weird went wrong. Please fix this before you continue..."; } } } } } } if (!$_POST || $is_previous_existent_project) { $pre_init_config_path = $PEVC->getConfigPath("pre_init_config"); $PHPVariablesFileHandler = new PHPVariablesFileHandler(array($user_global_variables_file_path, $pre_init_config_path)); $PHPVariablesFileHandler->startUserGlobalVariables(); $default_db_driver = $GLOBALS["default_db_driver"]; $PHPVariablesFileHandler->endUserGlobalVariables(); } } else { $project_folder = $path; $old_project_folder = $project_folder; if ($_POST) $status = false; if ($db_brokers_exist) { $all_driver_labels = DB::getAllDriverLabelsByType(); $available_db_types = array(); foreach ($all_driver_labels as $type => $label) $available_db_types[] = array("value" => $type, "label" => "$label DataBase"); $drivers_extensions = DB::getAllExtensionsByType(); $available_extensions_options = array(); if ($data["db_type"] && is_array($drivers_extensions[ $data["db_type"] ])) foreach ($drivers_extensions[ $data["db_type"] ] as $idx => $enc) $available_extensions_options[] = array("value" => $enc, "label" => $enc . ($idx == 0 ? " - Default" : "")); if ($data["db_extension"] && (!$drivers_extensions[ $data["db_type"] ] || !in_array($data["db_extension"], $drivers_extensions[ $data["db_type"] ]))) $available_extensions_options[] = array("value" => $data["db_extension"], "label" => $data["db_extension"] . " - DEPRECATED"); $drivers_encodings = DB::getAllDBCharsetsByType(); $available_encodings_options = array(array("value" => "", "label" => "-- Default --")); if ($data["db_type"] && is_array($drivers_encodings[ $data["db_type"] ])) foreach ($drivers_encodings[ $data["db_type"] ] as $enc => $label) $available_encodings_options[] = array("value" => $enc, "label" => $label); if ($data["db_encoding"] && (!$drivers_encodings[ $data["db_type"] ] || !array_key_exists($data["db_encoding"], $drivers_encodings[ $data["db_type"] ]))) $available_encodings_options[] = array("value" => $data["db_encoding"], "label" => $data["db_encoding"] . " - DEPRECATED"); $drivers_ignore_connection_options = DB::getAllIgnoreConnectionOptionsByType(); $drivers_ignore_connection_options_by_extension = DB::getAllIgnoreConnectionOptionsByExtensionAndType(); } } function prepareProjectPaths($pa32be502, &$v42b0d9ac32, &$v93756c94b3) { $pa32be502 = preg_replace("/[\/]+/", "/", $pa32be502); $pa32be502 = preg_replace("/^[\/]+/", "", $pa32be502); $pa32be502 = preg_replace("/[\/]+$/", "", $pa32be502); $v42b0d9ac32 = $pa32be502 ? dirname($pa32be502) : ""; $v42b0d9ac32 = $v42b0d9ac32 == "." ? "" : $v42b0d9ac32; $v42b0d9ac32 = preg_replace("/^[\/]+/", "", $v42b0d9ac32); $v42b0d9ac32 = preg_replace("/[\/]+$/", "", $v42b0d9ac32); $v93756c94b3 = basename($pa32be502); } function createNewDB($v08d9602741, $v188b4f5fa6, $pdb9e96e6, $v3d55458bcd, $v5039a77f9d, $pc0fc7d17, $v4bf8d90f04, $pfce4d1b3, $v0bd21d963b, $v28d8163063, $pb14b91ef, &$pef612b9d, &$v3bd3eac186) { $pb14b91ef["db_name"] = trim($pb14b91ef["db_name"]); $pb14b91ef["host"] = trim($pb14b91ef["host"]); $v885f87a7fe = null; if ($pb14b91ef["db_name"]) { $v5e053dece2 = $pdb9e96e6["layer"]; if ($v5e053dece2 && file_exists($v5e053dece2)) { $v9ab35f1f0d = $v188b4f5fa6->getPresentationLayer(); $v7a0994a134 = WorkFlowBeansFileHandler::getLayerBrokersSettings($v3d55458bcd, $v5039a77f9d, $v9ab35f1f0d->getBrokers()); $pab752e34 = $v7a0994a134["db_brokers"][0]; $pc156e368 = $pab752e34[0]; if ($pc156e368) { $pecad7cca = new WorkFlowTaskHandler($v4bf8d90f04, $pfce4d1b3); $pecad7cca->setCacheRootPath(LAYER_CACHE_PATH); $pecad7cca->setAllowedTaskFolders(array("layer/")); $pecad7cca->setAllowedTaskTags(array("dbdriver")); $pecad7cca->initWorkFlowTasks(); $v524bbc0f84 = $pecad7cca->getTasksByTag("dbdriver"); $v7da7dfc2eb = $v524bbc0f84[0]["type"]; if ($v7da7dfc2eb) { $v8cd3e3837d = new WorkFlowTasksFileHandler($v5e053dece2); $v8cd3e3837d->init(); $v1d696dbd12 = $v8cd3e3837d->getWorkflowData(); if ($v1d696dbd12["tasks"]) { $pfc8be585 = WorkFlowTasksFileHandler::getTaskLayerTags(); $pf8ff20e3 = array(); $pe3caf607 = null; foreach ($v1d696dbd12["tasks"] as $v7f5911d32d) { $pf8ff20e3[] = $v7f5911d32d["task_id"]; if ($v7f5911d32d["tag"] == $pfc8be585["dbdriver"]) { $pe927264a = $v7f5911d32d["properties"]; if ($pe927264a["type"] == $pb14b91ef["type"] && $pe927264a["extension"] == $pb14b91ef["extension"] && $pe927264a["host"] == $pb14b91ef["host"] && $pe927264a["port"] == $pb14b91ef["port"] && $pe927264a["db_name"] == $pb14b91ef["db_name"]) $pe3caf607 = $v7f5911d32d; } } if ($pe3caf607) { $v885f87a7fe = WorkFlowBeansConverter::getBrokerNameFromRawLabel($pe3caf607["label"]); $v3bd3eac186 = "The user-defined DB Driver already exists with the name '" . $pe3caf607["label"] . "', so the systems used this DB Driver instead."; } else { $v8f8a4780ab = $pb14b91ef["db_name"]; if (in_array($v8f8a4780ab, $pf8ff20e3) && $pb14b91ef["host"]) $v8f8a4780ab = $pb14b91ef["host"] . "_" . $pb14b91ef["db_name"]; while (in_array($v8f8a4780ab, $pf8ff20e3)) $v8f8a4780ab .= "_" . rand(0, 1000); $v05acc4293c = $pb14b91ef; $v05acc4293c["active"] = 1; $pe3caf607 = array( "id" => $v8f8a4780ab, "label" => $pb14b91ef["db_name"], "tag" => $pfc8be585["dbdriver"], "type" => $v7da7dfc2eb, "properties" => $v05acc4293c ); $v7f3b80e443 = null; foreach ($v1d696dbd12["tasks"] as &$v7f5911d32d) if ($v7f5911d32d["tag"] == $pfc8be585["db"] && $v7f5911d32d["properties"]["active"]) { $v8f746c7575 = WorkFlowBeansConverter::getBrokerNameFromRawLabel($v7f5911d32d["label"]); if ($v8f746c7575 == $pc156e368) { $v7f3b80e443 = $v7f5911d32d; $v6939304e91 = isset($v7f5911d32d["exits"]["layer_exit"][0]) ? $v7f5911d32d["exits"]["layer_exit"] : array($v7f5911d32d["exits"]["layer_exit"]); $v6939304e91[] = array( "task_id" => $pe3caf607["id"], ); $v7f5911d32d["exits"]["layer_exit"] = $v6939304e91; $pe3caf607["width"] = $v7f5911d32d["width"]; $pe3caf607["height"] = $v7f5911d32d["height"]; $pe3caf607["offset_left"] = $v7f5911d32d["offset_left"] + 10; $pe3caf607["offset_top"] = $v7f5911d32d["offset_top"] + 170; break; } } unset($v7f5911d32d); if ($v7f3b80e443) { $v1d696dbd12["tasks"][ $pe3caf607["id"] ] = $pe3caf607; $v8a69f2cbe5 = WorkFlowTasksFileHandler::createTasksFile($v5e053dece2, $v1d696dbd12); if ($v8a69f2cbe5) { $v7935389d61 = new WorkFlowBeansConverter($v5e053dece2, $v5039a77f9d, $v3d55458bcd, $pc0fc7d17); $v7935389d61->init(); $v8735cd0dd2 = $v7935389d61->recreateBean($pe3caf607["id"]) && $v7935389d61->recreateBean($v7f3b80e443["id"]); if ($v8735cd0dd2) { FlushCacheHandler::flushCache($v08d9602741, $v4bf8d90f04, $pfce4d1b3, $pdb9e96e6, $v3d55458bcd, $v5039a77f9d, $v0bd21d963b, $v28d8163063); $v885f87a7fe = WorkFlowBeansConverter::getBrokerNameFromRawLabel($pe3caf607["label"]); $v660b5296f8 = new WorkFlowDBHandler($v5039a77f9d, $v3d55458bcd); $v446afd1219 = $v660b5296f8->isTaskDBDriverValid($pe3caf607, true); if (!$v446afd1219) $pef612b9d = "DB credentials are not valid."; else $v3bd3eac186 = "The user-defined database was successfully created, but without any default tables. If you already have some modules installed in this framework and you want to include them in this database, you need to reinstall them for this new database, so that the system will create the corresponding tables."; } else $pef612b9d = "Could not update beans file."; } else $pef612b9d = "Could not save the new db driver task in the layers diagram file."; } else $pef612b9d = "No db broker in the layers diagram."; } } else $pef612b9d = "No db broker in the layers diagram."; } else $pef612b9d = "No db driver type detected."; } else $pef612b9d = "No db broker connected with the presentation layer."; } else $pef612b9d = "Layer diagram file path does not exists. file path: '$v5e053dece2'."; } else $pef612b9d = "DB name cannot be empty."; return $v885f87a7fe; } ?>
