<?php
/*
 * Copyright (c) 2007 PHPMyFrameWork - Joao Pinto
 * AUTHOR: Joao Paulo Lopes Pinto -- http://jplpinto.com
 * 
 * The use of this code must be allowed first by the creator Joao Pinto, since this is a private and proprietary code.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

$UserAuthenticationHandler->checkPresentationFileAuthentication($entity_path, "access"); $action_type = $_POST["action_type"]; $action_value = $_POST["action_value"]; if (is_array($action_value)) { MyArray::arrKeysToLowerCase($action_value, true); $props = array(); if ($action_type == "restconnector") { $result_type = getValueBasedInValueType($action_value["result_type"], $action_value["result_type_type"]); $allowed_result_types = array("content", "content_json", "content_xml", "content_xml_simple", "content_serialized"); if (is_array($action_value["data"]) && in_array($result_type, $allowed_result_types)) { foreach ($action_value["data"] as $idx => $item) { if ($item["key_type"] == "options") $action_value["data"][$idx]["key_type"] = "string"; if ($item["key"] == "settings" && is_array($item["items"])) foreach ($item["items"] as $idj => $sub_item) { if ($sub_item["key_type"] == "options") $action_value["data"][$idx]["items"][$idj]["key_type"] = "string"; } } $data = convertComplexArrayToSimpleArray($action_value["data"]); include_once get_lib("org.phpframework.connector.RestConnector"); $res = RestConnector::connect($data, $result_type); $props = parseRequestResult($res, $result_type); } } else if ($action_type == "soapconnector") { $type = getValueBasedInValueType($action_value["data"]["type"], $action_value["data"]["type_type"]); $allowed_types = array("callSoapClient", "callSoapFunction"); if (is_array($action_value["data"]) && in_array($type, $allowed_types)) { $result_type = getValueBasedInValueType($action_value["result_type"], $action_value["result_type_type"]); $allowed_result_types = array("content", "content_json", "content_xml", "content_xml_simple", "content_serialized"); if ($type != "callSoapFunction" || in_array($result_type, $allowed_result_types)) { if ($action_value["data"]["options_type"] == "options") { $options = array(); if (is_array($action_value["data"]["options"])) foreach ($action_value["data"]["options"] as $opt) if ($opt["name"]) $options[ $opt["name"] ] = getValueBasedInValueType($opt["value"], $opt["var_type"]); } else $options = getValueBasedInValueType($action_value["data"]["options"], $action_value["data"]["options_type"]); if ($action_value["data"]["headers_type"] == "options") { $headers = array(); if (is_array($action_value["data"]["headers"])) foreach ($action_value["data"]["headers"] as $header) if (is_array($header)) { $h = array(); foreach ($header as $k => $v) if (array_key_exists($k . "_type", $header)) { $v_type = $header[$k . "_type"]; if ($v_type == "array" && is_array($v)) $h[$k] = convertComplexArrayToSimpleArray($v); else $h[$k] = getValueBasedInValueType($v, $v_type); } $headers[] = $h; } } else $headers = getValueBasedInValueType($action_value["data"]["headers"], $action_value["data"]["headers_type"]); if ($action_value["data"]["remote_function_args_type"] == "array") $remote_function_args = convertComplexArrayToSimpleArray($action_value["data"]["remote_function_args"]); else $remote_function_args = getValueBasedInValueType($action_value["data"]["remote_function_args"], $action_value["data"]["remote_function_args_type"]); $data = array( "type" => $type, "wsdl_url" => getValueBasedInValueType($action_value["data"]["wsdl_url"], $action_value["data"]["wsdl_url_type"]), "options" => $options, "headers" => $headers, ); if ($type == "callSoapFunction") { $data["remote_function_name"] = getValueBasedInValueType($action_value["data"]["remote_function_name"], $action_value["data"]["remote_function_name_type"]); $data["remote_function_args"] = $remote_function_args; } include_once get_lib("org.phpframework.connector.SoapConnector"); if ($type == "callSoapClient") { $SoapClient = SoapConnector::connect($data); if ($SoapClient) { $props = array( "functions" => array() ); $res = $SoapClient->__getFunctions(); if ($res) foreach ($res as $func_str) { preg_match("/ (\w+)\(/", $func_str, $match); $func_name = $match[1]; $props["functions"][] = array( "name" => $func_name, "func" => $func_str ); } } } else { $res = SoapConnector::connect($data, $result_type); $props = parseRequestResult($res, $result_type); } } } } } function convertComplexArrayToSimpleArray($pfb662071) { $v5d78194c33 = array(); if (is_array($pfb662071)) foreach ($pfb662071 as $pe5c5e2fe => $v956913c90f) { if ($v956913c90f["items"]) $v67db1bd535 = convertComplexArrayToSimpleArray($v956913c90f["items"]); else $v67db1bd535 = getValueBasedInValueType($v956913c90f["value"], $v956913c90f["value_type"]); if ($v956913c90f["key_type"] == "null") $v5d78194c33[] = $v67db1bd535; else { $pbfa01ed1 = getValueBasedInValueType($v956913c90f["key"], $v956913c90f["key_type"]); $v5d78194c33[$pbfa01ed1] = $v67db1bd535; } } return $v5d78194c33; } function getValueBasedInValueType($v67db1bd535, $pc3e857ed) { if ($pc3e857ed == "string" || $pc3e857ed == "options") return $v67db1bd535; if (!$pc3e857ed && strlen($v67db1bd535)) { eval('$v02a69d4e0f = ' . $v67db1bd535 . ';'); return $v02a69d4e0f; } return ""; } function parseRequestResult($pba23d78c, $pbd9f98de) { $v9073377656 = array(); if (($pbd9f98de == "content_json" || $pbd9f98de == "content_serialized") && is_array($pba23d78c)) { $v0872dcc2d9 = array_keys($pba23d78c); $pbf2a75a9 = $v0872dcc2d9 === range(0, count($pba23d78c) - 1); if ($pbf2a75a9) $pba23d78c = $pba23d78c[ $v0872dcc2d9[0] ]; if (is_array($pba23d78c)) { $v9073377656 = array( "attributes" => array(), "is_multiple" => $pbf2a75a9, ); foreach ($pba23d78c as $pe5c5e2fe => $v956913c90f) $v9073377656["attributes"][] = array( "column" => $pe5c5e2fe, ); } } else if (($pbd9f98de == "content_xml" || $pbd9f98de == "content_xml_simple") && is_array($pba23d78c)) { $v201d5661d1 = key($pba23d78c); $pc4222023 = $pba23d78c[$v201d5661d1][0]["childs"]; if (is_array($pc4222023)) { $pc62c065f = array_keys($pc4222023); $v8b1690682c = $pc62c065f[0]; if (count($pc62c065f) == 1 && !is_numeric($v8b1690682c)) { $pfba83f5b = $pc4222023[$v8b1690682c]; $pfdf9ae60 = array_keys($pfba83f5b); $pbf2a75a9 = is_array($pfba83f5b) && $pfdf9ae60 === range(0, count($pfba83f5b) - 1); if ($pbf2a75a9) $pc4222023 = $pfba83f5b[ $pfdf9ae60[0] ]["childs"]; } if (is_array($pc4222023)) { $v9073377656 = array( "attributes" => array(), "is_multiple" => $pbf2a75a9, ); foreach ($pc4222023 as $pe5c5e2fe => $v956913c90f) $v9073377656["attributes"][] = array( "column" => $pe5c5e2fe, ); } } } return $v9073377656; } ?>
