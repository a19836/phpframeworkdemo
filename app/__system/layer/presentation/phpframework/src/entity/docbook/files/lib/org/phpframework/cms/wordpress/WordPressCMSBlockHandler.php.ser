a:1:{s:24:"WordPressCMSBlockHandler";a:1:{s:7:"methods";a:4:{s:32:"convertContentsHtmlToPHPTemplate";a:15:{s:4:"name";s:32:"convertContentsHtmlToPHPTemplate";s:16:"start_line_index";i:35;s:17:"start_token_index";i:146;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:153;s:20:"end_args_token_index";i:155;s:9:"arguments";a:1:{s:5:"$html";N;}s:25:"start_brackets_line_index";i:35;s:26:"start_brackets_token_index";i:157;s:23:"end_brackets_line_index";i:64;s:24:"end_brackets_token_index";i:486;s:14:"end_line_index";i:64;s:15:"end_token_index";i:486;}s:15:"getBlockContent";a:20:{s:4:"name";s:15:"getBlockContent";s:16:"start_line_index";i:83;s:17:"start_token_index";i:490;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:8:"comments";a:1:{i:0;s:1117:"/*
	 * $block_id = "region_content_1"
	 * 
	 * $url_query = "/2020/10/21/hello-world/"
	 * $url_query = "/product/product-1/"
	 * 
	 * $options = array(
	 * 	"parse_wordpress_urls" => true/false, //If true, means that the system will replace all wordpress urls with the phpframework url
	 *	"parse_wordpress_relative_urls" => true/false, //If true, means that the system will replace all wordpress relative urls with the phpframework url
	 *	"allowed_wordpress_urls" => array("/some url regex/", "or a full url"), //regex for the urls that the system shouold leave alone
	 * )
	 * 
	 * if wordpress was previously called and the new wordpress template is different than the previous wordpress call, do a curl request. Do not call wordpress directly bc it was already initialized before with the template: $first_wordpress_theme_called. If we want to call the wordpress with a new template, we must do it now with a curl request, otherwise the data will not be trustable.
	 * Because of this reason we should call this method getBlockContent and not the getBlockContentDirectly directly.
	 * 
	 * returns an array
	 */";}s:25:"start_comments_line_index";i:66;s:26:"start_comments_token_index";i:488;s:23:"end_comments_line_index";i:82;s:24:"end_comments_token_index";i:488;s:22:"start_args_token_index";i:495;s:20:"end_args_token_index";i:503;s:9:"arguments";a:3:{s:9:"$block_id";N;s:10:"$url_query";N;s:8:"$options";N;}s:25:"start_brackets_line_index";i:83;s:26:"start_brackets_token_index";i:505;s:23:"end_brackets_line_index";i:252;s:24:"end_brackets_token_index";i:1745;s:14:"end_line_index";i:252;s:15:"end_token_index";i:1745;}s:23:"getBlockContentDirectly";a:20:{s:4:"name";s:23:"getBlockContentDirectly";s:16:"start_line_index";i:260;s:17:"start_token_index";i:1749;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:8:"comments";a:1:{i:0;s:470:"/*
	 * Try to avoid calling this method directly bc if wordpress was previously called and the new wordpress template is different than the previous wordpress call, the returned data will not be trustable, bc wordpress was already initialized wi tht first template and the data will be related with this template and not with the new template!
	 * Only call this method in the get_wordpress_content_array.php, bc of infinit loops with curl!
	 *
	 * returns an array
	 */";}s:25:"start_comments_line_index";i:254;s:26:"start_comments_token_index";i:1747;s:23:"end_comments_line_index";i:259;s:24:"end_comments_token_index";i:1747;s:22:"start_args_token_index";i:1754;s:20:"end_args_token_index";i:1766;s:9:"arguments";a:3:{s:9:"$block_id";N;s:10:"$url_query";N;s:8:"$options";s:4:"null";}s:25:"start_brackets_line_index";i:260;s:26:"start_brackets_token_index";i:1768;s:23:"end_brackets_line_index";i:410;s:24:"end_brackets_token_index";i:2988;s:14:"end_line_index";i:410;s:15:"end_token_index";i:2988;}s:18:"prepareRedirectUrl";a:20:{s:4:"name";s:18:"prepareRedirectUrl";s:16:"start_line_index";i:414;s:17:"start_token_index";i:2994;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:2:{i:0;s:56:"//called in the wordpress/wp-includes/pluggable.php file";i:1;s:317:"//leave prepareRedirectUrl here and DO NOT COPY IT to WordPressUrlsParser, bc the pluggable.php will only call this method if exists and the WordPressCMSBlockHandler class will only exists when called from the phpframework. If the user calls the wordpress directly, the prepareRedirectUrl method should not be called!";}s:25:"start_comments_line_index";i:412;s:26:"start_comments_token_index";i:2990;s:23:"end_comments_line_index";i:414;s:24:"end_comments_token_index";i:2992;s:22:"start_args_token_index";i:3001;s:20:"end_args_token_index";i:3007;s:9:"arguments";a:2:{s:10:"&$location";N;s:15:"$cookies_prefix";N;}s:25:"start_brackets_line_index";i:414;s:26:"start_brackets_token_index";i:3009;s:23:"end_brackets_line_index";i:446;s:24:"end_brackets_token_index";i:3260;s:14:"end_line_index";i:446;s:15:"end_token_index";i:3260;}}}}