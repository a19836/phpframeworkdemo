a:1:{s:5:"Layer";a:2:{s:7:"methods";a:19:{s:19:"getLayerPathSetting";a:14:{s:4:"name";s:19:"getLayerPathSetting";s:16:"start_line_index";i:30;s:17:"start_token_index";i:171;s:4:"type";s:6:"public";s:8:"abstract";b:1;s:6:"static";b:0;s:22:"start_args_token_index";i:178;s:20:"end_args_token_index";i:179;s:25:"start_brackets_line_index";i:30;s:26:"start_brackets_token_index";i:180;s:23:"end_brackets_line_index";i:30;s:24:"end_brackets_token_index";i:180;s:14:"end_line_index";i:30;s:15:"end_token_index";i:180;}s:13:"setCacheLayer";a:15:{s:4:"name";s:13:"setCacheLayer";s:16:"start_line_index";i:32;s:17:"start_token_index";i:182;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:187;s:20:"end_args_token_index";i:189;s:9:"arguments";a:1:{s:11:"$CacheLayer";N;}s:25:"start_brackets_line_index";i:32;s:26:"start_brackets_token_index";i:191;s:23:"end_brackets_line_index";i:32;s:24:"end_brackets_token_index";i:200;s:14:"end_line_index";i:32;s:15:"end_token_index";i:200;}s:13:"getCacheLayer";a:14:{s:4:"name";s:13:"getCacheLayer";s:16:"start_line_index";i:33;s:17:"start_token_index";i:202;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:207;s:20:"end_args_token_index";i:208;s:25:"start_brackets_line_index";i:33;s:26:"start_brackets_token_index";i:210;s:23:"end_brackets_line_index";i:33;s:24:"end_brackets_token_index";i:217;s:14:"end_line_index";i:33;s:15:"end_token_index";i:217;}s:13:"isCacheActive";a:14:{s:4:"name";s:13:"isCacheActive";s:16:"start_line_index";i:34;s:17:"start_token_index";i:219;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:224;s:20:"end_args_token_index";i:225;s:25:"start_brackets_line_index";i:34;s:26:"start_brackets_token_index";i:227;s:23:"end_brackets_line_index";i:34;s:24:"end_brackets_token_index";i:242;s:14:"end_line_index";i:34;s:15:"end_token_index";i:242;}s:27:"getModuleCachedLayerDirPath";a:14:{s:4:"name";s:27:"getModuleCachedLayerDirPath";s:16:"start_line_index";i:35;s:17:"start_token_index";i:244;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:249;s:20:"end_args_token_index";i:250;s:25:"start_brackets_line_index";i:35;s:26:"start_brackets_token_index";i:252;s:23:"end_brackets_line_index";i:35;s:24:"end_brackets_token_index";i:279;s:14:"end_line_index";i:35;s:15:"end_token_index";i:279;}s:19:"getModuleCacheLayer";a:14:{s:4:"name";s:19:"getModuleCacheLayer";s:16:"start_line_index";i:37;s:17:"start_token_index";i:281;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:286;s:20:"end_args_token_index";i:287;s:25:"start_brackets_line_index";i:37;s:26:"start_brackets_token_index";i:289;s:23:"end_brackets_line_index";i:37;s:24:"end_brackets_token_index";i:296;s:14:"end_line_index";i:37;s:15:"end_token_index";i:296;}s:15:"getErrorHandler";a:14:{s:4:"name";s:15:"getErrorHandler";s:16:"start_line_index";i:39;s:17:"start_token_index";i:298;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:303;s:20:"end_args_token_index";i:304;s:25:"start_brackets_line_index";i:39;s:26:"start_brackets_token_index";i:306;s:23:"end_brackets_line_index";i:43;s:24:"end_brackets_token_index";i:318;s:14:"end_line_index";i:43;s:15:"end_token_index";i:318;}s:15:"setPHPFrameWork";a:15:{s:4:"name";s:15:"setPHPFrameWork";s:16:"start_line_index";i:45;s:17:"start_token_index";i:320;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:325;s:20:"end_args_token_index";i:327;s:9:"arguments";a:1:{s:13:"$PHPFrameWork";N;}s:25:"start_brackets_line_index";i:45;s:26:"start_brackets_token_index";i:329;s:23:"end_brackets_line_index";i:45;s:24:"end_brackets_token_index";i:341;s:14:"end_line_index";i:45;s:15:"end_token_index";i:341;}s:15:"getPHPFrameWork";a:14:{s:4:"name";s:15:"getPHPFrameWork";s:16:"start_line_index";i:46;s:17:"start_token_index";i:343;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:348;s:20:"end_args_token_index";i:349;s:25:"start_brackets_line_index";i:46;s:26:"start_brackets_token_index";i:351;s:23:"end_brackets_line_index";i:46;s:24:"end_brackets_token_index";i:362;s:14:"end_line_index";i:46;s:15:"end_token_index";i:362;}s:22:"setPHPFrameWorkObjName";a:15:{s:4:"name";s:22:"setPHPFrameWorkObjName";s:16:"start_line_index";i:48;s:17:"start_token_index";i:364;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:369;s:20:"end_args_token_index";i:371;s:9:"arguments";a:1:{s:22:"$phpframework_obj_name";N;}s:25:"start_brackets_line_index";i:48;s:26:"start_brackets_token_index";i:373;s:23:"end_brackets_line_index";i:48;s:24:"end_brackets_token_index";i:383;s:14:"end_line_index";i:48;s:15:"end_token_index";i:383;}s:22:"getPHPFrameWorkObjName";a:14:{s:4:"name";s:22:"getPHPFrameWorkObjName";s:16:"start_line_index";i:49;s:17:"start_token_index";i:385;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:390;s:20:"end_args_token_index";i:391;s:25:"start_brackets_line_index";i:49;s:26:"start_brackets_token_index";i:393;s:23:"end_brackets_line_index";i:49;s:24:"end_brackets_token_index";i:404;s:14:"end_line_index";i:49;s:15:"end_token_index";i:404;}s:20:"getModulePathGeneric";a:15:{s:4:"name";s:20:"getModulePathGeneric";s:16:"start_line_index";i:51;s:17:"start_token_index";i:406;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:411;s:20:"end_args_token_index";i:426;s:9:"arguments";a:4:{s:10:"$module_id";N;s:18:"$modules_file_path";N;s:11:"$layer_path";N;s:10:"$is_folder";s:4:"true";}s:25:"start_brackets_line_index";i:51;s:26:"start_brackets_token_index";i:428;s:23:"end_brackets_line_index";i:62;s:24:"end_brackets_token_index";i:537;s:14:"end_line_index";i:62;s:15:"end_token_index";i:537;}s:24:"prepareModulePathAFolder";a:20:{s:4:"name";s:24:"prepareModulePathAFolder";s:16:"start_line_index";i:92;s:17:"start_token_index";i:541;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:8:"comments";a:1:{i:0;s:2611:"/*
		Module_id can be a folder or a xml/php file with extension or without extension, like:
		- Ibatis:
			$this->getBroker()->callQuerySQL("TEST", "insert", "insert_item_not_registered"); //modules.xml has an alias TEST => test
			$this->getBroker()->callQuery("test", "insert", "insert_item_not_registered"); //test is a folder
			$this->getBroker()->callQuery("test.item.xml", "insert", "insert_item_not_registered");
			$this->getBroker()->callQuery("test/item.xml", "insert", "insert_item_not_registered");
			$this->getBroker()->callQuery("test.item", "insert", "insert_item_not_registered"); //default_extension will be added. item is a xml file.
			$this->getBroker()->callQuery("test/item", "insert", "insert_item_not_registered"); //default_extension will be added. item is a xml file.
		
		- Hibernate:
			$this->getBroker()->callObject("TEST", "ItemObjNotRegistered")); //modules.xml has an alias TEST => test
			$this->getBroker()->callObject("test", "ItemObjNotRegistered"));
			$this->getBroker()->callObject("test/item_subitem.xml", "ItemObjNotRegistered"));
			$this->getBroker()->callObject("test.item_subitem.xml", "ItemObjNotRegistered"));
			$this->getBroker()->callObject("test/item_subitem", "ItemObjNotRegistered")); //default_extension will be added. item is a xml file.
			$this->getBroker()->callObject("test.item_subitem", "ItemObjNotRegistered")); //default_extension will be added. item is a xml file.
			
		- Business logic:
			$EVC->getBroker()->callBusinessLogic("TEST", "get_obj", array(...)); //modules.xml has an alias TEST => test
			$EVC->getBroker()->callBusinessLogic("test/subtest", "foo", "value xxx"); //test/subtest is a folder
			$EVC->getBroker()->callBusinessLogic("test.subtest.IndependentFunctionsServices.php", "foo", "value xxx");
			$EVC->getBroker()->callBusinessLogic("test/subtest/IndependentFunctionsServices.php", "foo", "value xxx");
			$EVC->getBroker()->callBusinessLogic("test/subtest/IndependentFunctionsServices", "foo", "value xxx"); //default_extension will be added. IndependentFunctionsServices is a php file.
			$EVC->getBroker()->callBusinessLogic("test.subtest.IndependentFunctionsServices", "foo", "value xxx"); //default_extension will be added. IndependentFunctionsServices is a php file.
			$xxx->callBusinessLogic("test.subtest.SubTestService.php", "SubTestService.executeBusinessLogicSubTest", null, array("no_cache" => false, "no_annotations" => true));
			$xxx->callBusinessLogic("test/subtest", "SubTestService.executeBusinessLogicSubTest", null, array("no_cache" => false, "no_annotations" => true)); //test/subtest is a folder
	*/";}s:25:"start_comments_line_index";i:64;s:26:"start_comments_token_index";i:539;s:23:"end_comments_line_index";i:91;s:24:"end_comments_token_index";i:539;s:22:"start_args_token_index";i:546;s:20:"end_args_token_index";i:563;s:9:"arguments";a:4:{s:10:"$module_id";N;s:11:"&$is_folder";N;s:15:"&$new_module_id";N;s:18:"$default_extension";s:4:"null";}s:25:"start_brackets_line_index";i:92;s:26:"start_brackets_token_index";i:565;s:23:"end_brackets_line_index";i:143;s:24:"end_brackets_token_index";i:918;s:14:"end_line_index";i:143;s:15:"end_token_index";i:918;}s:15:"getModulesAlias";a:20:{s:4:"name";s:15:"getModulesAlias";s:16:"start_line_index";i:146;s:17:"start_token_index";i:922;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:36:"/********* MODULES ALIASES ********/";}s:25:"start_comments_line_index";i:145;s:26:"start_comments_token_index";i:920;s:23:"end_comments_line_index";i:145;s:24:"end_comments_token_index";i:920;s:22:"start_args_token_index";i:929;s:20:"end_args_token_index";i:931;s:9:"arguments";a:1:{s:18:"$modules_file_path";N;}s:25:"start_brackets_line_index";i:146;s:26:"start_brackets_token_index";i:933;s:23:"end_brackets_line_index";i:166;s:24:"end_brackets_token_index";i:1212;s:14:"end_line_index";i:166;s:15:"end_token_index";i:1212;}s:9:"addBroker";a:20:{s:4:"name";s:9:"addBroker";s:16:"start_line_index";i:169;s:17:"start_token_index";i:1216;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:8:"comments";a:1:{i:0;s:27:"/********* BROKER ********/";}s:25:"start_comments_line_index";i:168;s:26:"start_comments_token_index";i:1214;s:23:"end_comments_line_index";i:168;s:24:"end_comments_token_index";i:1214;s:22:"start_args_token_index";i:1221;s:20:"end_args_token_index";i:1230;s:9:"arguments";a:2:{s:7:"$broker";N;s:12:"$broker_name";s:5:"false";}s:25:"start_brackets_line_index";i:169;s:26:"start_brackets_token_index";i:1232;s:23:"end_brackets_line_index";i:174;s:24:"end_brackets_token_index";i:1275;s:14:"end_line_index";i:174;s:15:"end_token_index";i:1275;}s:9:"getBroker";a:20:{s:4:"name";s:9:"getBroker";s:16:"start_line_index";i:180;s:17:"start_token_index";i:1285;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:8:"comments";a:4:{i:0;s:74:"//If $broker_name is empty, the $broker_name = $this->default_broker_name.";i:1;s:84:"//If $this->default_broker_name is empty too, get the first elm from $this->brokers.";i:2;s:87:"//If $broker_name is numeric, get the correspondent key, based in the array_keys index.";i:3;s:112:"//If $broker_name is numeric, gets $this->brokers[ $broker_name -1 ], which means the $broker_name should be +1.";}s:25:"start_comments_line_index";i:176;s:26:"start_comments_token_index";i:1277;s:23:"end_comments_line_index";i:180;s:24:"end_comments_token_index";i:1283;s:22:"start_args_token_index";i:1290;s:20:"end_args_token_index";i:1303;s:9:"arguments";a:2:{s:12:"$broker_name";s:5:"false";s:13:"$return_false";s:5:"false";}s:25:"start_brackets_line_index";i:180;s:26:"start_brackets_token_index";i:1305;s:23:"end_brackets_line_index";i:200;s:24:"end_brackets_token_index";i:1485;s:14:"end_line_index";i:200;s:15:"end_token_index";i:1485;}s:10:"getBrokers";a:14:{s:4:"name";s:10:"getBrokers";s:16:"start_line_index";i:202;s:17:"start_token_index";i:1487;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:1492;s:20:"end_args_token_index";i:1493;s:25:"start_brackets_line_index";i:202;s:26:"start_brackets_token_index";i:1495;s:23:"end_brackets_line_index";i:204;s:24:"end_brackets_token_index";i:1504;s:14:"end_line_index";i:204;s:15:"end_token_index";i:1504;}s:20:"setDefaultBrokerName";a:20:{s:4:"name";s:20:"setDefaultBrokerName";s:16:"start_line_index";i:207;s:17:"start_token_index";i:1508;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:8:"comments";a:1:{i:0;s:338:"//only set default_broker_name if exists, otherwise ignore it. $return_false must be true otherwise if we have multiple DBData Layers with different DBDrivers and the $default_broker_name is == to $GLOBALS[default_db_driver], it will give an exception. So by default the $return_false should be true, in order to don't give any exception.";}s:25:"start_comments_line_index";i:206;s:26:"start_comments_token_index";i:1506;s:23:"end_comments_line_index";i:207;s:24:"end_comments_token_index";i:1506;s:22:"start_args_token_index";i:1513;s:20:"end_args_token_index";i:1522;s:9:"arguments";a:2:{s:20:"$default_broker_name";N;s:13:"$return_false";s:4:"true";}s:25:"start_brackets_line_index";i:207;s:26:"start_brackets_token_index";i:1524;s:23:"end_brackets_line_index";i:224;s:24:"end_brackets_token_index";i:1622;s:14:"end_line_index";i:224;s:15:"end_token_index";i:1622;}s:20:"getDefaultBrokerName";a:14:{s:4:"name";s:20:"getDefaultBrokerName";s:16:"start_line_index";i:226;s:17:"start_token_index";i:1624;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:0;s:22:"start_args_token_index";i:1629;s:20:"end_args_token_index";i:1630;s:25:"start_brackets_line_index";i:226;s:26:"start_brackets_token_index";i:1632;s:23:"end_brackets_line_index";i:228;s:24:"end_brackets_token_index";i:1641;s:14:"end_line_index";i:228;s:15:"end_token_index";i:1641;}}s:5:"props";a:2:{s:8:"settings";a:11:{s:4:"name";s:8:"settings";s:4:"type";s:6:"public";s:5:"value";s:0:"";s:8:"var_type";s:0:"";s:6:"static";b:0;s:8:"abstract";b:0;s:5:"const";b:0;s:16:"start_line_index";i:17;s:17:"start_token_index";i:86;s:14:"end_line_index";i:17;s:15:"end_token_index";i:89;}s:12:"modules_path";a:11:{s:4:"name";s:12:"modules_path";s:4:"type";s:6:"public";s:5:"value";s:7:"array()";s:8:"var_type";s:0:"";s:6:"static";b:0;s:8:"abstract";b:0;s:5:"const";b:0;s:16:"start_line_index";i:18;s:17:"start_token_index";i:91;s:14:"end_line_index";i:18;s:15:"end_token_index";i:100;}}}}