a:1:{s:22:"PHPCodePrintingHandler";a:1:{s:7:"methods";a:52:{s:23:"getPHPClassesFromFolder";a:20:{s:4:"name";s:23:"getPHPClassesFromFolder";s:16:"start_line_index";i:8;s:17:"start_token_index";i:18;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:20:"/* START: GETTERS */";}s:25:"start_comments_line_index";i:7;s:26:"start_comments_token_index";i:16;s:23:"end_comments_line_index";i:7;s:24:"end_comments_token_index";i:16;s:22:"start_args_token_index";i:25;s:20:"end_args_token_index";i:27;s:9:"arguments";a:1:{s:12:"$folder_path";N;}s:25:"start_brackets_line_index";i:8;s:26:"start_brackets_token_index";i:29;s:23:"end_brackets_line_index";i:20;s:24:"end_brackets_token_index";i:120;s:14:"end_line_index";i:20;s:15:"end_token_index";i:120;}s:34:"getPHPClassesFromFolderRecursively";a:15:{s:4:"name";s:34:"getPHPClassesFromFolderRecursively";s:16:"start_line_index";i:22;s:17:"start_token_index";i:122;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:129;s:20:"end_args_token_index";i:131;s:9:"arguments";a:1:{s:12:"$folder_path";N;}s:25:"start_brackets_line_index";i:22;s:26:"start_brackets_token_index";i:133;s:23:"end_brackets_line_index";i:34;s:24:"end_brackets_token_index";i:224;s:14:"end_line_index";i:34;s:15:"end_token_index";i:224;}s:21:"getPHPClassesFromFile";a:15:{s:4:"name";s:21:"getPHPClassesFromFile";s:16:"start_line_index";i:36;s:17:"start_token_index";i:226;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:233;s:20:"end_args_token_index";i:235;s:9:"arguments";a:1:{s:10:"$file_path";N;}s:25:"start_brackets_line_index";i:36;s:26:"start_brackets_token_index";i:237;s:23:"end_brackets_line_index";i:42;s:24:"end_brackets_token_index";i:283;s:14:"end_line_index";i:42;s:15:"end_token_index";i:283;}s:23:"getPHPClassesFromString";a:20:{s:4:"name";s:23:"getPHPClassesFromString";s:16:"start_line_index";i:45;s:17:"start_token_index";i:287;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:43:"//http://es.php.net/manual/pt_BR/tokens.php";}s:25:"start_comments_line_index";i:44;s:26:"start_comments_token_index";i:285;s:23:"end_comments_line_index";i:45;s:24:"end_comments_token_index";i:285;s:22:"start_args_token_index";i:294;s:20:"end_args_token_index";i:296;s:9:"arguments";a:1:{s:9:"$php_code";N;}s:25:"start_brackets_line_index";i:45;s:26:"start_brackets_token_index";i:298;s:23:"end_brackets_line_index";i:48;s:24:"end_brackets_token_index";i:320;s:14:"end_line_index";i:48;s:15:"end_token_index";i:320;}s:23:"getPHPClassesFromTokens";a:15:{s:4:"name";s:23:"getPHPClassesFromTokens";s:16:"start_line_index";i:50;s:17:"start_token_index";i:322;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:329;s:20:"end_args_token_index";i:331;s:9:"arguments";a:1:{s:7:"$tokens";N;}s:25:"start_brackets_line_index";i:50;s:26:"start_brackets_token_index";i:333;s:23:"end_brackets_line_index";i:523;s:24:"end_brackets_token_index";i:4111;s:14:"end_line_index";i:523;s:15:"end_token_index";i:4111;}s:29:"prepareClassNameWithNameSpace";a:15:{s:4:"name";s:29:"prepareClassNameWithNameSpace";s:16:"start_line_index";i:525;s:17:"start_token_index";i:4113;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:4120;s:20:"end_args_token_index";i:4129;s:9:"arguments";a:2:{s:11:"$class_name";N;s:10:"$namespace";s:2:"""";}s:25:"start_brackets_line_index";i:525;s:26:"start_brackets_token_index";i:4131;s:23:"end_brackets_line_index";i:527;s:24:"end_brackets_token_index";i:4183;s:14:"end_line_index";i:527;s:15:"end_token_index";i:4183;}s:30:"decoupleClassNameWithNameSpace";a:15:{s:4:"name";s:30:"decoupleClassNameWithNameSpace";s:16:"start_line_index";i:529;s:17:"start_token_index";i:4185;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:4192;s:20:"end_args_token_index";i:4194;s:9:"arguments";a:1:{s:11:"$class_name";N;}s:25:"start_brackets_line_index";i:529;s:26:"start_brackets_token_index";i:4196;s:23:"end_brackets_line_index";i:540;s:24:"end_brackets_token_index";i:4304;s:14:"end_line_index";i:540;s:15:"end_token_index";i:4304;}s:16:"getClassFromFile";a:15:{s:4:"name";s:16:"getClassFromFile";s:16:"start_line_index";i:598;s:17:"start_token_index";i:4802;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:4809;s:20:"end_args_token_index";i:4814;s:9:"arguments";a:2:{s:10:"$file_path";N;s:11:"$class_name";N;}s:25:"start_brackets_line_index";i:598;s:26:"start_brackets_token_index";i:4816;s:23:"end_brackets_line_index";i:607;s:24:"end_brackets_token_index";i:4876;s:14:"end_line_index";i:607;s:15:"end_token_index";i:4876;}s:22:"getClassFromPHPClasses";a:15:{s:4:"name";s:22:"getClassFromPHPClasses";s:16:"start_line_index";i:609;s:17:"start_token_index";i:4878;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:4885;s:20:"end_args_token_index";i:4890;s:9:"arguments";a:2:{s:8:"$classes";N;s:11:"$class_name";N;}s:25:"start_brackets_line_index";i:609;s:26:"start_brackets_token_index";i:4892;s:23:"end_brackets_line_index";i:622;s:24:"end_brackets_token_index";i:5026;s:14:"end_line_index";i:622;s:15:"end_token_index";i:5026;}s:25:"searchClassFromPHPClasses";a:15:{s:4:"name";s:25:"searchClassFromPHPClasses";s:16:"start_line_index";i:624;s:17:"start_token_index";i:5028;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:5035;s:20:"end_args_token_index";i:5040;s:9:"arguments";a:2:{s:8:"$classes";N;s:11:"$class_name";N;}s:25:"start_brackets_line_index";i:624;s:26:"start_brackets_token_index";i:5042;s:23:"end_brackets_line_index";i:637;s:24:"end_brackets_token_index";i:5187;s:14:"end_line_index";i:637;s:15:"end_token_index";i:5187;}s:25:"getClassPathFromClassName";a:20:{s:4:"name";s:25:"getClassPathFromClassName";s:16:"start_line_index";i:640;s:17:"start_token_index";i:5191;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:134:"//checks if the $class_name really exists in file and if not checks for the correspondent with the namespace and return the class_path";}s:25:"start_comments_line_index";i:639;s:26:"start_comments_token_index";i:5189;s:23:"end_comments_line_index";i:640;s:24:"end_comments_token_index";i:5189;s:22:"start_args_token_index";i:5198;s:20:"end_args_token_index";i:5203;s:9:"arguments";a:2:{s:10:"$file_path";N;s:11:"$class_name";N;}s:25:"start_brackets_line_index";i:640;s:26:"start_brackets_token_index";i:5205;s:23:"end_brackets_line_index";i:656;s:24:"end_brackets_token_index";i:5308;s:14:"end_line_index";i:656;s:15:"end_token_index";i:5308;}s:14:"getClassOfFile";a:20:{s:4:"name";s:14:"getClassOfFile";s:16:"start_line_index";i:659;s:17:"start_token_index";i:5312;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:135:"//based in a file, get the correspondent class (basically based in the file name, get sthe correspondent class data inside of the file.";}s:25:"start_comments_line_index";i:658;s:26:"start_comments_token_index";i:5310;s:23:"end_comments_line_index";i:659;s:24:"end_comments_token_index";i:5310;s:22:"start_args_token_index";i:5319;s:20:"end_args_token_index";i:5321;s:9:"arguments";a:1:{s:10:"$file_path";N;}s:25:"start_brackets_line_index";i:659;s:26:"start_brackets_token_index";i:5323;s:23:"end_brackets_line_index";i:679;s:24:"end_brackets_token_index";i:5459;s:14:"end_line_index";i:679;s:15:"end_token_index";i:5459;}s:24:"getClassPropertyFromFile";a:15:{s:4:"name";s:24:"getClassPropertyFromFile";s:16:"start_line_index";i:681;s:17:"start_token_index";i:5461;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:5468;s:20:"end_args_token_index";i:5476;s:9:"arguments";a:3:{s:10:"$file_path";N;s:11:"$class_name";N;s:10:"$prop_name";N;}s:25:"start_brackets_line_index";i:681;s:26:"start_brackets_token_index";i:5478;s:23:"end_brackets_line_index";i:691;s:24:"end_brackets_token_index";i:5558;s:14:"end_line_index";i:691;s:15:"end_token_index";i:5558;}s:19:"getFunctionFromFile";a:15:{s:4:"name";s:19:"getFunctionFromFile";s:16:"start_line_index";i:693;s:17:"start_token_index";i:5560;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:5567;s:20:"end_args_token_index";i:5579;s:9:"arguments";a:3:{s:10:"$file_path";N;s:10:"$func_name";N;s:11:"$class_name";s:1:"0";}s:25:"start_brackets_line_index";i:693;s:26:"start_brackets_token_index";i:5581;s:23:"end_brackets_line_index";i:700;s:24:"end_brackets_token_index";i:5631;s:14:"end_line_index";i:700;s:15:"end_token_index";i:5631;}s:21:"getFunctionFromString";a:15:{s:4:"name";s:21:"getFunctionFromString";s:16:"start_line_index";i:702;s:17:"start_token_index";i:5633;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:5640;s:20:"end_args_token_index";i:5652;s:9:"arguments";a:3:{s:9:"$contents";N;s:10:"$func_name";N;s:11:"$class_name";s:1:"0";}s:25:"start_brackets_line_index";i:702;s:26:"start_brackets_token_index";i:5654;s:23:"end_brackets_line_index";i:725;s:24:"end_brackets_token_index";i:5853;s:14:"end_line_index";i:725;s:15:"end_token_index";i:5853;}s:21:"getNamespacesFromFile";a:15:{s:4:"name";s:21:"getNamespacesFromFile";s:16:"start_line_index";i:727;s:17:"start_token_index";i:5855;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:5862;s:20:"end_args_token_index";i:5864;s:9:"arguments";a:1:{s:10:"$file_path";N;}s:25:"start_brackets_line_index";i:727;s:26:"start_brackets_token_index";i:5866;s:23:"end_brackets_line_index";i:738;s:24:"end_brackets_token_index";i:5893;s:14:"end_line_index";i:738;s:15:"end_token_index";i:5893;}s:15:"getUsesFromFile";a:15:{s:4:"name";s:15:"getUsesFromFile";s:16:"start_line_index";i:740;s:17:"start_token_index";i:5895;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:5902;s:20:"end_args_token_index";i:5904;s:9:"arguments";a:1:{s:10:"$file_path";N;}s:25:"start_brackets_line_index";i:740;s:26:"start_brackets_token_index";i:5906;s:23:"end_brackets_line_index";i:751;s:24:"end_brackets_token_index";i:5933;s:14:"end_line_index";i:751;s:15:"end_token_index";i:5933;}s:19:"getIncludesFromFile";a:15:{s:4:"name";s:19:"getIncludesFromFile";s:16:"start_line_index";i:753;s:17:"start_token_index";i:5935;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:5942;s:20:"end_args_token_index";i:5944;s:9:"arguments";a:1:{s:10:"$file_path";N;}s:25:"start_brackets_line_index";i:753;s:26:"start_brackets_token_index";i:5946;s:23:"end_brackets_line_index";i:766;s:24:"end_brackets_token_index";i:5973;s:14:"end_line_index";i:766;s:15:"end_token_index";i:5973;}s:26:"getClassPropertiesFromFile";a:20:{s:4:"name";s:26:"getClassPropertiesFromFile";s:16:"start_line_index";i:847;s:17:"start_token_index";i:6336;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:1098:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	private static function getCodeInstructionFromFile($file_path, $types) {
		$instructions = array();
		
		if ($file_path && file_exists($file_path) && $types) {
			$types = is_array($types) ? $types : array($types);
			
			$contents = file_get_contents($file_path);
			$contents = str_replace("\r\n", "\n", $contents);
			$lines = explode("\n", $contents);
			
			$t = count($lines);
			for ($i = 0; $i < $t; $i++) {
				$line = $lines[$i];
				$trimmed = trim($line);
				
				foreach ($types as $type)
					if ($type) {
						$pos = stripos($trimmed, $type);
						
						//checks instruction at the begginning of the line
						if ($pos === 0) {
							$start_pos = $pos + strlen($type);
							$end_pos = strpos($trimmed, ";", $start_pos);
							$end_pos = $end_pos !== false ? $end_pos : strlen($end_pos);
							
							$instruction = trim( substr($trimmed, $start_pos, $end_pos - $start_pos) );
							$instructions[] = array($instruction, $type);
							
							break;
						}
					}
			}
		}
		
		return $instructions;
	}*/";}s:25:"start_comments_line_index";i:809;s:26:"start_comments_token_index";i:6334;s:23:"end_comments_line_index";i:845;s:24:"end_comments_token_index";i:6334;s:22:"start_args_token_index";i:6343;s:20:"end_args_token_index";i:6348;s:9:"arguments";a:2:{s:10:"$file_path";N;s:11:"$class_name";N;}s:25:"start_brackets_line_index";i:847;s:26:"start_brackets_token_index";i:6350;s:23:"end_brackets_line_index";i:854;s:24:"end_brackets_token_index";i:6399;s:14:"end_line_index";i:854;s:15:"end_token_index";i:6399;}s:28:"getClassPropertiesFromString";a:15:{s:4:"name";s:28:"getClassPropertiesFromString";s:16:"start_line_index";i:856;s:17:"start_token_index";i:6401;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:6408;s:20:"end_args_token_index";i:6413;s:9:"arguments";a:2:{s:9:"$contents";N;s:11:"$class_name";N;}s:25:"start_brackets_line_index";i:856;s:26:"start_brackets_token_index";i:6415;s:23:"end_brackets_line_index";i:995;s:24:"end_brackets_token_index";i:7736;s:14:"end_line_index";i:995;s:15:"end_token_index";i:7736;}s:23:"getFunctionCodeFromFile";a:20:{s:4:"name";s:23:"getFunctionCodeFromFile";s:16:"start_line_index";i:1196;s:17:"start_token_index";i:7740;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:7781:"/* This is DEPRECATED bc if php is obfuscated this doesn't work. Besides it doesn't get the values correctly if they have comments at the first line of the properties value
	public static function getClassPropertiesFromFile($file_path, $class_name) {
		$properties = array();
		
		if ($file_path && file_exists($file_path) && $class_name) {
			$contents = file_get_contents($file_path);
			
			$classes = self::getPHPClassesFromString($contents);
			$c = self::getClassFromPHPClasses($classes, $class_name);
			$class_name = $c["name"];
			$start_brackets_line = $c["start_brackets_line_index"];
			
			if (is_numeric($start_brackets_line)) {
				$contents = str_replace("\r\n", "\n", $contents);
				$lines = explode("\n", $contents);
				
				//GETTING PROPERTIES IN TEXT
				$line = $lines[ $start_brackets_line - 1 ];
				$pos = strpos($line, "{");
				$pos = $pos !== false ? $pos : strlen($line);
				
				$intervals = array();
				$t = $c["methods"] ? count($c["methods"]) : 0;
				for ($i = 0; $i < $t; $i++) {
					$sli = is_numeric($c["methods"][$i]["start_comments_line_index"]) ? $c["methods"][$i]["start_comments_line_index"] : $c["methods"][$i]["start_line_index"];
					$intervals[] = array($sli, $c["methods"][$i]["end_line_index"]);
				}
				
				$new_c = substr($line, $pos + 1);
				$idx = $start_brackets_line - 1;
				while (true) {
					++$idx;
					
					if ($idx + 1 >= $c["end_line_index"])
						break;
					
					$allowed = true;
					foreach ($intervals as $interval)
						if ($idx + 1 >= $interval[0] && $idx + 1 <= $interval[1]) {
							$allowed = false;
							break;
						}
					
					if ($allowed && trim($lines[$idx])) 
						$new_c .= "\n" . $lines[$idx];
				}
				$new_c = trim($new_c);
				
				//PARSEING PROPERTIES
				$t = strlen($new_c);
				$open_single_quotes = $open_double_quotes = $open_multiple_comments = $open_single_comments = false;
				$prop_doc_comments = $prop_comments = array();
				
				for ($i = 0; $i < $t; $i++) {
					$char = $new_c[$i];
					
					if (!$open_single_quotes && !$open_double_quotes && !$open_multiple_comments && !$open_single_comments && ($char == '$' ||
						(strtolower($char) == "c" && strtolower($new_c[$i+1]) == "o" && strtolower($new_c[$i+2]) == "n" && strtolower($new_c[$i+3]) == "s" && strtolower($new_c[$i+4]) == "t")
					)) {
						$idx = $char == '$' ? $i : $i + 5;
						
						$settings = "";
						for ($j = $idx - 1; $j >= 0; --$j) {
							$char = $new_c[$j];
							
							if ($char == ";" || $char == "{" || $char == "}" || $char == "\n")
								break;
							else if ($char != "\t") 
								$settings = $char . $settings;
						}
						
						$var_name = "";
						for ($j = $idx + 1; $j < $t; $j++) {
							$char = $new_c[$j];
							
							if ($char == " " || $char == "=" || $char == "\t" || $char == "\n" || $char == ";")
								break;
							else 
								$var_name .= $char;
						}
						
						$value = "";
						$start_value = false;
						for ($j = $j - 1; $j < $t; $j++) {
							$char = $new_c[$j];
							
							if ($start_value) {
								$value .= $char;
								
								if ($char == "'" && !$open_double_quotes && !$open_multiple_comments && !$open_single_comments && !TextSanitizer::isCharEscaped($new_c, $j)) 
									$open_single_quotes = !$open_single_quotes;
								else if ($char == '"' && !$open_single_quotes && !$open_multiple_comments && !$open_single_comments && !TextSanitizer::isCharEscaped($new_c, $j)) 
									$open_double_quotes = !$open_double_quotes;
								else if ($char == '/' && $new_c[$j + 1] == "*" && !$open_single_quotes && !$open_double_quotes && !$open_single_comments) {
									$open_multiple_comments = true;
									++$j;
								}
								else if ($open_multiple_comments && $char == '*' && $new_c[$j + 1] == "/") {
									$open_multiple_comments = false;
									++$j;
								}
								else if ($char == '/' && $new_c[$j + 1] == "/" && !$open_single_quotes && !$open_double_quotes && !$open_multiple_comments) {
									$open_single_comments = true;
									++$j;
								}
								else if ($open_single_comments && $char == "\n")
									$open_single_comments = false;
							}
							
							if (!$open_single_quotes && !$open_double_quotes && !$open_multiple_comments && !$open_single_comments) {
								if ($char == ";") {
									if ($j == $i + 1)
										$value = null;
									else
										$value = substr($value, 0, strlen($value) - 1);//remove ;
									
									break;
								}
								else if (!$start_value && $char == "=")
									$start_value = true;
							}
						}
						$value = $value ? trim($value) : $value;
						
						$i = $j;
						
						$settings = trim(strtolower($settings));
						$type = strpos($settings, "private") !== false ? "private" : (strpos($settings, "protected") !== false ? "protected" : "public");
						
						$quote_char = substr($value, 0, 1);
						$var_type = $value && ($quote_char == '"' || $quote_char == "'") ? "string" : "";
						
						if ($quote_char == '"' || $quote_char == "'") {
							$value = substr($value, 1);
							$value = substr($value, -1) == $quote_char ? substr($value, 0, -1) : $value;
							$value = $quote_char == '"' ? str_replace('\\"', '"', $value) : str_replace("\\'", "'", $value);//in case of slashes and \" or \' accorddingly. Do not add the addcslashes here. We only want to add the \\" and \\', because we are getting php code directly.
							
							if ($quote_char == "'")
								$value = str_replace('$', '\\$', $value);//$variables inside of single quotes are escaped because are simply strings and not variables.
						}
						
						//check inline comments
						$pos = strpos($new_c, "\n", $i);
						$pos = $pos !== false ? $pos : $t;
						$aux = trim(substr($new_c, $i + 1, $pos - $i));
						
						if ($aux && substr($aux, 0, 2) == "//") {
							$prop_comments[] = $aux;
							$i = $pos;
						}
						
						$properties[] = array(
							"name" => $var_name,
							"type" => $type,
							"value" => $value,
							"var_type" => $var_type,
							"static" => strpos($settings, "static") !== false,
							"const" => strpos($settings, "const") !== false,
							"doc_comments" => $prop_doc_comments ? $prop_doc_comments : null,
							"comments" => $prop_comments ? $prop_comments : null,
						);
						
						$prop_doc_comments = $prop_comments = array();
					}
					else if ($char == "'" && !$open_double_quotes && !$open_multiple_comments && !$open_single_comments && !TextSanitizer::isCharEscaped($new_c, $i)) {
						$open_single_quotes = !$open_single_quotes;
					}
					else if ($char == '"' && !$open_single_quotes && !$open_multiple_comments && !$open_single_comments && !TextSanitizer::isCharEscaped($new_c, $i)) {
						$open_double_quotes = !$open_double_quotes;
					}
					else if ($char == '/' && $new_c[$i + 1] == "*" && !$open_single_quotes && !$open_double_quotes && !$open_single_comments) {
						$pos = strpos($new_c, "*" . "/", $i); //"*" . "/" is bc this method code is commented!
						$pos = $pos !== false ? $pos + 1 : $t;
						$prop_doc_comments[] = substr($new_c, $i, $pos - $i + 1);
						
						$open_multiple_comments = true;
						++$i;
					}
					else if ($open_multiple_comments && $char == '*' && $new_c[$i + 1] == "/") {
						$open_multiple_comments = false;
						++$i;
					}
					else if ($char == '/' && $new_c[$i + 1] == "/" && !$open_single_quotes && !$open_double_quotes && !$open_multiple_comments) {
						$pos = strpos($new_c, "\n", $i);
						$pos = $pos !== false ? $pos : $t;
						$prop_comments[] = substr($new_c, $i, $pos - $i);
						
						$open_single_comments = true;
						++$i;
					}
					else if ($open_single_comments && $char == "\n") {
						$open_single_comments = false;
					}
				}
			}
		}
		
		return $properties;
	}*/";}s:25:"start_comments_line_index";i:996;s:26:"start_comments_token_index";i:7738;s:23:"end_comments_line_index";i:1194;s:24:"end_comments_token_index";i:7738;s:22:"start_args_token_index";i:7747;s:20:"end_args_token_index";i:7766;s:9:"arguments";a:4:{s:10:"$file_path";N;s:10:"$func_name";N;s:11:"$class_name";s:1:"0";s:4:"$raw";s:5:"false";}s:25:"start_brackets_line_index";i:1196;s:26:"start_brackets_token_index";i:7768;s:23:"end_brackets_line_index";i:1203;s:24:"end_brackets_token_index";i:7821;s:14:"end_line_index";i:1203;s:15:"end_token_index";i:7821;}s:25:"getFunctionCodeFromString";a:15:{s:4:"name";s:25:"getFunctionCodeFromString";s:16:"start_line_index";i:1205;s:17:"start_token_index";i:7823;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:7830;s:20:"end_args_token_index";i:7849;s:9:"arguments";a:4:{s:9:"$contents";N;s:10:"$func_name";N;s:11:"$class_name";s:1:"0";s:4:"$raw";s:5:"false";}s:25:"start_brackets_line_index";i:1205;s:26:"start_brackets_token_index";i:7851;s:23:"end_brackets_line_index";i:1233;s:24:"end_brackets_token_index";i:8080;s:14:"end_line_index";i:1233;s:15:"end_token_index";i:8080;}s:30:"getCodeWithoutCommentsFromFile";a:20:{s:4:"name";s:30:"getCodeWithoutCommentsFromFile";s:16:"start_line_index";i:1287;s:17:"start_token_index";i:8084;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:1553:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	public static function getFunctionCodeFromFile($file_path, $function_name, $class_name = 0) {
		if ($file_path && file_exists($file_path) && $function_name) {
			$f = self::getFunctionFromFile($file_path, $function_name, $class_name);
			$function_name = $f["name"];
			$start_brackets_line = $f["start_brackets_line_index"];
			$end_line = $f["end_line_index"];
			
			if (is_numeric($start_brackets_line)) {
				$contents = file_get_contents($file_path);
				$contents = str_replace("\r\n", "\n", $contents);
				$lines = explode("\n", $contents);
				
				//TODO: change this code to work with obfuscated php
				
				$code = "";
				
				$line = $lines[ $start_brackets_line - 1 ];
				$pos = strpos($line, "{");
				$pos = $pos !== false ? $pos : strlen($line);
				$new_c = trim(substr($line, $pos + 1));
				if ($new_c)
					$code .= "$new_c";
				
				$idx = $start_brackets_line - 1;
				while (true) {
					++$idx;
					
					if ($idx + 1 >= $end_line) 
						break;
					
					$l = str_replace("\n", "", $lines[$idx]);
					$l = $l[0] == "\t" ? substr($l, 1) : $l;
					if ($class_name)//it executes twice if it is a method.
						$l = $l[0] == "\t" ? substr($l, 1) : $l;
					
					$code .= "\n$l";
				}
				
				$line = $lines[ $end_line - 1 ];
				$pos = strpos($line, "}");
				$pos = $pos !== false ? $pos : strlen($line);
				$new_c = trim(substr($line, 0, $pos));
				if ($new_c) 
					$code .= "\n$new_c";
				
				return trim($code);
			}
		}
		
		return false;
	}*/";}s:25:"start_comments_line_index";i:1234;s:26:"start_comments_token_index";i:8082;s:23:"end_comments_line_index";i:1285;s:24:"end_comments_token_index";i:8082;s:22:"start_args_token_index";i:8091;s:20:"end_args_token_index";i:8093;s:9:"arguments";a:1:{s:10:"$file_path";N;}s:25:"start_brackets_line_index";i:1287;s:26:"start_brackets_token_index";i:8095;s:23:"end_brackets_line_index";i:1292;s:24:"end_brackets_token_index";i:8134;s:14:"end_line_index";i:1292;s:15:"end_token_index";i:8134;}s:22:"getCodeWithoutComments";a:15:{s:4:"name";s:22:"getCodeWithoutComments";s:16:"start_line_index";i:1294;s:17:"start_token_index";i:8136;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:8143;s:20:"end_args_token_index";i:8145;s:9:"arguments";a:1:{s:5:"$code";N;}s:25:"start_brackets_line_index";i:1294;s:26:"start_brackets_token_index";i:8147;s:23:"end_brackets_line_index";i:1322;s:24:"end_brackets_token_index";i:8330;s:14:"end_line_index";i:1322;s:15:"end_token_index";i:8330;}s:19:"renameClassFromFile";a:20:{s:4:"name";s:19:"renameClassFromFile";s:16:"start_line_index";i:1327;s:17:"start_token_index";i:8338;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:3:{i:0;s:18:"/* END: GETTERS */";i:1;s:20:"/* START: RENAMES */";i:2;s:82:"//$old_class_name and $new_class_name must be the full class names with namespaces";}s:25:"start_comments_line_index";i:1323;s:26:"start_comments_token_index";i:8332;s:23:"end_comments_line_index";i:1327;s:24:"end_comments_token_index";i:8336;s:22:"start_args_token_index";i:8345;s:20:"end_args_token_index";i:8353;s:9:"arguments";a:3:{s:10:"$file_path";N;s:15:"$old_class_name";N;s:15:"$new_class_name";N;}s:25:"start_brackets_line_index";i:1327;s:26:"start_brackets_token_index";i:8355;s:23:"end_brackets_line_index";i:1341;s:24:"end_brackets_token_index";i:8483;s:14:"end_line_index";i:1341;s:15:"end_token_index";i:8483;}s:22:"renameFunctionFromFile";a:15:{s:4:"name";s:22:"renameFunctionFromFile";s:16:"start_line_index";i:1343;s:17:"start_token_index";i:8485;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:8492;s:20:"end_args_token_index";i:8507;s:9:"arguments";a:4:{s:10:"$file_path";N;s:14:"$old_func_name";N;s:14:"$new_func_name";N;s:11:"$class_name";s:1:"0";}s:25:"start_brackets_line_index";i:1343;s:26:"start_brackets_token_index";i:8509;s:23:"end_brackets_line_index";i:1355;s:24:"end_brackets_token_index";i:8615;s:14:"end_line_index";i:1355;s:15:"end_token_index";i:8615;}s:17:"editClassFromFile";a:20:{s:4:"name";s:17:"editClassFromFile";s:16:"start_line_index";i:1359;s:17:"start_token_index";i:8621;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:2:{i:0;s:18:"/* END: RENAMES */";i:1;s:18:"/* START: EDITS */";}s:25:"start_comments_line_index";i:1356;s:26:"start_comments_token_index";i:8617;s:23:"end_comments_line_index";i:1358;s:24:"end_comments_token_index";i:8619;s:22:"start_args_token_index";i:8628;s:20:"end_args_token_index";i:8636;s:9:"arguments";a:3:{s:10:"$file_path";N;s:19:"$old_class_settings";N;s:19:"$new_class_settings";N;}s:25:"start_brackets_line_index";i:1359;s:26:"start_brackets_token_index";i:8638;s:23:"end_brackets_line_index";i:1434;s:24:"end_brackets_token_index";i:9368;s:14:"end_line_index";i:1434;s:15:"end_token_index";i:9368;}s:20:"editFunctionFromFile";a:20:{s:4:"name";s:20:"editFunctionFromFile";s:16:"start_line_index";i:1542;s:17:"start_token_index";i:9372;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:4094:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	public static function editClassFromFile($file_path, $old_class_settings, $new_class_settings) {
		$old_class_name = self::prepareClassNameWithNameSpace($old_class_settings["name"], $old_class_settings["namespace"]);
		
		if ($file_path && file_exists($file_path) && $old_class_name && $new_class_settings["name"]) {
			$c = self::getClassFromFile($file_path, $old_class_name);
			
			$old_class_name = $c["name"];
			$start_line = $c["start_line_index"];
			$start_brackets_line = $c["start_brackets_line_index"];
			
			if (is_numeric($start_line)) {
				$contents = file_get_contents($file_path);
				$contents = str_replace("\r\n", "\n", $contents);
				$lines = explode("\n", $contents);
				
				//TODO: change this code to work with obfuscated php
				
				$new_contents = implode("\n", array_slice($lines, 0, $start_line - 1) );
				
				$line = $lines[ $start_line - 1 ];
				$new_c = "";
				$parts = explode(" ", $line);
				$t = count($parts);
				for ($i = 0; $i < $t; $i++) {
					if (strtolower(trim($parts[$i])) == "class" || strtolower(trim($parts[$i])) == "abstract") 
						break;
					else 
						$new_c .= ($i > 0 ? " " : "") . $parts[$i];
				}
				
				$new_c = trim($new_c);
				if ($new_c) 
					$new_contents .= "\n$new_c";
				
				//remove namespace from $new_class_settings bc they will be take care after
				$new_namespace = $new_class_settings["namespace"];
				$new_includes = $new_class_settings["includes"];
				$new_uses = $new_class_settings["uses"];
				$new_class_settings["namespace"] = null;
				$new_class_settings["includes"] = null;
				$new_class_settings["uses"] = null;
				
				$new_contents .= "\n" . self::getClassString($new_class_settings);
				
				if ($start_brackets_line == $start_line) 
					$pos = strpos($line, "{", strpos($line, $old_class_name) + 1);
				else {
					$line = $lines[ $start_brackets_line - 1 ];
					$pos = strpos($line, "{");
				}
				
				$pos = $pos !== false ? $pos : strlen($line);
				$new_c = trim(substr($line, $pos));
				if ($new_c) 
					$new_contents .= " $new_c";
				
				$new_contents .= "\n" . implode("\n", array_slice($lines, $start_brackets_line) );
				
				$new_contents = str_replace("\n\n\n", "\n\n", str_replace("\t\n", "\n", $new_contents));
				
				if (file_put_contents($file_path, $new_contents) > 0) {
					$status = true;
					$new_class_settings["namespace"] = $new_namespace;
					
					//update namespace if different
					if ($old_class_settings["namespace"] != $new_class_settings["namespace"] && ($old_class_settings["namespace"] || $new_class_settings["namespace"])) 
						$status = self::replaceNamespaceFromFile($file_path, $old_class_settings["namespace"], $new_class_settings["namespace"]);
					
					
					//add includes and uses to the begining of file or after the first namespace
					if ($status && ($new_includes || $new_uses)) {
						$new_c = "";
						
						if ($new_includes)
							foreach ($new_includes as $include)
								if (is_array($include) && trim($include[0]))
									$new_c .= "include" . ($include[1] ? "_once" : "") . " " . $include[0] . ";\n";
								else if (!is_array($include) && trim($include))
									$new_c .= "include_once $include;\n";
						
						if ($new_uses)
							foreach ($new_uses as $use => $alias)
								if (trim($use))
									$new_c .= "use $use" . (trim($alias) ? " as $alias" : "") . ";\n";
						
						$status = self::addCodeToBeginOfFileOrAfterFirstNamespace($file_path, $new_c);
					}
					
					if ($status && isset($new_class_settings["code"])) {
						$new_class_name = self::prepareClassNameWithNameSpace($new_class_settings["name"], $new_class_settings["namespace"]);
						
						$status = self::removeClassPropertiesFromFile($file_path, $new_class_name) && self::addClassPropertiesToFile($file_path, $new_class_name, $new_class_settings["code"]);
					}
					
					//if status false, re-save the old code
					if (!$status)
						file_put_contents($file_path, $contents);
					
					return $status;
				}
			}
		}
		
		return false;
	}*/";}s:25:"start_comments_line_index";i:1435;s:26:"start_comments_token_index";i:9370;s:23:"end_comments_line_index";i:1540;s:24:"end_comments_token_index";i:9370;s:22:"start_args_token_index";i:9379;s:20:"end_args_token_index";i:9394;s:9:"arguments";a:4:{s:10:"$file_path";N;s:18:"$old_func_settings";N;s:18:"$new_func_settings";N;s:11:"$class_name";s:1:"0";}s:25:"start_brackets_line_index";i:1542;s:26:"start_brackets_token_index";i:9396;s:23:"end_brackets_line_index";i:1584;s:24:"end_brackets_token_index";i:9789;s:14:"end_line_index";i:1584;s:15:"end_token_index";i:9789;}s:25:"editClassCommentsFromFile";a:20:{s:4:"name";s:25:"editClassCommentsFromFile";s:16:"start_line_index";i:1647;s:17:"start_token_index";i:9793;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:2214:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	public static function editFunctionFromFile($file_path, $old_func_settings, $new_func_settings, $class_name = 0) {
		$old_func_name = $old_func_settings["name"];
		
		if ($file_path && file_exists($file_path) && $old_func_name && $new_func_settings["name"]) {
			$f = self::getFunctionFromFile($file_path, $old_func_name, $class_name);
			$old_func_name = $f["name"];
			$start_line = $f["start_line_index"];
			$start_brackets_line = $f["start_brackets_line_index"];
			$end_line = $f["end_line_index"];
			
			if (is_numeric($start_line)) {
				$contents = file_get_contents($file_path);
				$contents = str_replace("\r\n", "\n", $contents);
				$lines = explode("\n", $contents);
				
				//TODO: change this code to work with obfuscated php
				
				$new_contents = implode("\n", array_slice($lines, 0, $start_line - 1) );
				
				$line = $lines[ $start_line - 1 ];
				$new_c = "";
				$parts = explode(" ", $line);
				$available_types = array("public", "private", "protected", "abstract", "static", "function");
				$t = count($parts);
				for ($i = 0; $i < $t; $i++) {
					if (in_array(strtolower(trim($parts[$i])), $available_types)) {
						break;
					}
					else {
						$new_c .= ($i > 0 ? " " : "") . $parts[$i];
					}
				}
				$new_c = trim($new_c);
				if ($new_c) 
					$new_contents .= "\n$new_c";
				
				$new_contents .= "\n" . self::getFunctionString($new_func_settings, $class_name);
				
				$line = $lines[ $start_brackets_line - 1 ];
				$pos = strpos($line, "{");
				$pos = $pos !== false ? $pos : strlen($line);
				$new_c = trim(substr($line, $pos));
				if ($new_c) 
					$new_contents .= " $new_c";
				
				$new_contents .= "\n" . implode("\n", array_slice($lines, $start_brackets_line) );
				
				$new_contents = str_replace("\n\n\n", "\n\n", str_replace("\t\n", "\n", $new_contents));
				if (file_put_contents($file_path, $new_contents) > 0) {
					$status = true;
					if (isset($new_func_settings["code"])) 
						$status = self::replaceFunctionCodeFromFile($file_path, $new_func_settings["name"], $new_func_settings["code"], $class_name);
					
					return $status;
				}
			}
		}
		
		return false;
	}*/";}s:25:"start_comments_line_index";i:1585;s:26:"start_comments_token_index";i:9791;s:23:"end_comments_line_index";i:1645;s:24:"end_comments_token_index";i:9791;s:22:"start_args_token_index";i:9800;s:20:"end_args_token_index";i:9808;s:9:"arguments";a:3:{s:10:"$file_path";N;s:11:"$class_name";N;s:9:"$comments";N;}s:25:"start_brackets_line_index";i:1647;s:26:"start_brackets_token_index";i:9810;s:23:"end_brackets_line_index";i:1685;s:24:"end_brackets_token_index";i:10170;s:14:"end_line_index";i:1685;s:15:"end_token_index";i:10170;}s:28:"editFunctionCommentsFromFile";a:20:{s:4:"name";s:28:"editFunctionCommentsFromFile";s:16:"start_line_index";i:1695;s:17:"start_token_index";i:10174;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:320:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	public static function editClassCommentsFromFile($file_path, $class_name, $comments) {
		if ($class_name) {
			$c = self::getClassFromFile($file_path, $class_name);
			return self::editCommentsFromFile($file_path, $c, $comments);
		}
		return false;
	}*/";}s:25:"start_comments_line_index";i:1686;s:26:"start_comments_token_index";i:10172;s:23:"end_comments_line_index";i:1693;s:24:"end_comments_token_index";i:10172;s:22:"start_args_token_index";i:10181;s:20:"end_args_token_index";i:10196;s:9:"arguments";a:4:{s:10:"$file_path";N;s:10:"$func_name";N;s:9:"$comments";N;s:11:"$class_name";s:1:"0";}s:25:"start_brackets_line_index";i:1695;s:26:"start_brackets_token_index";i:10198;s:23:"end_brackets_line_index";i:1736;s:24:"end_brackets_token_index";i:10611;s:14:"end_line_index";i:1736;s:15:"end_token_index";i:10611;}s:24:"removeNamespacesFromFile";a:20:{s:4:"name";s:24:"removeNamespacesFromFile";s:16:"start_line_index";i:1809;s:17:"start_token_index";i:10621;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:4:{i:0;s:353:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	public static function editFunctionCommentsFromFile($file_path, $func_name, $comments, $class_name = 0) {
		if ($func_name) {
			$f = self::getFunctionFromFile($file_path, $func_name, $class_name);
			return self::editCommentsFromFile($file_path, $f, $comments);
		}
		return false;
	}*/";i:1;s:2250:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	private static function editCommentsFromFile($file_path, $obj_settings, $comments) {
		if ($file_path && file_exists($file_path)) {
		//echo "<pre>";print_r($obj_settings);die();
			$start_line = $obj_settings["start_comments_line_index"];
			$end_line = $obj_settings["end_comments_line_index"];
			
			if (is_numeric($start_line) || $comments) {
				if (!is_numeric($start_line)) {
					$start_line = $obj_settings["start_line_index"];
					$end_line = $obj_settings["start_line_index"];
				}
				
				$contents = file_get_contents($file_path);
				$contents = str_replace("\r\n", "\n", $contents);
				$lines = explode("\n", $contents);
				
				//TODO: change this code to work with obfuscated php
				
				$new_contents = implode("\n", array_slice($lines, 0, $start_line - 1) );
				
				$line = $lines[ $start_line - 1 ];
				$simple_comment_pos = strpos($line, "//");
				$multiple_comment_pos = strpos($line, "/*");
				
				$pos = $simple_comment_pos !== false && ($simple_comment_pos < $multiple_comment_pos || $multiple_comment_pos == false) ? $simple_comment_pos : $multiple_comment_pos;
				
				if ($pos !== false) {
					$c = substr($line, 0, $pos);
					$new_contents .= "\n" . (trim($c) ? $c : "");
					$new_contents .= trim($comments) ? "\n" . $comments : "";
					
					$line = $lines[ $end_line - 1 ];
					$simple_comment_pos = strrpos($line, "//");
					$multiple_comment_pos = strrpos($line, "*" . "/"); //"*" . "/" only bc this code is commented
					
					if ($simple_comment_pos === false && $multiple_comment_pos === false) {
						$new_contents .= trim($line) ? $line : "";
					}
					else if ($multiple_comment_pos !== false) {
						$c = substr($line, $multiple_comment_pos + 2);
						$new_contents .= trim($c) ? $c : "";
					}
				}
				else {
					$new_contents .= trim($comments) ? "\n" . $comments : "";
					$new_contents .= "\n" .  (trim($line) ? $line : "");
				}
				
				$new_contents .= "\n" . implode("\n", array_slice($lines, $end_line) );
				
				$new_contents = str_replace("\n\n\n", "\n\n", str_replace("\t\n", "\n", $new_contents));
				
				return file_put_contents($file_path, $new_contents) > 0;
			}
		}
		
		return false;
	}*/";i:2;s:16:"/* END: EDITS */";i:3;s:20:"/* START: REMOVES */";}s:25:"start_comments_line_index";i:1737;s:26:"start_comments_token_index";i:10613;s:23:"end_comments_line_index";i:1807;s:24:"end_comments_token_index";i:10619;s:22:"start_args_token_index";i:10628;s:20:"end_args_token_index";i:10630;s:9:"arguments";a:1:{s:10:"$file_path";N;}s:25:"start_brackets_line_index";i:1809;s:26:"start_brackets_token_index";i:10632;s:23:"end_brackets_line_index";i:1811;s:24:"end_brackets_token_index";i:10647;s:14:"end_line_index";i:1811;s:15:"end_token_index";i:10647;}s:18:"removeUsesFromFile";a:15:{s:4:"name";s:18:"removeUsesFromFile";s:16:"start_line_index";i:1813;s:17:"start_token_index";i:10649;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:10656;s:20:"end_args_token_index";i:10658;s:9:"arguments";a:1:{s:10:"$file_path";N;}s:25:"start_brackets_line_index";i:1813;s:26:"start_brackets_token_index";i:10660;s:23:"end_brackets_line_index";i:1815;s:24:"end_brackets_token_index";i:10675;s:14:"end_line_index";i:1815;s:15:"end_token_index";i:10675;}s:22:"removeIncludesFromFile";a:15:{s:4:"name";s:22:"removeIncludesFromFile";s:16:"start_line_index";i:1817;s:17:"start_token_index";i:10677;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:10684;s:20:"end_args_token_index";i:10686;s:9:"arguments";a:1:{s:10:"$file_path";N;}s:25:"start_brackets_line_index";i:1817;s:26:"start_brackets_token_index";i:10688;s:23:"end_brackets_line_index";i:1820;s:24:"end_brackets_token_index";i:10722;s:14:"end_line_index";i:1820;s:15:"end_token_index";i:10722;}s:23:"removeNamespaceFromFile";a:20:{s:4:"name";s:23:"removeNamespaceFromFile";s:16:"start_line_index";i:1896;s:17:"start_token_index";i:11091;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:1148:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	private static function removeInstructionsFromFile($file_path, $types) {
		if ($file_path && file_exists($file_path) && $types) {
			$types = is_array($types) ? $types : array($types);
			
			$contents = file_get_contents($file_path);
			$contents = str_replace("\r\n", "\n", $contents);
			$lines = explode("\n", $contents);
			
			//TODO: change this code to work with obfuscated php
			
			$new_contents = "";
			
			$t = count($lines);
			for ($i = 0; $i < $t; $i++) {
				$line = $lines[$i];
				$trimmed = trim($line);
				$exists = false;
				
				foreach ($types as $type) 
					if (stripos($trimmed, $type) === 0) {
						$fc = substr($trimmed, strlen($type), 1);
						
						if ($fc == " " || $fc == "$" || $fc == "'" || $fc == '"' || $fc == ";") {
							$exists = true;
							break;
						}
					}
				
				if (!$exists)
					$new_contents .= ($new_contents ? "\n" : "") . $line;
			}
			
			$new_contents = str_replace("\n\n\n", "\n\n", str_replace("\t\n", "\n", $new_contents));
			return file_put_contents($file_path, $new_contents) > 0;
		}
		
		return false;
	}*/";}s:25:"start_comments_line_index";i:1856;s:26:"start_comments_token_index";i:11089;s:23:"end_comments_line_index";i:1894;s:24:"end_comments_token_index";i:11089;s:22:"start_args_token_index";i:11098;s:20:"end_args_token_index";i:11103;s:9:"arguments";a:2:{s:10:"$file_path";N;s:10:"$namespace";N;}s:25:"start_brackets_line_index";i:1896;s:26:"start_brackets_token_index";i:11105;s:23:"end_brackets_line_index";i:1898;s:24:"end_brackets_token_index";i:11123;s:14:"end_line_index";i:1898;s:15:"end_token_index";i:11123;}s:17:"removeUseFromFile";a:15:{s:4:"name";s:17:"removeUseFromFile";s:16:"start_line_index";i:1900;s:17:"start_token_index";i:11125;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:11132;s:20:"end_args_token_index";i:11137;s:9:"arguments";a:2:{s:10:"$file_path";N;s:4:"$use";N;}s:25:"start_brackets_line_index";i:1900;s:26:"start_brackets_token_index";i:11139;s:23:"end_brackets_line_index";i:1902;s:24:"end_brackets_token_index";i:11157;s:14:"end_line_index";i:1902;s:15:"end_token_index";i:11157;}s:21:"removeIncludeFromFile";a:15:{s:4:"name";s:21:"removeIncludeFromFile";s:16:"start_line_index";i:1904;s:17:"start_token_index";i:11159;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:11166;s:20:"end_args_token_index";i:11171;s:9:"arguments";a:2:{s:10:"$file_path";N;s:8:"$include";N;}s:25:"start_brackets_line_index";i:1904;s:26:"start_brackets_token_index";i:11173;s:23:"end_brackets_line_index";i:1907;s:24:"end_brackets_token_index";i:11210;s:14:"end_line_index";i:1907;s:15:"end_token_index";i:11210;}s:29:"removeClassPropertiesFromFile";a:15:{s:4:"name";s:29:"removeClassPropertiesFromFile";s:16:"start_line_index";i:1952;s:17:"start_token_index";i:11644;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:11651;s:20:"end_args_token_index";i:11656;s:9:"arguments";a:2:{s:10:"$file_path";N;s:11:"$class_name";N;}s:25:"start_brackets_line_index";i:1952;s:26:"start_brackets_token_index";i:11658;s:23:"end_brackets_line_index";i:2007;s:24:"end_brackets_token_index";i:12094;s:14:"end_line_index";i:2007;s:15:"end_token_index";i:12094;}s:19:"removeClassFromFile";a:20:{s:4:"name";s:19:"removeClassFromFile";s:16:"start_line_index";i:2065;s:17:"start_token_index";i:12098;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:1892:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	public static function removeClassPropertiesFromFile($file_path, $class_name) {
		if ($file_path && file_exists($file_path) && $class_name) {
			$c = self::getClassFromFile($file_path, $class_name);
			$start_brackets_line = $c["start_brackets_line_index"];
			
			if (is_numeric($start_brackets_line)) {
				$contents = file_get_contents($file_path);
				$contents = str_replace("\r\n", "\n", $contents);
				$lines = explode("\n", $contents);
				
				//TODO: change this code to work with obfuscated php
				
				$new_contents = implode("\n", array_slice($lines, 0, $start_brackets_line - 1) );
				
				$line = $lines[ $start_brackets_line - 1 ];
				$pos = strpos($line, "{");
				$pos = $pos !== false ? $pos : strlen($line);
				$new_contents .= "\n" . substr($line, 0, $pos + 1);
				
				$intervals = array();
				$t = $c["methods"] ? count($c["methods"]) : 0;
				for ($i = 0; $i < $t; $i++) {
					$method = $c["methods"][$i];
					$sl = is_numeric($method["start_comments_line_index"]) ? $method["start_comments_line_index"] : $method["start_line_index"];
					$intervals[] = array($sl, $method["end_line_index"], $method);
				}
				
				$idx = $start_brackets_line - 1;
				while (true) {
					++$idx;
					
					if ($idx + 1 >= $c["end_line_index"]) 
						break;
					
					foreach ($intervals as $interval) {
						if ($idx + 1 >= $interval[0] && $idx + 1 <= $interval[1]) {
							if ($idx + 1 == $interval[0]) {
								$new_contents .= "\n";
							}
							
							$new_contents .= "\n" . $lines[$idx];
							break;
						}
					}
				}
				
				$new_contents .= "\n" . implode("\n", array_slice($lines, $idx) );
				
				$new_contents = str_replace("\n\n\n", "\n\n", str_replace("\t\n", "\n", $new_contents));
				return file_put_contents($file_path, $new_contents) > 0;
			}
		}
		
		return false;
	}*/";}s:25:"start_comments_line_index";i:2008;s:26:"start_comments_token_index";i:12096;s:23:"end_comments_line_index";i:2063;s:24:"end_comments_token_index";i:12096;s:22:"start_args_token_index";i:12105;s:20:"end_args_token_index";i:12110;s:9:"arguments";a:2:{s:10:"$file_path";N;s:11:"$class_name";N;}s:25:"start_brackets_line_index";i:2065;s:26:"start_brackets_token_index";i:12112;s:23:"end_brackets_line_index";i:2105;s:24:"end_brackets_token_index";i:12453;s:14:"end_line_index";i:2105;s:15:"end_token_index";i:12453;}s:22:"removeFunctionFromFile";a:20:{s:4:"name";s:22:"removeFunctionFromFile";s:16:"start_line_index";i:2132;s:17:"start_token_index";i:12457;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:1006:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	public static function removeClassFromFile($file_path, $class_name) {
		$class_name = $class_name ? trim($class_name) : $class_name;
		
		if ($file_path && file_exists($file_path) && $class_name) {
			self::editClassCommentsFromFile($file_path, $class_name, "");
			
			$contents = file_get_contents($file_path);
			$contents = str_replace("\r\n", "\n", $contents);
			
			$c = self::getClassFromFile($file_path, $class_name);
			$start_line = $c["start_line_index"];
			$end_line = $c["end_line_index"];
			
			//TODO: change this code to work with obfuscated php
			
			$available_types = array("class", "abstract");
			$new_contents = self::removeItemFromContents($contents, $start_line, $end_line, $available_types);
			
			$new_contents = str_replace("\n\n\n", "\n\n", str_replace("\t\n", "\n", $new_contents));
			return $contents != $new_contents ? file_put_contents($file_path, $new_contents) > 0 : true;
		}
		
		return false;
	}*/";}s:25:"start_comments_line_index";i:2106;s:26:"start_comments_token_index";i:12455;s:23:"end_comments_line_index";i:2130;s:24:"end_comments_token_index";i:12455;s:22:"start_args_token_index";i:12464;s:20:"end_args_token_index";i:12476;s:9:"arguments";a:3:{s:10:"$file_path";N;s:10:"$func_name";N;s:11:"$class_name";s:1:"0";}s:25:"start_brackets_line_index";i:2132;s:26:"start_brackets_token_index";i:12478;s:23:"end_brackets_line_index";i:2172;s:24:"end_brackets_token_index";i:12822;s:14:"end_line_index";i:2172;s:15:"end_token_index";i:12822;}s:27:"replaceFunctionCodeFromFile";a:20:{s:4:"name";s:27:"replaceFunctionCodeFromFile";s:16:"start_line_index";i:2201;s:17:"start_token_index";i:12830;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:3:{i:0;s:1090:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	public static function removeFunctionFromFile($file_path, $func_name, $class_name = 0) {
		$func_name = $func_name ? trim($func_name) : false;
		
		if ($file_path && file_exists($file_path) && $func_name) {
			self::editFunctionCommentsFromFile($file_path, $func_name, "", $class_name);
			
			$f = self::getFunctionFromFile($file_path, $func_name, $class_name);
			$start_line = $f["start_line_index"];
			$end_line = $f["end_line_index"];
			
			$contents = file_get_contents($file_path);
			$contents = str_replace("\r\n", "\n", $contents);
			
			//TODO: change this code to work with obfuscated php
			
			$available_types = array("public", "private", "protected", "abstract", "static", "function");
			$new_contents = self::removeItemFromContents($contents, $start_line, $end_line, $available_types);
	
			$new_contents = str_replace("\n\n\n", "\n\n", str_replace("\t\n", "\n", $new_contents));
			return $contents != $new_contents ? file_put_contents($file_path, $new_contents) > 0 : true;
		}
		
		return false;
	}*/";i:1;s:18:"/* END: REMOVES */";i:2;s:21:"/* START: REPLACES */";}s:25:"start_comments_line_index";i:2173;s:26:"start_comments_token_index";i:12824;s:23:"end_comments_line_index";i:2200;s:24:"end_comments_token_index";i:12828;s:22:"start_args_token_index";i:12837;s:20:"end_args_token_index";i:12852;s:9:"arguments";a:4:{s:10:"$file_path";N;s:10:"$func_name";N;s:5:"$code";N;s:11:"$class_name";s:1:"0";}s:25:"start_brackets_line_index";i:2201;s:26:"start_brackets_token_index";i:12854;s:23:"end_brackets_line_index";i:2241;s:24:"end_brackets_token_index";i:13281;s:14:"end_line_index";i:2241;s:15:"end_token_index";i:13281;}s:24:"replaceNamespaceFromFile";a:20:{s:4:"name";s:24:"replaceNamespaceFromFile";s:16:"start_line_index";i:2288;s:17:"start_token_index";i:13285;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:1724:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	public static function replaceFunctionCodeFromFile($file_path, $function_name, $code, $class_name = 0) {
		if ($file_path && file_exists($file_path) && $function_name) {
			$f = self::getFunctionFromFile($file_path, $function_name, $class_name);
			$function_name = $f["name"];
			$start_brackets_line = $f["start_brackets_line_index"];
			$end_line = $f["end_line_index"];
			
			if (is_numeric($start_brackets_line)) {
				$contents = file_get_contents($file_path);
				$contents = str_replace("\r\n", "\n", $contents);
				$lines = explode("\n", $contents);
				
				//TODO: change this code to work with obfuscated php
				
				$prefix = $class_name ? "\t" : "";
				
				$new_contents = implode("\n", array_slice($lines, 0, $start_brackets_line - 1) );
				
				$line = $lines[ $start_brackets_line - 1 ];
				$pos = strpos($line, "{");
				$pos = $pos !== false ? $pos : strlen($line);
				$new_c = trim(substr($line, 0, $pos + 1));
				if ($new_c)
					$new_contents .= "\n$prefix$new_c";
				
				$code = $code ? $code : "";
				$new_contents .= $class_name ? "\n$prefix$prefix" . str_replace("\n", "\n$prefix$prefix", $code) : "\n\t" . str_replace("\n", "\n\t", $code);
				
				$line = $lines[ $end_line - 1 ];
				$pos = strpos($line, "}");
				$pos = $pos !== false ? $pos : 0;
				$new_c = trim(substr($line, $pos));
				if ($new_c)
					$new_contents .= "\n$prefix$new_c";
				
				$new_contents .= "\n" . implode("\n", array_slice($lines, $end_line) );
			
				$new_contents = str_replace("\n\n\n", "\n\n", str_replace("\t\n", "\n", $new_contents));
				return file_put_contents($file_path, $new_contents) > 0;
			}
		}
		
		return false;
	}*/";}s:25:"start_comments_line_index";i:2242;s:26:"start_comments_token_index";i:13283;s:23:"end_comments_line_index";i:2286;s:24:"end_comments_token_index";i:13283;s:22:"start_args_token_index";i:13292;s:20:"end_args_token_index";i:13300;s:9:"arguments";a:3:{s:10:"$file_path";N;s:14:"$old_namespace";N;s:14:"$new_namespace";N;}s:25:"start_brackets_line_index";i:2288;s:26:"start_brackets_token_index";i:13302;s:23:"end_brackets_line_index";i:2308;s:24:"end_brackets_token_index";i:13507;s:14:"end_line_index";i:2308;s:15:"end_token_index";i:13507;}s:19:"addNamespacesToFile";a:20:{s:4:"name";s:19:"addNamespacesToFile";s:16:"start_line_index";i:2312;s:17:"start_token_index";i:13513;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:2:{i:0;s:19:"/* END: REPLACES */";i:1;s:17:"/* START: ADDS */";}s:25:"start_comments_line_index";i:2309;s:26:"start_comments_token_index";i:13509;s:23:"end_comments_line_index";i:2311;s:24:"end_comments_token_index";i:13511;s:22:"start_args_token_index";i:13520;s:20:"end_args_token_index";i:13525;s:9:"arguments";a:2:{s:10:"$file_path";N;s:11:"$namespaces";N;}s:25:"start_brackets_line_index";i:2312;s:26:"start_brackets_token_index";i:13527;s:23:"end_brackets_line_index";i:2327;s:24:"end_brackets_token_index";i:13653;s:14:"end_line_index";i:2327;s:15:"end_token_index";i:13653;}s:13:"addUsesToFile";a:15:{s:4:"name";s:13:"addUsesToFile";s:16:"start_line_index";i:2329;s:17:"start_token_index";i:13655;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:13662;s:20:"end_args_token_index";i:13667;s:9:"arguments";a:2:{s:10:"$file_path";N;s:5:"$uses";N;}s:25:"start_brackets_line_index";i:2329;s:26:"start_brackets_token_index";i:13669;s:23:"end_brackets_line_index";i:2341;s:24:"end_brackets_token_index";i:13763;s:14:"end_line_index";i:2341;s:15:"end_token_index";i:13763;}s:17:"addIncludesToFile";a:15:{s:4:"name";s:17:"addIncludesToFile";s:16:"start_line_index";i:2343;s:17:"start_token_index";i:13765;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:13772;s:20:"end_args_token_index";i:13777;s:9:"arguments";a:2:{s:10:"$file_path";N;s:9:"$includes";N;}s:25:"start_brackets_line_index";i:2343;s:26:"start_brackets_token_index";i:13779;s:23:"end_brackets_line_index";i:2357;s:24:"end_brackets_token_index";i:13914;s:14:"end_line_index";i:2357;s:15:"end_token_index";i:13914;}s:20:"addCodeToBeginOfFile";a:15:{s:4:"name";s:20:"addCodeToBeginOfFile";s:16:"start_line_index";i:2359;s:17:"start_token_index";i:13916;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:13923;s:20:"end_args_token_index";i:13928;s:9:"arguments";a:2:{s:10:"$file_path";N;s:5:"$code";N;}s:25:"start_brackets_line_index";i:2359;s:26:"start_brackets_token_index";i:13930;s:23:"end_brackets_line_index";i:2372;s:24:"end_brackets_token_index";i:14064;s:14:"end_line_index";i:2372;s:15:"end_token_index";i:14064;}s:41:"addCodeToBeginOfFileOrAfterFirstNamespace";a:15:{s:4:"name";s:41:"addCodeToBeginOfFileOrAfterFirstNamespace";s:16:"start_line_index";i:2374;s:17:"start_token_index";i:14066;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:14073;s:20:"end_args_token_index";i:14078;s:9:"arguments";a:2:{s:10:"$file_path";N;s:5:"$code";N;}s:25:"start_brackets_line_index";i:2374;s:26:"start_brackets_token_index";i:14080;s:23:"end_brackets_line_index";i:2401;s:24:"end_brackets_token_index";i:14316;s:14:"end_line_index";i:2401;s:15:"end_token_index";i:14316;}s:14:"addClassToFile";a:15:{s:4:"name";s:14:"addClassToFile";s:16:"start_line_index";i:2403;s:17:"start_token_index";i:14318;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:14325;s:20:"end_args_token_index";i:14330;s:9:"arguments";a:2:{s:10:"$file_path";N;s:15:"$class_settings";N;}s:25:"start_brackets_line_index";i:2403;s:26:"start_brackets_token_index";i:14332;s:23:"end_brackets_line_index";i:2433;s:24:"end_brackets_token_index";i:14609;s:14:"end_line_index";i:2433;s:15:"end_token_index";i:14609;}s:24:"addClassPropertiesToFile";a:15:{s:4:"name";s:24:"addClassPropertiesToFile";s:16:"start_line_index";i:2435;s:17:"start_token_index";i:14611;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:14618;s:20:"end_args_token_index";i:14626;s:9:"arguments";a:3:{s:10:"$file_path";N;s:11:"$class_name";N;s:5:"$code";N;}s:25:"start_brackets_line_index";i:2435;s:26:"start_brackets_token_index";i:14628;s:23:"end_brackets_line_index";i:2463;s:24:"end_brackets_token_index";i:14895;s:14:"end_line_index";i:2463;s:15:"end_token_index";i:14895;}s:17:"addFunctionToFile";a:20:{s:4:"name";s:17:"addFunctionToFile";s:16:"start_line_index";i:2501;s:17:"start_token_index";i:14899;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:1:{i:0;s:1338:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	public static function addClassPropertiesToFile($file_path, $class_name, $code) {
		if ($file_path && file_exists($file_path) && $class_name && $code) {
			$c = self::getClassFromFile($file_path, $class_name);
			$start_brackets_line = $c["start_brackets_line_index"];
			
			if (is_numeric($start_brackets_line)) {
				$contents = file_get_contents($file_path);
				$contents = str_replace("\r\n", "\n", $contents);
				$lines = explode("\n", $contents);
				
				//TODO: change this code to work with obfuscated php
				
				$new_contents = implode("\n", array_slice($lines, 0, $start_brackets_line - 1) );
				
				$line = $lines[ $start_brackets_line - 1 ];
				$pos = strpos($line, "{");
				$pos = $pos !== false ? $pos : strlen($line);
				$new_contents .= "\n" . substr($line, 0, $pos + 1);
				
				$new_contents .= "\n\t" . str_replace("\n", "\n\t", $code) . "\n\t";
				
				$new_c = trim( substr($line, $pos + 1) );
				if ($new_c) {
					$new_contents .= "\n" . $new_c;
				}
				
				$new_contents .= "\n" . implode("\n", array_slice($lines, $start_brackets_line) );
				
				$new_contents = str_replace("\n\n\n", "\n\n", str_replace("\t\n", "\n", $new_contents));
				return file_put_contents($file_path, $new_contents) > 0;
			}
		}
		
		return false;
	}*/";}s:25:"start_comments_line_index";i:2464;s:26:"start_comments_token_index";i:14897;s:23:"end_comments_line_index";i:2499;s:24:"end_comments_token_index";i:14897;s:22:"start_args_token_index";i:14906;s:20:"end_args_token_index";i:14918;s:9:"arguments";a:3:{s:10:"$file_path";N;s:18:"$function_settings";N;s:11:"$class_name";s:1:"0";}s:25:"start_brackets_line_index";i:2501;s:26:"start_brackets_token_index";i:14920;s:23:"end_brackets_line_index";i:2552;s:24:"end_brackets_token_index";i:15433;s:14:"end_line_index";i:2552;s:15:"end_token_index";i:15433;}s:14:"getClassString";a:20:{s:4:"name";s:14:"getClassString";s:16:"start_line_index";i:2626;s:17:"start_token_index";i:15441;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:8:"comments";a:3:{i:0;s:2354:"/* This is DEPRECATED bc if php is obfuscated this doesn't work.
	public static function addFunctionToFile($file_path, $function_settings, $class_name = 0) {
		$name = trim($function_settings["name"]);
		
		if ($file_path && $name) {
			//PREPARING FUNCTION STRING
			$str = self::getFunctionString($function_settings, $class_name);
			
			$code = $function_settings["code"];
			$code = $code ? ($class_name ? "\t\t" . str_replace("\n", "\n\t\t", $code) : str_replace("\n", "\n\t", $code)) : "";
			$str .= " {\n$code\n}\n";
			
			//SAVING FUNCTION STRING TO CLASS
			if ($class_name) {
				if (file_exists($file_path)) {
					$c = self::getClassFromFile($file_path, $class_name);
					$end_line = $c["end_line_index"];
					
					if (is_numeric($end_line)) {
						$contents = file_get_contents($file_path);
						$contents = str_replace("\r\n", "\n", $contents);
						$lines = explode("\n", $contents);
					
						//TODO: change this code to work with obfuscated php
						
						$new_contents = implode("\n", array_slice($lines, 0, $end_line - 1) );
					
						$line = $lines[ $end_line - 1 ];
						$pos = strpos($line, "}");
						$pos = $pos !== false ? $pos : 0;
					
						$new_c = trim(substr($line, 0, $pos));
						if ($new_c) 
							$new_contents .= "\n$new_c";
					
						$new_contents .= "\n\n$str";
					
						$new_c = trim(substr($line, $pos));
						if ($new_c) 
							$new_contents .= "\n$new_c";
					
						$new_contents .= "\n" . implode("\n", array_slice($lines, $end_line) );
					
						$new_contents = str_replace("\n\n\n", "\n\n", str_replace("\t\n", "\n", $new_contents));
						return file_put_contents($file_path, $new_contents) > 0;
					}
				}
			}
			//SAVING FUNCTION STRING AS A GENERIC FUNCTION
			else {
				if (file_exists($file_path)) {
					$contents = file_get_contents($file_path);
					$contents = str_replace("\r\n", "\n", $contents);
					$pos = strrpos($contents, "?>");
			
					if ($pos !== false) 
						$contents = substr($contents, 0, $pos) . "\n\n$str\n" . substr($contents, $pos);
					else 
						$contents .= (empty($contents) ? "<?php" : "\n") . "\n$str?>";
				}
				else 
					$contents = "<?php\n$str\n?>";
				
				$contents = str_replace("\n\n\n", "\n\n", str_replace("\t\n", "\n", $contents));
				return file_put_contents($file_path, $contents) > 0;
			}
		}
		
		return false;
	}*/";i:1;s:15:"/* END: ADDS */";i:2;s:18:"/* START: UTILS */";}s:25:"start_comments_line_index";i:2553;s:26:"start_comments_token_index";i:15435;s:23:"end_comments_line_index";i:2625;s:24:"end_comments_token_index";i:15439;s:22:"start_args_token_index";i:15448;s:20:"end_args_token_index";i:15450;s:9:"arguments";a:1:{s:15:"$class_settings";N;}s:25:"start_brackets_line_index";i:2626;s:26:"start_brackets_token_index";i:15452;s:23:"end_brackets_line_index";i:2674;s:24:"end_brackets_token_index";i:15987;s:14:"end_line_index";i:2674;s:15:"end_token_index";i:15987;}s:17:"getFunctionString";a:15:{s:4:"name";s:17:"getFunctionString";s:16:"start_line_index";i:2676;s:17:"start_token_index";i:15989;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:15996;s:20:"end_args_token_index";i:16005;s:9:"arguments";a:2:{s:18:"$function_settings";N;s:11:"$class_name";s:5:"false";}s:25:"start_brackets_line_index";i:2676;s:26:"start_brackets_token_index";i:16007;s:23:"end_brackets_line_index";i:2724;s:24:"end_brackets_token_index";i:16588;s:14:"end_line_index";i:2724;s:15:"end_token_index";i:16588;}s:22:"getClassPropertyString";a:15:{s:4:"name";s:22:"getClassPropertyString";s:16:"start_line_index";i:2726;s:17:"start_token_index";i:16590;s:4:"type";s:6:"public";s:8:"abstract";b:0;s:6:"static";b:1;s:22:"start_args_token_index";i:16597;s:20:"end_args_token_index";i:16599;s:9:"arguments";a:1:{s:18:"$property_settings";N;}s:25:"start_brackets_line_index";i:2726;s:26:"start_brackets_token_index";i:16601;s:23:"end_brackets_line_index";i:2752;s:24:"end_brackets_token_index";i:16910;s:14:"end_line_index";i:2752;s:15:"end_token_index";i:16910;}}}}