<?php
/*
 * Copyright (c) 2024 Bloxtor - http://bloxtor.com
 * 
 * Please note that this code belongs to the Bloxtor framework and must comply with the Bloxtor license.
 * If you do not accept these provisions, or if the Bloxtor License is not present or cannot be found, you are not entitled to use this code and must stop and delete it immediately.
 */
include_once get_lib("org.phpframework.layer.presentation.cms.module.CMSModuleInstallationHandler"); include_once $EVC->getUtilPath("CMSPresentationLayerHandler"); include_once $EVC->getUtilPath("LayoutTypeProjectHandler"); $UserAuthenticationHandler->checkPresentationFileAuthentication($entity_path, "access"); $bean_name = $_GET["bean_name"]; $bean_file_name = $_GET["bean_file_name"]; $filter_by_layout = $_GET["filter_by_layout"]; $popup = $_GET["popup"]; $filter_by_layout = str_replace("../", "", $filter_by_layout); if ($bean_name && $bean_file_name) { $projects = CMSPresentationLayerHandler::getPresentationLayerProjectsFiles($user_global_variables_file_path, $user_beans_folder_path, $bean_file_name, $bean_name, "config", false, 0); $LayoutTypeProjectHandler = new LayoutTypeProjectHandler($UserAuthenticationHandler, $user_global_variables_file_path, $user_beans_folder_path, $bean_file_name, $bean_name); $LayoutTypeProjectHandler->filterPresentationLayerProjectsByUserAndLayoutPermissions($projects, $filter_by_layout, UserAuthenticationHandler::$PERMISSION_BELONG_NAME, array( "do_not_filter_by_layout" => array( "bean_name" => $bean_name, "bean_file_name" => $bean_file_name ) )); $WorkFlowBeansFileHandler = new WorkFlowBeansFileHandler($user_beans_folder_path . $bean_file_name, $user_global_variables_file_path); $P = $WorkFlowBeansFileHandler->getBeanObject($bean_name); $available_db_drivers = WorkFlowBeansFileHandler::getLayerDBDrivers($user_global_variables_file_path, $user_beans_folder_path, $P, true); $LayoutTypeProjectHandler->filterLayerBrokersDBDriversPropsFromLayoutName($available_db_drivers, $filter_by_layout); if ($_POST && ($_FILES["zip_file"] || $_POST["zip_url"])) { $UserAuthenticationHandler->checkPresentationFileAuthentication($entity_path, "write"); $status = true; $messages = array(); $PresentationLayer = $EVC->getPresentationLayer(); $module_prefix_path = $PresentationLayer->getLayerPathSetting() . $PresentationLayer->getCommonProjectName() . "/"; $system_presentation_settings_path = $module_prefix_path . $PresentationLayer->settings["presentation_modules_path"]; $system_presentation_settings_webroot_path = $module_prefix_path . $PresentationLayer->settings["presentation_webroot_path"] . "module/"; $selected_project = $_POST["project"]; $selected_db_driver = $_POST["db_driver"]; $pre_init_configs = array(); foreach ($projects as $project_name => $project) { if (empty($selected_project) || $project_name == $selected_project) { if ($project["files"]["pre_init_config.php"] || $project["files"]["pre_init_config"]) { $fp = $project["files"]["pre_init_config.php"] ? $project["files"]["pre_init_config.php"] : $project["files"]["pre_init_config"]; $file_path = substr($project["path"], 0, - strlen($project_name)) . $fp["path"]; $pre_init_configs[$project_name] = $file_path; } } } if (!$pre_init_configs) $pre_init_configs[] = false; $files_to_close = array(); $zip_urls_tmp_names = array(); if ($_POST["zip_url"]) { $index = $_FILES["zip_file"] && $_FILES["zip_file"]["name"] ? max(array_keys($_FILES["zip_file"]["name"])) + 1 : 0; foreach ($_POST["zip_url"] as $zip_url) if (trim($zip_url)) { $downloaded_file = MyCurl::downloadFile($zip_url, $fp); if ($fp) $files_to_close[] = $fp; if ($downloaded_file && stripos($downloaded_file["type"], "zip") !== false) { if (!$_FILES["zip_file"]) $_FILES["zip_file"] = array(); $_FILES["zip_file"]["name"][$index] = $downloaded_file["name"]; $_FILES["zip_file"]["type"][$index] = $downloaded_file["type"]; $_FILES["zip_file"]["tmp_name"][$index] = $downloaded_file["tmp_name"]; $_FILES["zip_file"]["error"][$index] = $downloaded_file["error"]; $_FILES["zip_file"]["size"][$index] = $downloaded_file["size"]; $zip_urls_tmp_names[ $downloaded_file["tmp_name"] ] = true; $index++; } else { $status = false; $error_message = "Error: Could not upload file. Please try again..."; } } } if ($_FILES["zip_file"]) { $exists = false; foreach ($_FILES["zip_file"]["name"] as $i => $name) if (trim($name)) { $exists = true; break; } if (!$exists) { $status = false; $error_message = "Error: File cannot be empty!"; } else { ksort($_FILES["zip_file"]["name"]); ksort($_FILES["zip_file"]["type"]); ksort($_FILES["zip_file"]["tmp_name"]); ksort($_FILES["zip_file"]["error"]); ksort($_FILES["zip_file"]["size"]); $right_order = array("translator", "common", "object", "tag", "attachment", "user", "action", "zip", "comment"); $new_files = array(); foreach ($right_order as $file_name) foreach ($_FILES["zip_file"]["name"] as $i => $name) { if (pathinfo($name, PATHINFO_FILENAME) == $file_name) { $new_files["zip_file"]["name"][] = $name; $new_files["zip_file"]["type"][] = $_FILES["zip_file"]["type"][$i]; $new_files["zip_file"]["tmp_name"][] = $_FILES["zip_file"]["tmp_name"][$i]; $new_files["zip_file"]["error"][] = $_FILES["zip_file"]["error"][$i]; $new_files["zip_file"]["size"][] = $_FILES["zip_file"]["size"][$i]; break; } } foreach ($_FILES["zip_file"]["name"] as $i => $name) { if (!in_array(pathinfo($name, PATHINFO_FILENAME), $right_order)) { $new_files["zip_file"]["name"][] = $name; $new_files["zip_file"]["type"][] = $_FILES["zip_file"]["type"][$i]; $new_files["zip_file"]["tmp_name"][] = $_FILES["zip_file"]["tmp_name"][$i]; $new_files["zip_file"]["error"][] = $_FILES["zip_file"]["error"][$i]; $new_files["zip_file"]["size"][] = $_FILES["zip_file"]["size"][$i]; } } foreach ($new_files["zip_file"]["name"] as $i => $name) if (trim($name)) { $zip_file = array( "name" => $name, "type" => $new_files["zip_file"]["type"][$i], "tmp_name" => $new_files["zip_file"]["tmp_name"][$i], "error" => $new_files["zip_file"]["error"][$i], "size" => $new_files["zip_file"]["size"][$i], ); $dest_folder_path = CMSModuleInstallationHandler::getTmpFolderPath(); if (!$dest_folder_path) $error_message = "Error: trying to create tmp folder to upload '$name' file!"; else { $zipped_file_path = $dest_folder_path . $name; $dest_file_path = substr($zipped_file_path, 0, -4) . "/"; $extension = strtolower( pathinfo($name, PATHINFO_EXTENSION) ); $module_id = pathinfo($zip_file["name"], PATHINFO_FILENAME); if ($extension != "zip") { $status = false; $messages[$module_id][$project_name][] = array("msg" => "STATUS: FALSE: File '$name' must be a zip file!", "type" => "alert"); } else { $is_zip_url = !empty($zip_urls_tmp_names[ $zip_file["tmp_name"] ]); $continue = $is_zip_url ? rename($zip_file["tmp_name"], $zipped_file_path) : move_uploaded_file($zip_file["tmp_name"], $zipped_file_path); if ($continue) { CacheHandlerUtil::deleteFolder($dest_file_path); $unzipped_module_path = CMSModuleInstallationHandler::unzipModuleFile($zipped_file_path, $dest_file_path); if ($unzipped_module_path) { $info = CMSModuleInstallationHandler::getUnzippedModuleSettings($unzipped_module_path); if ($info && $info["tag"] && $module_id != $info["tag"]) $module_id = $info["tag"]; $system_presentation_settings_module_path = $system_presentation_settings_path . $module_id; $system_presentation_settings_webroot_module_path = $system_presentation_settings_webroot_path . $module_id; $used_drivers = array(); foreach ($pre_init_configs as $project_name => $pre_init_config) { $user_global_variables_file_paths = $pre_init_config ? array($user_global_variables_file_path, $pre_init_config) : $user_global_variables_file_path; $PHPVariablesFileHandler = new PHPVariablesFileHandler($user_global_variables_file_paths); $PHPVariablesFileHandler->startUserGlobalVariables(); $layers = WorkFlowBeansFileHandler::getLocalBeanLayersFromBrokers($user_global_variables_file_paths, $user_beans_folder_path, $P->getBrokers(), true); $layers[$bean_name] = $P; $CMSModuleInstallationHandler = CMSModuleInstallationHandler::createCMSModuleInstallationHandlerObject($layers, $module_id, $system_presentation_settings_module_path, $system_presentation_settings_webroot_module_path, $unzipped_module_path, $selected_db_driver, $UserAuthenticationHandler); $CMSModuleInstallationHandler->setUsedDBDrivers($used_drivers); $data_access_layer_detected = $CMSModuleInstallationHandler->detectedLayerByClass("DataAccessLayer"); try { $s = $CMSModuleInstallationHandler->install(); if ($s) { if ($CMSModuleInstallationHandler->areAllDBDriversUsed()) $messages[$module_id][$project_name][] = array("msg" => "STATUS: OK, BUT NO DB DRIVERS EXECUTED BC THEY WERE ALREADY EXECUTED BEFORE!", "type" => "alert"); } else { $status = false; $messages[$module_id][$project_name][] = array("msg" => "STATUS: FALSE", "type" => "error"); } if (!$data_access_layer_detected) $messages[$module_id][$project_name][] = array("msg" => "NO DATA ACCESS LAYERS DETECTED, WHICH MEANS THAT IF THIS MODULE CONTAINS ANY XML FILES WITH SQL QUERIES, THEY WEREN'T COPIED!", "type" => "alert"); if ($messages[$module_id][$project_name]) $messages[$module_id][$project_name][] = array("msg" => "GLOBAL SELECTED DB DRIVER: " . $GLOBALS["default_db_driver"], "type" => "info"); } catch(Exception $e) { $status = false; $messages[$module_id][$project_name][] = array("msg" => "STATUS: FALSE", "type" => "error"); if (!$data_access_layer_detected) $messages[$module_id][$project_name][] = array("msg" => "NO DATA ACCESS LAYERS DETECTED, WHICH MEANS THAT IF THIS MODULE CONTAINS ANY XML FILES WITH SQL QUERIES, THEY WEREN'T COPIED!", "type" => "alert"); $messages[$module_id][$project_name][] = array("msg" => "GLOBAL SELECTED DB DRIVER: " . $GLOBALS["default_db_driver"], "type" => "info"); $messages[$module_id][$project_name][] = array("msg" => "ERROR MESSAGE: \n" . trim($e->getMessage()), "type" => "exception"); $messages[$module_id][$project_name][] = array("msg" => "\n" . trim($e->problem), "type" => "exception"); global $GlobalErrorHandler; if (!$GlobalErrorHandler->ok()) $GlobalErrorHandler->start(); } $module_installation_messages = $CMSModuleInstallationHandler->getMessages(); if ($module_installation_messages) $messages[$module_id][$project_name][] = array("msg" => implode("\n", $module_installation_messages), "type" => "info"); $used_drivers = array_merge($used_drivers, $CMSModuleInstallationHandler->getUsedDBDrivers()); if ($CMSModuleInstallationHandler->isModuleInstalled()) { if (!$LayoutTypeProjectHandler->createLayoutTypePermissionsForModuleInLayersFromProjectPath($projects[$project_name]["path"], $layers, $module_id)) $messages[$module_id][$project_name][] = array("msg" => "Could not add the module permission for the selected projects layout types.", "type" => "info"); } $CMSModuleInstallationHandler->freeModuleCache(); $CMSModuleLayer = $EVC->getCMSLayer()->getCMSModuleLayer(); $CMSModuleLayer->freeModuleCache(); $PHPVariablesFileHandler->endUserGlobalVariables(); } } CMSModuleUtil::deleteFolder($unzipped_module_path); unlink($zipped_file_path); } else { $status = false; $messages[$module_id][$project_name][] = array("msg" => "STATUS: FALSE: File '$name' not uploaded!", "type" => "error"); } } CMSModuleUtil::deleteFolder($dest_folder_path); } } } } else $error_message = "Error: Could not upload file. Please try again..."; if ($files_to_close) foreach ($files_to_close as $fp) fclose($fp); } else if ($filter_by_layout) { $layer_bean_folder_name = WorkFlowBeansFileHandler::getLayerBeanFolderName($user_beans_folder_path . $bean_file_name, $bean_name, $user_global_variables_file_paths); $selected_project = substr($filter_by_layout, strlen($layer_bean_folder_name) + 1); $PEVC = $WorkFlowBeansFileHandler->getEVCBeanObject($bean_name, $selected_project); $PHPVariablesFileHandler = new PHPVariablesFileHandler(array($user_global_variables_file_paths, $PEVC->getConfigPath("pre_init_config"))); $PHPVariablesFileHandler->startUserGlobalVariables(); $selected_db_driver = $GLOBALS["default_db_driver"]; $PHPVariablesFileHandler->endUserGlobalVariables(); } } ?>
