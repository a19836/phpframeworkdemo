<?php
/*
 * Copyright (c) 2007 PHPMyFrameWork - Joao Pinto
 * AUTHOR: Joao Paulo Lopes Pinto -- http://jplpinto.com
 * 
 * The use of this code must be allowed first by the creator Joao Pinto, since this is a private and proprietary code.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

include_once get_lib("org.phpframework.util.MyArray"); include_once $EVC->getUtilPath("WorkFlowBeansFileHandler"); include_once $EVC->getUtilPath("WorkFlowPHPFileHandler"); $bean_name = $_GET["bean_name"]; $bean_file_name = $_GET["bean_file_name"]; $path = $_GET["path"]; $item_type = $_GET["item_type"]; $class_id = $_GET["class"]; $method_id = $_GET["method"]; $function_id = $_GET["function"]; $remove_file_if_no_class = $_GET["remove_file_if_no_class"]; $rename_file_with_class = $_GET["rename_file_with_class"]; $file_modified_time = $_GET["file_modified_time"]; $path = str_replace("../", "", $path); $WorkFlowBeansFileHandler = new WorkFlowBeansFileHandler($user_beans_folder_path . $bean_file_name, $user_global_variables_file_path); if ($item_type == "dao") $layer_path = DAO_PATH; else if ($item_type == "vendor") $layer_path = VENDOR_PATH; else if ($item_type == "test_unit") $layer_path = TEST_UNIT_PATH; else if ($item_type == "other") $layer_path = OTHER_PATH; else { $obj = $WorkFlowBeansFileHandler->getBeanObject($bean_name); $layer_path = null; if ($obj) $layer_path = $obj->getLayerPathSetting(); } if ($layer_path && $_POST) { $file_path = $layer_path . $path; if ($path && file_exists($file_path)) { $layer_object_id = $item_type == "dao" ? "vendor/dao/$path" : ($item_type == "vendor" || $item_type == "other" ? "$item_type/$path" : ($item_type == "test_unit" ? "vendor/testunit/$path" : $file_path)); $UserAuthenticationHandler->checkInnerFilePermissionAuthentication($layer_object_id, "layer", "access"); UserAuthenticationHandler::checkUsersMaxNum($UserAuthenticationHandler); UserAuthenticationHandler::checkActionsMaxNum($UserAuthenticationHandler); $object = $_POST["object"]; $folder_path = substr($file_path, strlen($file_path) - 1) == "/" ? $file_path : dirname($file_path); if (!is_dir($folder_path)) mkdir($folder_path, 0755, true); MyArray::arrKeysToLowerCase($object, true); switch ($file_type) { case "save_file_class": $status = WorkFlowPHPFileHandler::saveClass($file_path, $object, $class_id, $rename_file_with_class); break; case "remove_file_class": $status = WorkFlowPHPFileHandler::removeClass($file_path, $class_id, $remove_file_if_no_class); break; case "save_file_class_method": case "save_file_function": $file_was_changed = file_exists($file_path) && $file_modified_time && $file_modified_time < filemtime($file_path); if ($file_was_changed) { $old_code = file_exists($file_path) ? file_get_contents($file_path) : ""; $tmp_file_path = tempnam(TMP_PATH, $file_type . "_"); file_put_contents($tmp_file_path, $old_code); if ($file_type == "save_file_class_method") $status = WorkFlowPHPFileHandler::saveClassMethod($tmp_file_path, $object, $class_id, $method_id); else $status = WorkFlowPHPFileHandler::saveFunction($tmp_file_path, $object, $function_id); $ret = array( "status" => "CHANGED", "old_code" => $old_code, "new_code" => file_exists($tmp_file_path) ? file_get_contents($tmp_file_path) : "", ); unlink($tmp_file_path); } else { if ($file_type == "save_file_class_method") $status = WorkFlowPHPFileHandler::saveClassMethod($file_path, $object, $class_id, $method_id); else $status = WorkFlowPHPFileHandler::saveFunction($file_path, $object, $function_id); clearstatcache(true, $file_path); $ret = array( "status" => $status, "modified_time" => filemtime($file_path), ); } $status = json_encode($ret); break; case "remove_file_class_method": $status = WorkFlowPHPFileHandler::removeClassMethod($file_path, $class_id, $method_id); break; case "remove_file_function": $status = WorkFlowPHPFileHandler::removeFunction($file_path, $function_id); break; case "save_file_includes": $status = WorkFlowPHPFileHandler::saveIncludesAndNamespacesAndUses($file_path, $object); break; } if ($status) $UserAuthenticationHandler->incrementUsedActionsTotal(); } } if (!$do_not_die_on_save) die($status); ?>
