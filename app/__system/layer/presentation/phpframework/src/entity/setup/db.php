<?php
/*
 * Copyright (c) 2007 PHPMyFrameWork - Joao Pinto
 * AUTHOR: Joao Paulo Lopes Pinto -- http://jplpinto.com
 * 
 * The use of this code must be allowed first by the creator Joao Pinto, since this is a private and proprietary code.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
include_once $EVC->getUtilPath("WorkFlowDBHandler"); include_once $EVC->getUtilPath("FlushCacheHandler"); $UserAuthenticationHandler->checkPresentationFileAuthentication($entity_path, "access"); $workflow_path_id = "layer"; $WorkFlowDBHandler = new WorkFlowDBHandler($user_beans_folder_path, $user_global_variables_file_path); if (isset($_POST["data"])) { $UserAuthenticationHandler->checkPresentationFileAuthentication($entity_path, "write"); if ($_POST["data"]["db_name"]) $_POST["data"]["db_name"] = str_replace(" ", "_", strtolower($_POST["data"]["db_name"])); $content = file_get_contents($EVC->getPresentationLayer()->getSelectedPresentationSetting("presentation_webroot_path") . "/assets/default_layers_workflow_" . (!empty($_POST["data"]["db_type"]) ? "with" : "without") . "_db.xml"); $content = str_replace("\$db_type", $_POST["data"]["db_type"], $content); $content = str_replace("\$driver_label", $_POST["data"]["db_type"], $content); $content = str_replace("\$db_extension", $_POST["data"]["db_extension"], $content); $content = str_replace("\$db_host", $_POST["data"]["db_host"], $content); $content = str_replace("\$db_port", $_POST["data"]["db_port"], $content); $content = str_replace("\$db_name", $_POST["data"]["db_name"], $content); $content = str_replace("\$db_username", $_POST["data"]["db_username"], $content); $content = str_replace("\$db_password", $_POST["data"]["db_password"], $content); $content = str_replace("\$db_persistent", $_POST["data"]["db_persistent"] ? $_POST["data"]["db_persistent"] : 0, $content); $content = str_replace("\$db_new_link", $_POST["data"]["db_new_link"] ? $_POST["data"]["db_new_link"] : 0, $content); $content = str_replace("\$db_encoding", $_POST["data"]["db_encoding"], $content); $content = str_replace("\$db_schema", $_POST["data"]["db_schema"], $content); $content = str_replace("\$db_odbc_data_source", $_POST["data"]["db_odbc_data_source"], $content); $content = str_replace("\$db_odbc_driver", $_POST["data"]["db_odbc_driver"], $content); $content = str_replace("\$db_extra_dsn", $_POST["data"]["db_extra_dsn"], $content); if (file_put_contents($workflow_paths_id[ $workflow_path_id ], $content)) { $post_global_vars = array("default_db_driver" => ""); if ((file_exists($user_global_variables_file_path) && filesize($user_global_variables_file_path) > 0) || PHPVariablesFileHandler::saveVarsToFile($user_global_variables_file_path, $post_global_vars, true)) { $WorkFlowBeansConverter = new WorkFlowBeansConverter($workflow_paths_id[ $workflow_path_id ], $user_beans_folder_path, $user_global_variables_file_path, $user_global_settings_file_path); $WorkFlowBeansConverter->init(); if ($WorkFlowBeansConverter->createBeans()) { $continue = true; if (!$WorkFlowBeansConverter->createSetupDefaultProjectLayouts($UserAuthenticationHandler)) { $continue = false; $error_message = "Error trying to create the default project layout types. Please try again..."; } FlushCacheHandler::flushCache($EVC, $webroot_cache_folder_path, $webroot_cache_folder_url, $workflow_paths_id, $user_global_variables_file_path, $user_beans_folder_path, $css_and_js_optimizer_webroot_cache_folder_path, $deployments_temp_folder_path); if ($WorkFlowDBHandler->areTasksDBDriverValid($workflow_paths_id[ $workflow_path_id ], true)) { if ($continue) { if ($is_inside_of_iframe) echo '<script>
								var url = window.top.location;
								window.top.location = url;
								//window.parent.location = url;
							</script>'; else { header("location: ?step=4"); echo '<script>window.location = "?step=4"</script>'; } die(); } } else $error_message = "DataBase settings are wrong. " . str_replace($_POST["data"]["db_password"], "***",$WorkFlowDBHandler->getError()); } else $error_message = "Error trying to create some folders. Please try again or talk with the system administrator."; } else $error_message = "There was an error saving the DB settings. Please try again..."; } else $error_message = "There was an error saving the DB settings. Please try again..."; } $diagram_already_exists = file_exists($workflow_paths_id[ $workflow_path_id ]); $data = $diagram_already_exists ? $WorkFlowDBHandler->getFirstTaskDBDriverCredentials($workflow_paths_id[ $workflow_path_id ], "db_") : array(); if (isset($data["db_db_name"])) { $data["db_name"] = $data["db_db_name"]; unset($data["db_db_name"]); } if (!isset($data["db_type"])) { $data["db_type"] = isset($_POST["data"]["db_type"]) ? $_POST["data"]["db_type"] : ""; } if (!isset($data["db_encoding"])) { $data["db_encoding"] = isset($_POST["data"]["db_encoding"]) ? $_POST["data"]["db_encoding"] : "utf8"; } $all_driver_labels = DB::getAllDriverLabelsByType(); $available_db_types = array(array("value" => "", "label" => "I do NOT need a DataBase")); foreach ($all_driver_labels as $type => $label) $available_db_types[] = array("value" => $type, "label" => "$label DataBase"); $drivers_extensions = DB::getAllExtensionsByType(); $available_extensions_options = array(); if ($data["db_type"] && is_array($drivers_extensions[ $data["db_type"] ])) foreach ($drivers_extensions[ $data["db_type"] ] as $idx => $enc) $available_extensions_options[] = array("value" => $enc, "label" => $enc . ($idx == 0 ? " - Default" : "")); if ($data["db_extension"] && (!$drivers_extensions[ $data["db_type"] ] || !in_array($data["db_extension"], $drivers_extensions[ $data["db_type"] ]))) $available_extensions_options[] = array("value" => $data["db_extension"], "label" => $data["db_extension"] . " - DEPRECATED"); $drivers_encodings = DB::getAllDBCharsetsByType(); $available_encodings_options = array(array("value" => "", "label" => "-- Default --")); if ($data["db_type"] && is_array($drivers_encodings[ $data["db_type"] ])) foreach ($drivers_encodings[ $data["db_type"] ] as $enc => $label) $available_encodings_options[] = array("value" => $enc, "label" => $label); if ($data["db_encoding"] && (!$drivers_encodings[ $data["db_type"] ] || !array_key_exists($data["db_encoding"], $drivers_encodings[ $data["db_type"] ]))) $available_encodings_options[] = array("value" => $data["db_encoding"], "label" => $data["db_encoding"] . " - DEPRECATED"); $drivers_ignore_connection_options = DB::getAllIgnoreConnectionOptionsByType(); $drivers_ignore_connection_options_by_extension = DB::getAllIgnoreConnectionOptionsByExtensionAndType(); $already_did_setup = file_exists(CONFIG_PATH . "bean/app.xml"); ?>
