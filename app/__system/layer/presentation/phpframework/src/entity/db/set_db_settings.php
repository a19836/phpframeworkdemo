<?php
/*
 * Copyright (c) 2007 PHPMyFrameWork - Joao Pinto
 * AUTHOR: Joao Paulo Lopes Pinto -- http://jplpinto.com
 * 
 * The use of this code must be allowed first by the creator Joao Pinto, since this is a private and proprietary code.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
include_once $EVC->getUtilPath("WorkFlowBeansFileHandler"); include_once $EVC->getUtilPath("PHPVariablesFileHandler"); include_once $EVC->getUtilPath("WorkFlowTasksFileHandler"); include_once $EVC->getUtilPath("WorkFlowDBHandler"); $UserAuthenticationHandler->checkPresentationFileAuthentication($entity_path, "access"); $layer_bean_folder_name = $_GET["layer_bean_folder_name"]; $bean_name = $_GET["bean_name"]; $bean_file_name = $_GET["bean_file_name"]; $bean_path = BEAN_PATH . $bean_file_name; $workflow_path_id = "layer"; if (!empty($bean_file_name) && file_exists($bean_path)) { $layer_object_id = LAYER_PATH . "$layer_bean_folder_name/$bean_name"; $UserAuthenticationHandler->checkInnerFilePermissionAuthentication($layer_object_id, "layer", "access"); $db_settings_variables = array(); $WorkFlowBeansFileHandler = new WorkFlowBeansFileHandler($bean_path, $user_global_variables_file_path); $WorkFlowBeansFileHandler->init(); $DBDriver = $WorkFlowBeansFileHandler->getBeanObject($bean_name); $db_settings = $WorkFlowBeansFileHandler->getDBSettings($bean_name, $db_settings_variables, $_POST["data"]); if (isset($_POST["data"])) { $UserAuthenticationHandler->checkPresentationFileAuthentication($entity_path, "write"); if ($WorkFlowBeansFileHandler->saveNodesBeans()) { if (WorkFlowTasksFileHandler::updateTaskProperties($workflow_paths_id[ $workflow_path_id ], $bean_name, $_POST["data"])) { include_once $EVC->getUtilPath("WorkFlowDBHandler"); $WorkFlowDBHandler = new WorkFlowDBHandler($user_beans_folder_path, $user_global_variables_file_path); if ($WorkFlowDBHandler->areTasksDBDriverValid($workflow_paths_id[ $workflow_path_id ], false)) $status_message = "Settings saved successfully"; else $error_message = "DataBase settings are wrong. " . str_replace($_POST["data"]["password"], "***", $WorkFlowDBHandler->getError()); } else $error_message = "There was an error trying to save the DB task settings. Please try again..."; } else $error_message = "There was an error trying to save db settings. Please try again..."; } $drivers_labels = DB::getAllDriverLabelsByType(); $available_types_options = array(); foreach ($drivers_labels as $type => $label) $available_types_options[] = array("value" => $type, "label" => $label); $drivers_extensions = DB::getAllExtensionsByType(); $available_extensions_options = array(); if ($db_settings["type"] && is_array($drivers_extensions[ $db_settings["type"] ])) foreach ($drivers_extensions[ $db_settings["type"] ] as $idx => $enc) $available_extensions_options[] = array("value" => $enc, "label" => $enc . ($idx == 0 ? " - Default" : "")); if ($db_settings["extension"] && (!$drivers_extensions[ $db_settings["type"] ] || !in_array($db_settings["extension"], $drivers_extensions[ $db_settings["type"] ]))) $available_extensions_options[] = array("value" => $db_settings["extension"], "label" => $db_settings["extension"] . " - DEPRECATED"); $drivers_encodings = DB::getAllDBCharsetsByType(); $available_encodings_options = array(array("value" => "", "label" => "-- Default --")); if ($db_settings["type"] && is_array($drivers_encodings[ $db_settings["type"] ])) foreach ($drivers_encodings[ $db_settings["type"] ] as $enc => $label) $available_encodings_options[] = array("value" => $enc, "label" => $label); if ($db_settings["encoding"] && (!$drivers_encodings[ $db_settings["type"] ] || !array_key_exists($db_settings["encoding"], $drivers_encodings[ $db_settings["type"] ]))) $available_encodings_options[] = array("value" => $db_settings["encoding"], "label" => $db_settings["encoding"] . " - DEPRECATED"); $drivers_ignore_connection_options = DB::getAllIgnoreConnectionOptionsByType(); $drivers_ignore_connection_options_by_extension = DB::getAllIgnoreConnectionOptionsByExtensionAndType(); } else $error = "There was an error trying to get the file '$bean_path'. Please try again..."; ?>
