<?php
/*
 * Copyright (c) 2007 PHPMyFrameWork - Joao Pinto
 * AUTHOR: Joao Paulo Lopes Pinto -- http://jplpinto.com
 * 
 * The use of this code must be allowed first by the creator Joao Pinto, since this is a private and proprietary code.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
include_once get_lib("org.phpframework.util.text.TextValidator"); include_once get_lib("org.phpframework.util.MimeTypeHandler"); include_once $EVC->getUtilPath("WorkFlowDBHandler"); $UserAuthenticationHandler->checkPresentationFileAuthentication($entity_path, "access"); $UserAuthenticationHandler->checkPresentationFileAuthentication($entity_path, "write"); $status = false; $layer_bean_folder_name = $_GET["layer_bean_folder_name"]; $bean_name = $_GET["bean_name"]; $bean_file_name = $_GET["bean_file_name"]; $table = $_GET["table"]; $download = $_GET["download"]; if ($bean_name && $table) { $layer_object_id = LAYER_PATH . "$layer_bean_folder_name/$bean_name"; $UserAuthenticationHandler->checkInnerFilePermissionAuthentication($layer_object_id, "layer", "access"); $WorkFlowDBHandler = new WorkFlowDBHandler($user_beans_folder_path, $user_global_variables_file_path); $DBDriver = $WorkFlowDBHandler->getBeanObject($bean_file_name, $bean_name); $existent_tables = $DBDriver->listTables(); $table_exists = $DBDriver->isTableInNamesList($existent_tables, $table); if ($table_exists) { if ($download) { $attr_name = $_GET["attr_name"]; $pks = $_GET["pks"]; if ($attr_name && $pks) { $results = $DBDriver->findObjects($table, $attr_name, $pks); $content = $results[0][$attr_name]; $finfo = new finfo(FILEINFO_MIME_TYPE); $mime_type = $finfo->buffer($field_value); $types = MimeTypeHandler::getAvailableTypesByMimeType($mime_type); $extension = $types ? $types[0]["extension"] : ""; $extension = $extension ? explode(" ", str_replace(array(",", ";"), " ", $extension)) : ""; header('Content-Description: File Transfer'); header('Content-Type: application/octet-stream'); header('Content-Disposition: attachment; filename="' . $table . "_" . $attr_name . "_file" . ($extension ? ".$extension" : "") . '"'); header('Content-Length: ' . mb_strlen($content)); echo $content; exit; } } else if ($_POST) { $table_fields = $DBDriver->listTableFields($table); if ($table_fields) { $pks = array(); $auto_increment_pks = array(); $action = $_POST["action"]; $attributes = $_POST["attributes"]; $conditions = $_POST["conditions"]; foreach ($table_fields as $field_name => $field) { if ($field["primary_key"]) $pks[] = $field_name; if ($field["auto_increment"]) $auto_increment_pks[] = $field_name; } if ($_FILES) { $blob_types = $DBDriver->getDBColumnBlobTypes(); foreach ($table_fields as $field_name => $field) { $field_type = $field["type"]; if (in_array($field_type, $blob_types) && preg_match("/blob/i", $field_type) && $_FILES[$field_name] && $_FILES[$field_name]["tmp_name"]) { $uploaded_file = $_FILES[$field_name]["tmp_name"]; $attributes[$field_name] = file_exists($uploaded_file) ? file_get_contents($uploaded_file) : ""; } } } if ($attributes) { $numeric_types = $DBDriver->getDBColumnNumericTypes(); foreach ($attributes as $k => $v) { if (!array_key_exists($k, $table_fields)) unset($attributes[$k]); else { $field_props = $table_fields[$k]; if (in_array($field_props["type"], $numeric_types) && !is_numeric($v) && empty($v)) { if (in_array($k, $auto_increment_pks)) { unset($attributes[$k]); continue 1; } else $attributes[$k] = $field_props["null"] ? null : 0; } else if (in_array($field_props["type"], $numeric_types) && is_numeric($v) && is_string($v)) $attributes[$k] += 0; } } } if ($conditions) foreach ($conditions as $k => $v) if (!in_array($k, $pks)) unset($conditions[$k]); switch($action) { case "insert": $options = array(); foreach ($attributes as $k => $v) if (in_array($k, $auto_increment_pks)) { $options["hard_coded_ai_pk"] = true; break; } if ($attributes && $DBDriver->insertObject($table, $attributes, $options)) { $pks_values = array(); foreach ($pks as $k) { if (in_array($k, $auto_increment_pks)) $pks_values[$k] = $DBDriver->getInsertedId(); else $pks_values[$k] = $attributes[$k]; } $status = json_encode($pks_values); } break; case "update": foreach ($attributes as $k => $v) foreach ($conditions as $ck => $cv) if ($k == $ck) { if ($v == $cv) unset($attributes[$k]); break 1; } $options = array(); foreach ($attributes as $k => $v) if (in_array($k, $auto_increment_pks)) { $options["hard_coded_ai_pk"] = true; break; } if ($attributes && $conditions && $DBDriver->updateObject($table, $attributes, $conditions, $options)) $status = true; break; case "delete": if ($conditions && $DBDriver->deleteObject($table, $conditions)) $status = true; break; case "get": if ($conditions) { $results = $DBDriver->findObjects($table, null, $conditions); $t = count($results); for ($i = 0; $i < $t; $i++) { $item = $results[$i]; foreach ($item as $field_name => $field_value) if (TextValidator::isBinary($field_value)) { $binary_fields[$i][$field_name] = true; $finfo = new finfo(FILEINFO_MIME_TYPE); $mime_type = $finfo->buffer($field_value); if (MimeTypeHandler::isImageMimeType($mime_type)) $new_field_value = "<img src=\"data:$mime_type;base64, " . base64_encode($field_value) . "\" />"; else if (!MimeTypeHandler::isTextMimeType($mime_type)) $new_field_value = "<a onClick=\"downloadFile(this, '$field_name')\">Download File</a>"; $results[$i][$field_name] = $new_field_value; } } $status = json_encode($results[0] ? $results[0] : array()); } break; } } } } } echo $status; die(); ?>
