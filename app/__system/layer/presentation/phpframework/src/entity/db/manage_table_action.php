<?php
/*
 * Copyright (c) 2007 PHPMyFrameWork - Joao Pinto
 * AUTHOR: Joao Paulo Lopes Pinto -- http://jplpinto.com
 * 
 * The use of this code must be allowed first by the creator Joao Pinto, since this is a private and proprietary code.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
include_once $EVC->getUtilPath("WorkFlowDBHandler"); $UserAuthenticationHandler->checkPresentationFileAuthentication($entity_path, "access"); $UserAuthenticationHandler->checkPresentationFileAuthentication($entity_path, "write"); $layer_bean_folder_name = $_GET["layer_bean_folder_name"]; $bean_name = $_GET["bean_name"]; $bean_file_name = $_GET["bean_file_name"]; $action = $_GET["action"]; $extra = $_GET["extra"]; $status = false; if ($bean_name && $action) { $layer_object_id = LAYER_PATH . "$layer_bean_folder_name/$bean_name"; $UserAuthenticationHandler->checkInnerFilePermissionAuthentication($layer_object_id, "layer", "access"); $WorkFlowDBHandler = new WorkFlowDBHandler($user_beans_folder_path, $user_global_variables_file_path); $DBDriver = $WorkFlowDBHandler->getBeanObject($bean_file_name, $bean_name); $diagram_tables_to_be_updated = array(); switch($action) { case "remove_table": $table = $_GET["table"]; $diagram_tables_to_be_updated[] = $table; if ($table) $sql = $DBDriver->getDropTableStatement($table); else $status = "Undefined table name!"; break; case "remove_attribute": $table = $_GET["table"]; $attribute = $_GET["attribute"]; if ($table && $attribute) { $sql = array(); $diagram_tables_to_be_updated[] = $table; $fks = $DBDriver->listForeignKeys($table); if ($fks) foreach ($fks as $fk) if ($fk["child_column"] == $attribute) $sql[] = $DBDriver->getDropTableForeignConstraintStatement($table, $fk["constraint_name"]); $sql[] = $DBDriver->getDropTableAttributeStatement($table, $attribute); } else $status = "Undefined table or attribute names!"; break; case "add_table": if ($extra) { $diagram_tables_to_be_updated[] = $extra; $php_to_db_column_types = $DBDriver->getPHPToDBColumnTypes(); $db_column_date_type = $php_to_db_column_types["timestamp"]; $db_column_simple_types = $DBDriver->getDBColumnSimpleTypes(); $db_column_simple_type_pk = $db_column_simple_types && $db_column_simple_types["simple_auto_primary_key"] ? $db_column_simple_types["simple_auto_primary_key"] : null; if (!$db_column_simple_type_pk) { $db_column_mandatory_length_types = $DBDriver->getDBColumnMandatoryLengthTypes(); $db_column_simple_type_pk = array( "type" => $php_to_db_column_types["bigint"], "length" => $db_column_mandatory_length_types["bigint"] ? $db_column_mandatory_length_types["bigint"] : 20, "null" => false, "primary_key" => true, "auto_increment" => true, "unsigned" => true, ); } $table_data = array( "table_name" => $extra, "attributes" => array( array( "name" => $extra . "_id", "type" => $db_column_simple_type_pk["type"] ? $db_column_simple_type_pk["type"] : "int", "length" => $db_column_simple_type_pk["length"] ? $db_column_simple_type_pk["length"] : 20, "primary_key" => empty($db_column_simple_type_pk) || $db_column_simple_type_pk["primary_key"] ? 1 : "", "auto_increment" => empty($db_column_simple_type_pk) || $db_column_simple_type_pk["auto_increment"] ? 1 : "", "unsigned" => empty($db_column_simple_type_pk) || $db_column_simple_type_pk["unsigned"] ? 1 : "", "null" => $db_column_simple_type_pk["null"] ? 1 : "", ), ), ); if ($db_column_date_type) { $table_data["attributes"][] = array( "name" => "created_date", "type" => $db_column_date_type, "null" => 1, "default" => "0000-00-00 00:00:00", ); $table_data["attributes"][] = array( "name" => "created_user_id", "type" => $db_column_simple_type_pk["type"] ? $db_column_simple_type_pk["type"] : "int", "length" => $db_column_simple_type_pk["length"] ? $db_column_simple_type_pk["length"] : 20, "unsigned" => empty($db_column_simple_type_pk) || $db_column_simple_type_pk["unsigned"] ? 1 : "", "null" => 1, ); $table_data["attributes"][] = array( "name" => "modified_date", "type" => $db_column_date_type, "null" => 1, "default" => "0000-00-00 00:00:00", ); $table_data["attributes"][] = array( "name" => "modified_user_id", "type" => $db_column_simple_type_pk["type"] ? $db_column_simple_type_pk["type"] : "int", "length" => $db_column_simple_type_pk["length"] ? $db_column_simple_type_pk["length"] : 20, "unsigned" => empty($db_column_simple_type_pk) || $db_column_simple_type_pk["unsigned"] ? 1 : "", "null" => 1, ); } $sql = $DBDriver->getCreateTableStatement($table_data); } else $status = "Undefined table name!"; break; case "add_attribute": $table = $_GET["table"]; if ($table && $extra) { $diagram_tables_to_be_updated[] = $table; $php_to_db_column_types = $DBDriver->getPHPToDBColumnTypes(); $db_column_default_values_by_type = $DBDriver->getDBColumnDefaultValuesByType(); $db_column_mandatory_length_types = $DBDriver->getDBColumnMandatoryLengthTypes(); $attribute_data = array( "name" => $extra, "type" => $php_to_db_column_types["varchar"], "length" => $db_column_mandatory_length_types["varchar"], "default" => $db_column_default_values_by_type["varchar"], "null" => 1, ); $db_column_simple_types = $DBDriver->getDBColumnSimpleTypes(); $found_props = null; foreach ($db_column_simple_types as $simple_type => $simple_props) if (is_array($simple_props) && !empty($simple_props["name"])) { $anl = strtolower($attribute_data["name"]); if (is_array($simple_props["name"])) { foreach ($simple_props["name"] as $n) { if (strpos(strtolower($n), $anl) !== false) { $found_props = $simple_props; break 2; } } if ($found_props) break 1; } else if (strpos(strtolower($simple_props["name"]), $anl) !== false) { $found_props = $simple_props; break 1; } } if ($found_props) foreach ($found_props as $prop_name => $prop_value) if ($prop_name != "name" && $prop_name != "label") { if ($prop_name == "type" && is_array($prop_value)) { if (!in_array($attribute_data["type"], $prop_value)) $attribute_data["type"] = $prop_value[0]; } else $attribute_data[$prop_name] = $prop_value; } $sql = $DBDriver->getAddTableAttributeStatement($table, $attribute_data); } else $status = "Undefined table!"; break; case "add_fk_attribute": $table = $_GET["table"]; $fk_table = $_GET["fk_table"]; $fk_attribute = $_GET["fk_attribute"]; $previous_attribute = $_GET["previous_attribute"]; $next_attribute = $_GET["next_attribute"]; $attribute_index = $_GET["attribute_index"]; if ($table && $fk_table) { $diagram_tables_to_be_updated[] = $table; $diagram_tables_to_be_updated[] = $fk_table; $fk_attrs = $DBDriver->listTableFields($fk_table); if ($fk_attrs) { $attrs_to_add = array(); if (!$fk_attribute) { foreach ($fk_attrs as $attr_name => $attr) if ($attr["primary_key"]) $attrs_to_add[$attr_name] = $attr; } else if ($fk_attrs[$fk_attribute]) $attrs_to_add[$fk_attribute] = $fk_attrs[$fk_attribute]; else $status = "Foreign attribute '$fk_attribute' does not exist anymore in table '$fk_table'!"; if (!empty($attrs_to_add)) { $attrs = $DBDriver->listTableFields($table); $fks = $DBDriver->listForeignKeys($table); $r = prepareSortingAttributeSettings($previous_attribute, $next_attribute, $attribute_index, $attrs); $is_first_attribute = $r["is_first_attribute"]; $previous_attribute = $r["previous_attribute"]; $sql_1 = array(); $sql_2 = array(); foreach ($attrs_to_add as $attr_name => $attr) { if (!$attrs[$attr_name]) { $attribute_data = array( "name" => $attr_name, "type" => $attr["type"], "length" => $attr["length"], "null" => 1, "unsigned" => $attr["unsigned"], "charset" => $attr["charset"], "collation" => $attr["collation"], ); if ($previous_attribute || $is_first_attribute) { if ($previous_attribute) $attribute_data["after"] = $previous_attribute; else if ($is_first_attribute) $attribute_data["first"] = true; $previous_attribute = $attr_name; $is_first_attribute = false; } $sql_1[] = $DBDriver->getAddTableAttributeStatement($table, $attribute_data); } $fk_exists = false; if ($fks) foreach ($fks as $fk) if ($fk["child_column"] == $attr_name && $fk["parent_table"] == $fk_table && $fk["parent_column"] == $attr_name) { $fk_exists = true; break; } if (!$fk_exists) { $fk = array( "child_column" => $attr_name, "parent_column" => $attr_name, "parent_table" => $fk_table, "constraint_name" => "fk_{$table}_{$fk_table}_{$attr_name}", ); $sql_2[] = $DBDriver->getAddTableForeignKeyStatement($table, $fk); } } $sql = array_merge($sql_1, $sql_2); } } else $status = "Table '$fk_table' does not have any attributes!"; } else $status = "Undefined table names!"; break; case "rename_table": $table = $_GET["table"]; if ($table && $extra) { $diagram_tables_to_be_updated[$table] = $extra; $sql = $DBDriver->getRenameTableStatement($table, $extra); } else $status = "Undefined table names!"; break; case "rename_attribute": $table = $_GET["table"]; $attribute = $_GET["attribute"]; if ($table && $attribute && $extra) { $diagram_tables_to_be_updated[] = $table; $attrs = $DBDriver->listTableFields($table); $attr = $attrs[$attribute]; if ($attr) $sql = $DBDriver->getRenameTableAttributeStatement($table, $attribute, $extra, $attr); } else $status = "Undefined table or attribute names!"; break; case "sort_attribute": $table = $_GET["table"]; $attribute = $_GET["attribute"]; $previous_attribute = $_GET["previous_attribute"]; $next_attribute = $_GET["next_attribute"]; $attribute_index = $_GET["attribute_index"]; if ($DBDriver->allowTableAttributeSorting()) { $diagram_tables_to_be_updated[] = $table; $attrs = $DBDriver->listTableFields($table); $attr = $attrs[$attribute]; if ($attr) { $r = prepareSortingAttributeSettings($previous_attribute, $next_attribute, $attribute_index, $attrs); $is_first_attribute = $r["is_first_attribute"]; $previous_attribute = $r["previous_attribute"]; if ($previous_attribute || $is_first_attribute) { if ($previous_attribute) $attr["after"] = $previous_attribute; else if ($is_first_attribute) $attr["first"] = true; } $sql = $DBDriver->getModifyTableAttributeStatement($table, $attr); } else $status = "Attribute '$attribute' does not exist anymore in table '$table'!"; } else $status = $DBDriver->getLabel() . "'s driver does not allow attributes sorting!"; break; case "set_primary_key": $table = $_GET["table"]; $attribute = $_GET["attribute"]; if ($table && $attribute) { $diagram_tables_to_be_updated[] = $table; $properties = json_decode($_GET["properties"], true); $primary_key = $properties["primary_key"]; $attrs = $DBDriver->listTableFields($table); $attr = $attrs[$attribute]; $is_different = $primary_key && !$attr["primary_key"] || !$primary_key && $attr["primary_key"]; if ($is_different) $sql = getPrimaryKeySQLs($DBDriver, $table, $attrs, $attribute, $primary_key); else $status = true; } else $status = "Undefined table or attribute names!"; break; case "set_null": case "set_type": $table = $_GET["table"]; $attribute = $_GET["attribute"]; if ($table && $attribute) { $diagram_tables_to_be_updated[] = $table; $properties = json_decode($_GET["properties"], true); $type = trim($properties["type"]); $attrs = $DBDriver->listTableFields($table); $attr = $attrs[$attribute]; if ($attr) { $is_different = false; $is_new_pk = false; if ($action == "set_type") { if (!$properties["length"]) { $db_column_mandatory_length_types = $DBDriver->getDBColumnMandatoryLengthTypes(); $properties["length"] = $db_column_mandatory_length_types[$type]; } $is_new_pk = $properties["primary_key"] && !$attr["primary_key"]; foreach ($properties as $k => $v) if (array_key_exists($k, $attr) && $attr[$k] != $v) { $attr[$k] = $v; $is_different = true; } } else if ($action == "set_null") { $type = $attr["type"]; $is_different = $properties["null"] && !$attr["null"] || !$properties["null"] && $attr["null"]; $attr["null"] = $properties["null"]; } if ($is_different) { if ($type) { $sql = array(); if ($is_new_pk) $sql = getPrimaryKeySQLs($DBDriver, $table, $attrs, $attribute, true); $sql[] = $DBDriver->getModifyTableAttributeStatement($table, $attr); } else $status = "Undefined attribute type!"; } else $status = true; } else $status = "Attribute does not exists in table!"; } else $status = "Undefined table or attribute names!"; break; } if ($sql) { $sql = is_array($sql) ? $sql : array($sql); $statements = ""; if ($sql) foreach ($sql as $statement) if (trim($statement)) $statements .= preg_replace("/;$/", "", trim($statement)) . ";\n"; if ($statements) { $status = $DBDriver->setSQL($statements); if ($status) { if ($diagram_tables_to_be_updated) { $tasks_file_path = WorkFlowTasksFileHandler::getDBDiagramTaskFilePath($workflow_paths_id, "db_diagram", $bean_name); $diagram_settings = WorkFlowDBHandler::getTaskDBDiagramSettings($tasks_file_path); if ($diagram_settings["sync_with_db_server"] || !array_key_exists("sync_with_db_server", $diagram_settings)) { $WorkFlowDBHandler = new WorkFlowDBHandler($user_beans_folder_path, $user_global_variables_file_path); if ($action == "remove_table") $WorkFlowDBHandler->removeFileTasksDBDiagramTables($tasks_file_path, $diagram_tables_to_be_updated); else if ($action == "rename_table") $WorkFlowDBHandler->renameFileTasksDBDiagramTables($tasks_file_path, $diagram_tables_to_be_updated); else $WorkFlowDBHandler->updateFileTasksDBDiagramTablesFromServer($bean_file_name, $bean_name, $tasks_file_path, $diagram_tables_to_be_updated); } } } else $status = array( "sql" => $sql, "error" => $DBDriver->error(), ); } else $status = "Undefined sql! Nothing to do!"; } else if (!$status) $status = "Undefined sql! Nothing to do!"; } $status = is_array($status) ? json_encode($status) : $status; echo $status; die(); function prepareSortingAttributeSettings($v39d607a9fc, $v3fee8710c4, $v39b9d937f4, $ped0a6251) { $pdcbd3117 = false; $v39d607a9fc = $v39d607a9fc && $ped0a6251[$v39d607a9fc] ? $v39d607a9fc : null; if (!$v39d607a9fc) { $v5a851b41dc = array_keys($ped0a6251); $pb2829e66 = array_flip($v5a851b41dc); if ($v3fee8710c4 && $ped0a6251[$v3fee8710c4]) { $v8a4df75785 = $pb2829e66[$v3fee8710c4]; $v8a4df75785--; if ($v8a4df75785 >= 0) $v39d607a9fc = $v5a851b41dc[$v8a4df75785]; else $pdcbd3117 = true; } else if ($v39b9d937f4 && $v5a851b41dc[$v39b9d937f4]) { $v8a4df75785 = $v39b9d937f4 - 1; if ($v8a4df75785 >= 0) $v39d607a9fc = $v5a851b41dc[$v8a4df75785]; else $pdcbd3117 = true; } } return array( "previous_attribute" => $v39d607a9fc, "is_first_attribute" => $pdcbd3117 ); } function getPrimaryKeySQLs($v87e4fe1181, $pc661dc6b, $ped0a6251, $v97915b9670, $v926576f1c1) { $pe2f18119 = array(); $v6d4f1c95e4 = array(); $v3c76382d93 = array(); if ($ped0a6251) foreach ($ped0a6251 as $v5e45ec9bb9 => $v1b0cfa478b) if ($v1b0cfa478b["primary_key"]) { $pe2f18119[$v5e45ec9bb9] = $v5e45ec9bb9; if ($v1b0cfa478b["auto_increment"]) $v6d4f1c95e4[$v5e45ec9bb9] = $v1b0cfa478b; } if ($v6d4f1c95e4) foreach ($v6d4f1c95e4 as $v5e45ec9bb9 => $v1b0cfa478b) { $v1b0cfa478b["auto_increment"] = false; $v1b0cfa478b["extra"] = preg_replace("/(^|\s)auto_increment($|\s)/i", "", $v1b0cfa478b["extra"]); $v3c76382d93[] = $v87e4fe1181->getModifyTableAttributeStatement($pc661dc6b, $v1b0cfa478b); } if ($pe2f18119) $v3c76382d93[] = $v87e4fe1181->getDropTablePrimaryKeysStatement($pc661dc6b); if ($v926576f1c1) $pe2f18119[$v97915b9670] = $v97915b9670; else unset($pe2f18119[$v97915b9670]); if (!empty($pe2f18119)) $v3c76382d93[] = $v87e4fe1181->getAddTablePrimaryKeysStatement($pc661dc6b, $pe2f18119); if ($v6d4f1c95e4) foreach ($v6d4f1c95e4 as $v5e45ec9bb9 => $v1b0cfa478b) if ($pe2f18119[$v5e45ec9bb9]) { $v1b0cfa478b["auto_increment"] = true; $v3c76382d93[] = $v87e4fe1181->getModifyTableAttributeStatement($pc661dc6b, $v1b0cfa478b); } return $v3c76382d93; } ?>
