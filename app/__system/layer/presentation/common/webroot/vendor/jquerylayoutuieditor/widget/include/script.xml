<?xml version="1.0" encoding="UTF-8"?>
<widget>
	<label>Script</label>
	<tag>script</tag>
	<settings>
		<create_widget_class>ScriptWidget</create_widget_class>
	</settings>
	<menu_widget><![CDATA[
		<i class="zmdi zmdi-language-javascript"></i>
	]]></menu_widget>
	<template_widget><![CDATA[
			<div class="script-file"></div>
			<pre class="script-content"></pre>
	]]></template_widget>
	<properties><![CDATA[
		<div class="form-group row settings-property src">
			<label class="col-md-4 col-sm-4 col-form-label">Src: </label>
			<input class="col-md-8 col-sm-8 form-control" name="src" />
		</div>
		<div class="form-group row settings-property language">
			<label class="col-md-4 col-sm-4 col-form-label">Language: </label>
			<input class="col-md-8 col-sm-8 form-control" name="language" value="javascript" />
		</div>
		<div class="form-group row settings-property type">
			<label class="col-md-4 col-sm-4 col-form-label">Type: </label>
			<input class="col-md-8 col-sm-8 form-control" name="type" value="text/javascript" />
		</div>
		<div class="form-group row settings-property content">
			<label class="col-md-12 col-form-label">Script: </label>
			<textarea class="col-md-12 form-control" name="content" rows="10"></textarea>
		</div>
	]]></properties>
	<menu_css><![CDATA[
		.layout_ui_editor > .menu-widgets .menu-widget.menu-widget-script,
		  body > .menu-widget.menu-widget-script.ui-draggable-dragging {
			display:inline-block;
			background:#000;
			border-radius:5px;
			border:1px outset #bbb;
			color:#666;
			overflow:hidden;
		}
		.layout_ui_editor > .menu-widgets .menu-widget.menu-widget-script i,
		  body > .menu-widget.menu-widget-script.ui-draggable-dragging i {
			font-size:450%;
		}
		
		.layout_ui_editor > .menu-settings.menu-settings-script li.group.settings-properties > ul .settings-property.content .form-control {
			text-align:left;
		}
		.layout_ui_editor > .menu-settings.menu-settings-script li.group.settings-general,
		  .layout_ui_editor > .menu-settings.menu-settings-script li.group.settings-dimension,
		  .layout_ui_editor > .menu-settings.menu-settings-script li.group.settings-typography,
		  .layout_ui_editor > .menu-settings.menu-settings-script li.group.settings-decorations,
		  .layout_ui_editor > .menu-settings.menu-settings-script li.group.settings-extra .settings-style {
			display:none;
		}
		
		.layout_ui_editor > .menu-layers .group.group-script > ul {
			display:none !important;
		}
	]]></menu_css>
	<template_css><![CDATA[
		.template-widget.template-widget-script {
			min-width:1em;
			min-height:1em;
			height:auto;
			margin:5px !important; /* !important is bc of the css when .borders is active */
			padding:5px !important; /* !important is bc of the css when .borders is active */
			background-image:none !important; /* !important is bc of the css when .borders is active */
			display:block;
			background:#000;
			border-radius:5px;
			border:1px outset #bbb !important; /* !important is bc of the css when .borders is active */
			color:#666;
			word-break:break-all;
		}
		body > .droppable.borders .template-widget.template-widget-script:before {
			content:"";
			border:0;
			display:none;
		}
		
		.template-widget.template-widget-script > .script-file {
			margin:0 !important; /* !important is bc of the css when .borders is active */
			padding:0 !important; /* !important is bc of the css when .borders is active */
			border:0 !important; /* !important is bc of the css when .borders is active */
			background-image:none !important; /* !important is bc of the css when .borders is active */
			background:rgba(255, 255, 255, .2);
		}
		.template-widget.template-widget-script > .script-file:empty:before {
			content:"the javascript file if apply...";
		}
		body > .droppable.borders .template-widget.template-widget-script > .script-file:before {
			content:"";
			border:0;
			display:none;
		}
		
		.template-widget.template-widget-script > .script-content {
			margin:0 !important; /* !important is bc of the css when .borders is active */
			padding:0 !important; /* !important is bc of the css when .borders is active */
			border:0 !important; /* !important is bc of the css when .borders is active */
			background-image:none !important; /* !important is bc of the css when .borders is active */
			display:block;
			color:inherit;
			font-size:inherit;
			font-family:inherit;
			overflow:auto;
			word-break:break-all;
		}
		.template-widget.template-widget-script > .script-content::-webkit-scrollbar {
			height:7px;
		}
		.template-widget.template-widget-script > .script-content:empty:before {
			content:"some javascript code if apply...";
		}
		body > .droppable.borders .template-widget.template-widget-script > .script-content:before {
			content:"";
			border:0;
			display:none;
		}
	]]></template_css>
	<menu_js><![CDATA[
		function ScriptWidget(ui_creator, menu_widget) {
			var me = this;
			var update_menu_settings_timeout_id = null;
			
			me.init = function() {
				menu_widget.attr({
					"data-on-parse-template-widget-html-func": ui_creator.obj_var_name + ".menu_widgets_objs.script.parseHtml",
					"data-on-clean-template-widget-html-func": ui_creator.obj_var_name + ".menu_widgets_objs.script.cleanHtml",
					"data-on-create-template-widget-func": ui_creator.obj_var_name + ".menu_widgets_objs.script.onCreateTemplateWidget",
				});
				
				menu_widget.children(".properties").attr({
					"data-on-after-save-settings-field-func": ui_creator.obj_var_name + ".menu_widgets_objs.script.saveSettingsField",
					"data-on-before-parse-widget-settings-func": ui_creator.obj_var_name + ".menu_widgets_objs.script.parseSettings",
				});
				
				menu_widget.removeAttr("data-on-clone-menu-widget-func");
			};
			
			me.parseHtml = function(html_element) {
				return html_element && html_element.nodeName.toLowerCase() == "script";
			};
			
			me.parseSettings = function(widget, widget_settings) {
				var src = widget.children(".script-file").html();
				src = src.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/<br>/g, "\n").replace(/&emsp;/g, "\t").replace(/&nbsp;/g, " ").replace(/&amp;/g, "&");
				
				var code = widget.children(".script-content").html();
				code = code.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/<br>/g, "\n").replace(/&emsp;/g, "\t").replace(/&nbsp;/g, " ").replace(/&amp;/g, "&");
				
				widget_settings["src"] = src;
				widget_settings["content"] = code;
				widget_settings["language"] = widget.data("widget-props-language");
				widget_settings["type"] = widget.data("widget-props-type");
			};
			
			me.cleanHtml = function(html_element) {
				var widget = $(html_element);
				
				var src = widget.children(".script-file").html();
				var code = widget.children(".script-content").html();
				var language = widget.data("widget-props-language");
				var type = widget.data("widget-props-type");
				
				src = src.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/<br>/g, "\n").replace(/&emsp;/g, "\t").replace(/&nbsp;/g, " ").replace(/&amp;/g, "&");
				code = code.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/<br>/g, "\n").replace(/&emsp;/g, "\t").replace(/&nbsp;/g, " ").replace(/&amp;/g, "&");
				
				//remove the weird chars from code, this is, in the php editor appears some red dots in the code, which means there some weird chars in the code.
				src = src.replace(/[^\x20-\x7E]/g, ''); //This will remove the end_lines too but the MyHtmlBeautify.beautify will add them again
				code = code.replace(/[^\x20-\x7E]/g, ''); //This will remove the end_lines too but the MyHtmlBeautify.beautify will add them again
				
				var html = '<' + 'script' + (src ? ' src="' + src + '"' : '') + (language ? ' language="' + language + '"' : '') + (type ? ' type="' + type + '"' : '') + '>' + code + '<' + '/script>'; //<script must be spearate otherwise gives error.
				
				html = MyHtmlBeautify.beautify(html); //beautify code
				
				return html;
			};
			
			me.onCreateTemplateWidget = function(widget, html_element) {
				html_element = $(html_element);
				var src = html_element.attr("src");
				var language = html_element.attr("language");
				var type = html_element.attr("type");
				var code = html_element.html();
				
				var file = widget.children(".script-file");
				var content = widget.children(".script-content");
				
				if (src && src != "")
					file.html( src.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\n/g, "<br/>").replace(/\t/g, "&emsp;").replace(/ /g, "&nbsp;") );
				
				if (code && code != "")
					content.html( code.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\n/g, "<br/>").replace(/\t/g, "&emsp;").replace(/ /g, "&nbsp;") );
				
				widget.data("widget-props-language", language);
				widget.data("widget-props-type", type);
				
				html_element.remove();
				
				//prepare .style-content editable
				widget.attr("contenteditable", "false");
				
				$([file[0], content[0]]).attr("contenteditable", "true")
					.keyup(function(e) {
						if (update_menu_settings_timeout_id)
							clearTimeout(update_menu_settings_timeout_id);
						
						update_menu_settings_timeout_id = setTimeout(function() {
							ui_creator.reloadMenuSettingsIfOpened(widget);
						}, 700);
					})
					.mouseup(function(e) {
						//prevents that the MyTextSelection open the inline menu
						e.preventDefault();
						e.stopPropagation();
						
						ui_creator.MyTextSelection.hideMenu(); //we need this in case the TextSelection menu is open.
					});
			};
			
			me.saveSettingsField = function(field, widget, status) {
				if (status) {
					field = $(field);
					var sprop = field.parent();
					var props = ui_creator.getMenuSettingsProperties( sprop.parent().closest(".settings-properties") );
					
					var file = widget.children(".script-file");
					var content = widget.children(".script-content");
					
					if (sprop.hasClass("src")) {
						if (props["src"] != "")
							file.html( ("" + props["src"]).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\n/g, "<br/>").replace(/\t/g, "&emsp;").replace(/ /g, "&nbsp;") );
						else
							file.html("");
					}
					else if (sprop.hasClass("content")) {
						if (props["content"] != "") 
							content.html( ("" + props["content"]).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\n/g, "<br/>").replace(/\t/g, "&emsp;").replace(/ /g, "&nbsp;") );
						else if (props["src"] != "")
							content.html("");
						else
							content.html("");
					}
					else //save the other props
						widget.data("widget-props-" + field.attr("name"), field.val());
				}
				
				return status;
			};
		}
	]]></menu_js>
</widget>
