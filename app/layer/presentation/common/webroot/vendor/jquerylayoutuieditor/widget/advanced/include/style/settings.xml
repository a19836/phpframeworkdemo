<?xml version="1.0" encoding="UTF-8"?>
<widget>
	<label>Style</label>
	<tag>style</tag>
	<settings>
		<create_widget_class>StyleWidget</create_widget_class>
	</settings>
	<menu_widget></menu_widget>
	<template_widget><![CDATA[
		<pre class="style-content"></pre>
	]]></template_widget>
	<properties><![CDATA[
		<div class="form-group row settings-property content">
			<label class="col-md-12 col-form-label">Style: </label>
			<textarea class="col-md-12 form-control" name="content" rows="10"></textarea>
		</div>
	]]></properties>
	<menu_css><![CDATA[
		.layout-ui-editor > .menu-widgets .menu-widget.menu-widget-style:before,
		  body > .menu-widget.menu-widget-style.ui-draggable-dragging:before {
			background-image:url('#widget_webroot_url#logo.svg');
		}
		
		.layout-ui-editor > .menu-settings.menu-settings-style li.group.settings-properties > ul .settings-property.content .form-control {
			text-align:left;
		}
		.layout-ui-editor > .menu-settings.menu-settings-style li.group.settings-widget,
		  .layout-ui-editor > .menu-settings.menu-settings-style li.group.settings-general,
		  .layout-ui-editor > .menu-settings.menu-settings-style li.group.settings-dimension,
		  .layout-ui-editor > .menu-settings.menu-settings-style li.group.settings-typography,
		  .layout-ui-editor > .menu-settings.menu-settings-style li.group.settings-decorations,
		  .layout-ui-editor > .menu-settings.menu-settings-style li.group.settings-events,
		  .layout-ui-editor > .menu-settings.menu-settings-style li.group.settings-extra .settings-style {
			display:none;
		}
		
		.layout-ui-editor > .menu-layers .group.group-style > ul {
			display:none !important;
		}
	]]></menu_css>
	<template_css><![CDATA[
		.template-widget.template-widget-style {
			min-width:1em;
			min-height:1em;
			height:auto;
			margin:5px !important; /* !important is bc of the css when .borders is active */
			padding:5px !important; /* !important is bc of the css when .borders is active */
			background-image:none !important; /* !important is bc of the css when .borders is active */
			display:block;
			background:#c0c0c0;
			color:#666;
			border-radius:5px;
			border:1px outset #bbb !important; /* !important is bc of the css when .borders is active */
			word-break:break-all;
			text-align:left;
		}
		body > .droppable.borders .template-widget.template-widget-style:before {
			content:"";
			border:0;
			display:none;
		}
		
		.template-widget.template-widget-style > .style-content {
			margin:0 !important; /* !important is bc of the css when .borders is active */
			padding:0 !important; /* !important is bc of the css when .borders is active */
			border:0 !important; /* !important is bc of the css when .borders is active */
			background-image:none !important; /* !important is bc of the css when .borders is active */
			display:block;
			color:inherit;
			font-size:inherit;
			font-family:inherit;
			overflow:auto;
			word-break:break-all;
		}
		.template-widget.template-widget-style > .style-content::-webkit-scrollbar {
			height:7px;
		}
		.template-widget.template-widget-style > .style-content:empty:before {
			content:"some css style...";
		}
		body > .droppable.borders .template-widget.template-widget-style > .style-content:before {
			content:"";
			border:0;
			display:none;
		}
	]]></template_css>
	<menu_js><![CDATA[
		function StyleWidget(ui_creator, menu_widget) {
			var me = this;
			var update_menu_settings_timeout_id = null;
			
			me.init = function() {
				menu_widget.attr({
					"data-on-parse-template-widget-html-func": ui_creator.obj_var_name + ".menu_widgets_objs.style.parseHtml",
					"data-on-clean-template-widget-html-func": ui_creator.obj_var_name + ".menu_widgets_objs.style.cleanHtml",
					"data-on-create-template-widget-func": ui_creator.obj_var_name + ".menu_widgets_objs.style.onCreateTemplateWidget",
				});
				
				menu_widget.children(".properties").attr({
					"data-on-open-settings-func": ui_creator.obj_var_name + ".menu_widgets_objs.style.onOpenWidgetSettings",
					"data-on-after-save-settings-field-func": ui_creator.obj_var_name + ".menu_widgets_objs.style.saveSettingsField",
					"data-on-before-parse-widget-settings-func": ui_creator.obj_var_name + ".menu_widgets_objs.style.parseSettings",
				});
				
				menu_widget.removeAttr("data-on-clone-menu-widget-func");
			};
			
			me.parseHtml = function(html_element) {
				return html_element && html_element.nodeName.toLowerCase() == "style";
				
				if (!html_element)
					return false;
				
				var node_name = html_element.nodeName.toLowerCase();
				
				//if html_element is a style node.
				if (node_name == "style")
					return true;
				
				//Otherwise if html_element was previously a template-widget-style node.
				//Note that if we call the recreateWidgetChildren or convertHtmlElementToWidget methods for this widget.parent(), when the html_element is already a widget (created previously), we need to be prepared to parse it and re-convert this html_element (which is already a widget) into a new widget. So we need to detect this cases with the following code:
				var j_html_element = $(html_element);
				
				if (node_name == "div" && j_html_element.hasClass("template-widget-style") && j_html_element.data("data-tag") == "style")
					return true;
				else if (node_name == "div" && j_html_element.children("pre.style-content").length == 1 && j_html_element.children().not("style").length == 1)
					return true;
				
				return false;
			};
			
			me.parseSettings = function(widget, widget_settings) {
				widget_settings["content"] = widget.children("style").html();
			};
			
			me.cleanHtml = function(html_element) {
				var widget = $(html_element);
				var code = widget.children(".style-content").html();
				
				code = getCleanedHtmlCode(code);
				
				var html = '<style>' + code + '</style>';
				
				if (ui_creator.options.beautify)
					html = MyHtmlBeautify.beautify(html); //beautify code
				
				return html;
				
				//var style = $(html_element).children("style");
				//return ui_creator.getCleanedHtmlElement( style[0] );
			};
			
			me.onCreateTemplateWidget = function(widget, html_element) {
				var style_content = widget.children(".style-content");
				
				if (html_element) {
					var node_name = html_element.nodeName.toLowerCase();
					var j_html_element = $(html_element);
					var code = "";
					
					//if html_element was previously a template-widget-style node.
					//Note that if we call the recreateWidgetChildren or convertHtmlElementToWidget methods for this widget.parent(), when the html_element is already a widget (created previously), we need to be prepared to parse it and re-convert this html_element (which is already a widget) into a new widget. So we need to detect this cases with the following code:
					if (node_name == "div" && (
						(j_html_element.hasClass("template-widget-style") && j_html_element.data("data-tag") == "style")
						|| (j_html_element.children("pre.style-content").length == 1 && j_html_element.children().not("style").length == 1)
					)) {
						var code = j_html_element.children(".style-content").html();
						
						//append the style node to the widget so then we can remove the j_html_element
						var style = j_html_element.children("style");
						widget.append(style);
						j_html_element.remove();
						
						//set the new html_element to the style node
						html_element = style[0];
						
						//check if properties are open for the old widget and if yes, open the properties for the new widget
						ui_creator.reloadOpenMenuSettingsIfOpenedWithOldWidget(j_html_element, widget, 1000);
					}
					else {
						code = $(html_element).html();
						
						if (code && code != "") {
							var css_code = code;
							
							//prepare prefix tabs by removing the tabs that don't matter
							var m = code.match(/^\r?\n(\s+)/);
							
							if (m && m[1]) {
								var prefix = m[1];
								var regex = new RegExp("(\r?\n)" + prefix, "g");
								code = code.replace(regex, "$1");
								
								widget.data("prefix", prefix);
							}
							
							//remove first and last white spaces - trim code
							code = code.replace(/^\s+/g, "").replace(/\s+$/g, "");
							
							//prepare code
							code = code.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\n/g, "<br/>").replace(/\t/g, "&emsp;").replace(/ /g, "&nbsp;");
							
							//replace \u2003 which is a weird white space char that is created when we call 'pre.html()' function and it converts the \t to this char.
							code = code.replace(/\u2003/g, "\t");
							
							//convert url vars to real urls in css_code in html_element, this is, parse css_code in case it contains the $project_url_prefix or $project_common_url_prefix
							if (typeof ui_creator.options.on_convert_project_url_php_vars_to_real_values_func == "function") {
								var new_css_code = ui_creator.options.on_convert_project_url_php_vars_to_real_values_func(css_code);
								
								if (css_code != new_css_code)
									$(html_element).html(new_css_code);
							}
						}
					}
					
					style_content.html(code);
				}
				
				if (html_element)
					widget.append(html_element);
				else
					widget.append( document.createElement("style") );
				
				//prepare .style-content editable
				widget.attr("contenteditable", "false");
				var style = widget.children("style");
				
				style_content.attr("contenteditable", "true")
					.keydown(function(e) {
						e.stopPropagation(); //otherwise if the user press ctrl+v to paste a string, it will call the ui_creator.TextSelection.options.on_create_node function which then will convert this widget into a normal html block widget, which will mess the layout.
						
						//avoids enter key to create unespected html elements. Only shift+enter keys are allowed.
						var is_shift = window.event ? window.event.shiftKey : e.shiftKey;
						
						if (e.keyCode === 13 && !is_shift) {
							ui_creator.showError("Please use Shift-enter keys instead...");
							return false;
						}
					})
					.keyup(function(e) {
						var code = style_content.html();
						code = getCleanedHtmlCode(code);
						
						style.html(code);
						
						if (update_menu_settings_timeout_id)
							clearTimeout(update_menu_settings_timeout_id);
						
						update_menu_settings_timeout_id = setTimeout(function() {
							ui_creator.reloadMenuSettingsIfOpened(widget);
						}, 700);
					})
					.mouseup(function(e) {
						//prevents that the TextSelection open the inline menu
						e.preventDefault();
						e.stopPropagation();
						
						ui_creator.TextSelection.hideMenu(); //we need this in case the TextSelection menu is open.
					});
				
				//only allows paste with text, discarding the html. Html is not allowed here.
				ui_creator.setPasteCallbackForOnlyText(style_content);
			};
			
			me.onOpenWidgetSettings = function(widget, menu_settings) {
				ui_creator.addMenuSettingsContextMenu( menu_settings.find(".settings-properties textarea") );
			};
			
			me.saveSettingsField = function(field, widget, status) {
				if (status) {
					field = $(field);
					var field_value = field.val();
					var sprop = field.parent();
					
					if (sprop.hasClass("content")) {
						var content = widget.children(".style-content");
						var style = widget.children("style");
						
						if (field_value != "") {
							content.html( ("" + field_value).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\n/g, "<br/>").replace(/\t/g, "&emsp;").replace(/ /g, "&nbsp;") );
							style.html(field_value);
						}
						else { 
							content.html("");
							style.html("");
						}
					}
				}
				
				return status;
			};
			
			function getCleanedHtmlCode(code) {
				code = code.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/<br>/g, "\n").replace(/&emsp;/g, "\t").replace(/&nbsp;/g, " ").replace(/&amp;/g, "&");
				
				/* DEPRECATED bc the code below will remove all end lines and then execute the MyHtmlBeautify.beautify
				//add first and last end line removed from trim code above
				if (code)
					code = code.replace(/^([^\n])/, "\n$1").replace(/([^\n])$/, "$1\n");
				
				//prepare prefix tabs by adding them
				var prefix = widget.data("prefix");
				
				if (prefix)
					code = code.replace(/\n/g, "\n" + prefix);
				*/
				
				//replace \u2003 which is a weird white space char that is created when we call 'pre.html()' function and it converts the \t to this char.
				code = code.replace(/\u2003/g, "\t"); 
				
				//remove the weird chars from code, this is, in the php editor appears some red dots in the code, which means there some weird chars in the code.
				var eol_control_var = "#" + (Math.random() * 10000000) + "__SYSTEM_EOL_" + (Math.random() * 10000000) + "#";
				code = code.replace(/\n/g, eol_control_var);
				
				code = code.replace(/[^\x20-\x7E]/g, ''); //This will remove the end_lines too but I save them through the eol_control_var and then the MyHtmlBeautify.beautify will add them again
				
				var regex = new RegExp(eol_control_var, "g");
				code = code.replace(regex, "\n");
				
				return code;
			}
		}
	]]></menu_js>
</widget>
