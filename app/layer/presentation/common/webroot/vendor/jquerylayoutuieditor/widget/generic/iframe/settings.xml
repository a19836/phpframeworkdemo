<?xml version="1.0" encoding="UTF-8"?>
<widget>
	<label>Iframe</label>
	<tag>iframe</tag>
	<settings>
		<resizable>1</resizable>
		<template_node_name>iframe</template_node_name>
		<create_widget_class>IframeWidget</create_widget_class>
	</settings>
	<menu_widget></menu_widget>
	<template_widget></template_widget>
	<properties><![CDATA[
		<div class="form-group row settings-property src">
			<label class="col-md-4 col-sm-5 col-form-label">Source: </label>
			<input class="col-md-8 col-sm-7 form-control" name="src" />
		</div>
	]]></properties>
	<menu_css><![CDATA[
		.layout-ui-editor > .menu-widgets .menu-widget.menu-widget-iframe:before,
		  body > .menu-widget.menu-widget-iframe.ui-draggable-dragging:before {
			background-image:url('#widget_webroot_url#logo.svg');
		}
		
		.layout-ui-editor > .template-widgets .widget-header.widget-header-iframe .options .option.toggle {
			display:none;
		}
		
		.layout-ui-editor > .menu-settings.menu-settings-iframe > .settings-properties .src.with-search-icon input {
			padding-right:20px;
		}
		.layout-ui-editor > .menu-settings.menu-settings-iframe > .settings-properties .src .search {
			display:inline-block;
			float:none;
			clear:both;
			position:absolute;
			right:10px;
			margin:8px 0 0;
			background:none;
			cursor:pointer;
		}
	]]></menu_css>
	<template_css><![CDATA[
		/* bc of the resize, otherwise will be very dificult to resize this element, bc the focus will be inside of the iframe. */
		.template-widget.template-widget-iframe {
			border:10px solid #f7f7f7; 
		}
		.template-widget.template-widget-iframe.widget-active {
			border:10px solid #f7f7f7 !important;
		}
	]]></template_css>
	<menu_js><![CDATA[
		function IframeWidget(ui_creator, menu_widget) {
			var me = this;
			
			me.init = function() {
				menu_widget.attr({
					"data-on-parse-template-widget-html-func": ui_creator.obj_var_name + ".menu_widgets_objs.iframe.parseHtml",
					"data-on-clean-template-widget-html-func": ui_creator.obj_var_name + ".menu_widgets_objs.iframe.cleanHtml",
					"data-on-create-template-widget-func": ui_creator.obj_var_name + ".menu_widgets_objs.iframe.onCreateTemplateWidget",
				});
				
				menu_widget.children(".properties").attr({
					"data-on-open-settings-func": ui_creator.obj_var_name + ".menu_widgets_objs.iframe.onOpenWidgetSettings",
					"data-on-after-save-settings-field-func": ui_creator.obj_var_name + ".menu_widgets_objs.iframe.saveSettingsField",
					"data-on-before-parse-widget-settings-func": ui_creator.obj_var_name + ".menu_widgets_objs.iframe.parseSettings",
				});
			};
			
			me.parseHtml = function(html_element) {
				return html_element && html_element.nodeName.toLowerCase() == "iframe";
			};
			
			me.cleanHtml = function(html_element) {
				var clone = ui_creator.cloneHtmlElementBeforeCleanIt(html_element);
				
				//parse src to convert url to vars: $project_url_prefix or $project_common_url_prefix
				var src = clone.attr("src");
				
				if (src && typeof ui_creator.options.on_convert_project_url_real_values_to_php_vars_func == "function") {
					src = ui_creator.options.on_convert_project_url_real_values_to_php_vars_func(src);
					clone.attr("src", src);
				}
				
				var html = ui_creator.getCleanedHtmlElement(clone[0]);
				
				clone.remove();
				
				return html;
			};
			
			me.onOpenWidgetSettings = function(widget, menu_settings) {
				if (typeof ui_creator.options.on_choose_page_url_func == "function") {
					var icon = $('<span class="zmdi zmdi-search-in-file search"></span>');
					icon.on("click", function() {
						ui_creator.options.on_choose_page_url_func(this);
					});
					menu_settings.find(" > .settings-properties .settings-property.src").addClass("with-search-icon").append(icon);
				}
				
				ui_creator.addMenuSettingsContextMenu( menu_settings.find(" > .settings-properties input") );
			};
			
			me.onCreateTemplateWidget = function(widget, html_element) {
				if (html_element) {
					var src = widget.attr("src");
					
					//parse src in case it contains the $project_url_prefix or $project_common_url_prefix
					if (src && typeof ui_creator.options.on_convert_project_url_php_vars_to_real_values_func == "function") {
						src = ui_creator.options.on_convert_project_url_php_vars_to_real_values_func(src);
						widget.attr("src", src);
					}
				}
			};
			
			me.parseSettings = function(widget, widget_settings) {
				widget_settings["src"] = widget.attr("src");
				
				//parse src to convert url to vars: $project_url_prefix or $project_common_url_prefix
				if (widget_settings["src"] && typeof ui_creator.options.on_convert_project_url_real_values_to_php_vars_func == "function")
					widget_settings["src"] = ui_creator.options.on_convert_project_url_real_values_to_php_vars_func(widget_settings["src"]);
			};
			
			me.saveSettingsField = function(field, widget, status) {
				if (status) {
					field = $(field);
					var field_value = field.val();
					var sprop = field.parent();
					
					if (sprop.hasClass("src")) {
						if (field_value != "")  {
							//parse src in case it contains the $project_url_prefix or $project_common_url_prefix
							field_value = typeof ui_creator.options.on_convert_project_url_php_vars_to_real_values_func == "function" ? ui_creator.options.on_convert_project_url_php_vars_to_real_values_func(field_value) : field_value;
							
							widget.attr("src", field_value);
						}
						else 
							widget.removeAttr("src");
					}
				}
				
				return status;
			};
		}
	]]></menu_js>
</widget>
