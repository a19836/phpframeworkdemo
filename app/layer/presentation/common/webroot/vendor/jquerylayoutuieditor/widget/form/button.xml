<?xml version="1.0" encoding="UTF-8"?>
<widget>
	<label>Button</label>
	<tag>button</tag>
	<settings>
		<resizable>1</resizable>
		<template_node_name>button</template_node_name>
		<create_widget_class>ButtonWidget</create_widget_class>
	</settings>
	<menu_widget></menu_widget>
	<template_widget></template_widget>
	<properties><![CDATA[
		<div class="form-group row settings-property type">
			<label class="col-md-4 col-sm-5 col-form-label">Type: </label>
			<select class="col-md-8 col-sm-7 form-control" name="type">
				<option value="">Button</option>
				<option value="submit">Submit</option>
				<option value="button">Input Button</option>
				<option value="image">Image</option>
				<option value="reset">Reset</option>
			</select>
		</div>
		<div class="form-group row settings-property name">
			<label class="col-md-4 col-sm-5 col-form-label">Name: </label>
			<input class="col-md-8 col-sm-7 form-control" name="name" />
		</div>
		<div class="form-group row settings-property value">
			<label class="col-md-4 col-sm-5 col-form-label">Value: </label>
			<input class="col-md-8 col-sm-7 form-control" name="value" />
		</div>
	]]></properties>
	<menu_css><![CDATA[
		.layout_ui_editor > .menu-widgets .menu-widget.menu-widget-button,
		  body > .menu-widget.menu-widget-button.ui-draggable-dragging {
			height:1.5em;
			display:inline-block;
			border-radius:5px;
			border:1px solid #bbb;
			color:#333;
			overflow:hidden;
			
			background: #bbb; /* Old browsers */
			background: -moz-linear-gradient(top, #fff 0%, #ddd 100%); /* FF3.6-15 */
			background: -webkit-linear-gradient(top, #fff 0%,#ddd 100%); /* Chrome10-25,Safari5.1-6 */
			background: linear-gradient(to bottom, #fff 0%,#ddd 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
			filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff', endColorstr='#ddd', GradientType=0); /* IE6-9 */
		}
		
		.layout_ui_editor > .template-widgets .widget-header.widget-header-button {
			border-radius:0 5px 5px 0;
		}
		.layout_ui_editor > .template-widgets .widget-header.widget-header-button .options .option.toggle {
			display:none;
		}
	]]></menu_css>
	<menu_js><![CDATA[
		function ButtonWidget(ui_creator, menu_widget) {
			var me = this;
			var available_input_types = ["submit", "button", "image", "reset"];
			
			me.init = function() {
				menu_widget.attr({
					"data-on-parse-template-widget-html-func": ui_creator.obj_var_name + ".menu_widgets_objs.button.parseHtml",
					"data-on-clean-template-widget-html-func": ui_creator.obj_var_name + ".menu_widgets_objs.button.cleanHtml",
					"data-on-create-template-widget-func": ui_creator.obj_var_name + ".menu_widgets_objs.button.onCreateTemplateWidget",
				});
				
				menu_widget.children(".properties").attr({
					"data-on-open-settings-func": ui_creator.obj_var_name + ".menu_widgets_objs.button.openSettings",
					"data-on-after-save-settings-field-func": ui_creator.obj_var_name + ".menu_widgets_objs.button.saveSettingsField",
					"data-on-before-parse-widget-settings-func": ui_creator.obj_var_name + ".menu_widgets_objs.button.parseSettings",
				});
			};
			
			me.parseHtml = function(html_element) {
				var node_name = html_element ? html_element.nodeName.toLowerCase() : "";
				
				if (node_name == "button" || (node_name == "input" && available_input_types.indexOf(("" + html_element.getAttribute("type")).toLowerCase()) != -1)) 
					return {
						droppable: node_name == "button" ? $(html_element) : null,
					};
			};
			
			me.parseSettings = function(widget, widget_settings) {
				var node_name = widget[0] ? widget[0].nodeName.toLowerCase() : "";
				var type = ("" + widget.attr("type")).toLowerCase();
				
				widget_settings["type"] = node_name == "button" ? "" : type;
				widget_settings["name"] = widget.attr("name");
				widget_settings["value"] = widget.attr("value");
			};
			
			me.cleanHtml = function(html_element) {
				if (html_element.nodeName.toLowerCase() == "button" && $(html_element).find(".template-widget").length == 0) {
					var clone = ui_creator.cloneHtmlElementBeforeCleanIt(html_element);
					clone[0].innerHTML = '';
					
					var html = ui_creator.getCleanedHtmlElement(clone[0]);
					var text = html_element.innerHTML;
					
					return html.replace('</button>', text + '</button>');
				}
				
				return ui_creator.getCleanedHtmlElement(html_element);
			};
			
			me.onCreateTemplateWidget = function(widget, html_element) {
				//widget.attr("disabled", "disabled");
				
				if (!html_element) 
					widget.append("Button");
			};
			
			me.openSettings = function(widget, settings) {
				//change the node name when type is changed
				settings.find(" > .settings-properties > ul > .type select").change(function() {
					ui_creator.saveMenuSettingsField(this);
				});
			};
			
			me.saveSettingsField = function(field, widget, status) {
				if (status) {
					field = $(field);
					var field_value = field.val();
					var sprop = field.parent();
					var node_name = widget[0].nodeName.toLowerCase();
					
					if (sprop.hasClass("type")) {
						var new_node_name = field_value != "" ? "input" : "button";
					
						if (node_name != new_node_name) {
							widget = ui_creator.changeWidgetNodeName(widget, new_node_name);
							
							if (field_value != "")
								widget[0].type = field_value;
						}
					}
					else if (sprop.hasClass("name")) {
						if (field_value != "")
							widget.attr("name", field_value);
						else
							widget.removeAttr("name");
					}
					else if (sprop.hasClass("value")) {
						var v = field_value != "" ? field_value : "";
						
						if (node_name == "button")
							widget.html(v);
						else if (node_name == "image")
							widget.attr("src", v);
						else
							widget.attr("value", v).val(v);
					}
				}
				
				return status;
			};
		}
	]]></menu_js>
</widget>
