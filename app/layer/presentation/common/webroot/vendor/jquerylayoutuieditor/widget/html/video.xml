<?xml version="1.0" encoding="UTF-8"?>
<widget>
	<label>Video</label>
	<tag>video</tag>
	<settings>
		<resizable>1</resizable>
		<template_node_name>video</template_node_name>
		<create_widget_class>VideoWidget</create_widget_class>
	</settings>
	<menu_widget><![CDATA[
		<i class="zmdi zmdi-videocam"></i>
	]]></menu_widget>
	<template_widget></template_widget>
	<properties><![CDATA[
		<div class="form-group row settings-property src">
			<label class="col-md-4 col-sm-5 col-form-label">Source: </label>
			<input class="col-md-8 col-sm-7 form-control" name="src" />
		</div>
		<div class="form-group row settings-property controls">
			<label class="col-md-4 col-sm-5 col-form-label">Controls: </label>
			<input type="checkbox" name="controls" value="1" />
		</div>
		<div class="form-group row settings-property autoplay">
			<label class="col-md-4 col-sm-5 col-form-label">Autoplay: </label>
			<input type="checkbox" name="autoplay" value="1" />
		</div>
	]]></properties>
	<menu_css><![CDATA[
		.layout_ui_editor > .menu-widgets .menu-widget.menu-widget-video,
		  body > .menu-widget.menu-widget-video.ui-draggable-dragging {
			height:auto;
			display:inline-block;
			border-radius:5px;
			border:0;
			color:#fff;
			overflow:hidden;
		}
		.layout_ui_editor > .menu-widgets .menu-widget.menu-widget-video i,
		  body > .menu-widget.menu-widget-video.ui-draggable-dragging i {
			font-size:300%;
		}
		
		.layout_ui_editor > .template-widgets .widget-header.widget-header-video {
			border-radius:0 5px 5px 0;
		}
		.layout_ui_editor > .template-widgets .widget-header.widget-header-video .options .option.toggle {
			display:none;
		}
	]]></menu_css>
	<menu_js><![CDATA[
		function VideoWidget(ui_creator, menu_widget) {
			var me = this;
			var default_src = ui_creator.getLayoutUIEditorFolderPath() + "widget/html/img/video.webm";
			
			me.init = function() {
				menu_widget.attr({
					"data-on-parse-template-widget-html-func": ui_creator.obj_var_name + ".menu_widgets_objs.video.parseHtml",
					"data-on-create-template-widget-func": ui_creator.obj_var_name + ".menu_widgets_objs.video.onCreateTemplateWidget",
				});
				
				menu_widget.children(".properties").attr({
					"data-on-after-save-settings-field-func": ui_creator.obj_var_name + ".menu_widgets_objs.video.saveSettingsField",
					"data-on-before-parse-widget-settings-func": ui_creator.obj_var_name + ".menu_widgets_objs.video.parseSettings",
				});
			};
			
			me.parseHtml = function(html_element) {
				return html_element && html_element.nodeName.toLowerCase() == "video";
			};
			
			me.onCreateTemplateWidget = function(widget, html_element) {
				if (!html_element) 
					widget.attr("src", default_src).attr("allowfullscreen", "allowfullscreen").attr("controls", "controls");
			};
			
			me.parseSettings = function(widget, widget_settings) {
				widget_settings["src"] = widget.attr("src");
				widget_settings["controls"] = widget.attr("controls") ? 1 : 0;
				widget_settings["autoplay"] = widget.attr("autoplay") ? 1 : 0;
			};
			
			me.saveSettingsField = function(field, widget, status) {
				if (status) {
					field = $(field);
					var field_value = field.val();
					var sprop = field.parent();
					
					if (sprop.hasClass("controls")) {
						if (field.is(":checked"))
							widget.attr("controls", "controls");
						else
							widget.removeAttr("controls");
					}
					else if (sprop.hasClass("autoplay")) {
						if (field.is(":checked"))
							widget.attr("autoplay", "autoplay");
						else
							widget.removeAttr("autoplay");
					}
					else if (sprop.hasClass("src")) {
						field_value = field_value.replace(/^\s+/g, "").replace(/\s+$/g, "");//trim url
						
						if (field_value != "")
							widget.attr("src", field_value);
						else {
							alert("Video src cannot be empty!");
							field.val( widget.attr("src") );
						}
					}
				}
				
				return status;
			};
		}
	]]></menu_js>
</widget>
