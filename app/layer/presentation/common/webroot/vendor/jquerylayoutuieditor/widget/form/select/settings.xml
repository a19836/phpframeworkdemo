<?xml version="1.0" encoding="UTF-8"?>
<widget>
	<label>Dropdown</label>
	<tag>select</tag>
	<settings>
		<resizable>1</resizable>
		<template_node_name>select</template_node_name>
		<create_widget_class>SelectWidget</create_widget_class>
	</settings>
	<menu_widget></menu_widget>
	<template_widget></template_widget>
	<properties><![CDATA[
		<div class="form-group settings-property is-multiple">
			<label class="col-md-4 col-sm-5 col-5 col-form-label">Is Multiple: </label>
			<input type="checkbox" name="is-multiple" value="1" />
		</div>
		<div class="form-group row settings-property name">
			<label class="col-md-4 col-sm-5 col-form-label">Name: </label>
			<input class="col-md-8 col-sm-7 form-control" name="name" />
		</div>
		<div class="form-group row dd settings-property options">
			<label class="col-form-label">
				Options: 
				<span class="zmdi zmdi-circle-o reset-option-selection" title="Clear options selection"></span>
				<span class="zmdi zmdi-plus-circle add-option" title="Add new option"></span>
			</label>
			<ul class="dd-list" options-index="0">
				<div class="dd-empty empty-options">To add a new option click in the plus icon above...</div>
			</ul>
		</div>
	]]></properties>
	<menu_css><![CDATA[
		.layout-ui-editor > .menu-widgets .menu-widget.menu-widget-select:before,
		  body > .menu-widget.menu-widget-select.ui-draggable-dragging:before {
			background-image:url('#widget_webroot_url#logo.svg');
		}
		
		.layout-ui-editor > .template-widgets .widget-header.widget-header-select .options .option.toggle {
			display:none;
		}
		
		.layout-ui-editor > .menu-settings.menu-settings-select li.group.settings-properties > ul .options {
			margin-bottom:0;
			max-width:none;
		}
		.layout-ui-editor > .menu-settings.menu-settings-select li.group.settings-properties > ul .options > .col-form-label {
			max-width:none;
			display:block;
			padding-right:0;
		}
		.layout-ui-editor > .menu-settings.menu-settings-select li.group.settings-properties > ul .options > .col-form-label > .reset-option-selection {
			margin:2px 5px 0 0;
			float:left;
			cursor:pointer;
		}
		.layout-ui-editor > .menu-settings.menu-settings-select li.group.settings-properties > ul .options > .col-form-label > .add-option {
			margin:3px 0 0 10px;
			float:right;
			cursor:pointer;
		}
		.layout-ui-editor > .menu-settings.menu-settings-select li.group.settings-properties > ul .options > .dd-empty {
			display:none;
		}
		.layout-ui-editor > .menu-settings.menu-settings-select li.group.settings-properties > ul .options > ul {
			display:block;
			width:100%;
		}
		.layout-ui-editor > .menu-settings.menu-settings-select li.group.settings-properties > ul .options > ul > .empty-options {
			text-align:center;
			padding-top:2.5em;
		}
		.layout-ui-editor > .menu-settings.menu-settings-select li.group.settings-properties > ul .options > ul li,
		   .settings-properties-select-options-li li {
			min-height:30px;
			margin:.5em 0;
			text-align:right;
			display:block;
		}
		.layout-ui-editor > .menu-settings.menu-settings-select li.group.settings-properties > ul .options > ul li > .dd-collapse,
		   .settings-properties-select-options-li .dd-collapse,
		   .layout-ui-editor > .menu-settings.menu-settings-select li.group.settings-properties > ul .options > ul li > .dd-expand,
		   .settings-properties-select-options-li .dd-expand {
			width:15px;
			height:30px;
			line-height:30px;
			margin:0;
			visibility:hidden;
			background:none;
			border:none;
		}
		.layout-ui-editor > .menu-settings.menu-settings-select li.group.settings-properties > ul .options > ul li.option-group > .dd-collapse,
		   .settings-properties-select-options-li li.option-group > .dd-collapse,
		   .layout-ui-editor > .menu-settings.menu-settings-select li.group.settings-properties > ul .options > ul li.option-group > .dd-expand,
		   .settings-properties-select-options-li li.option-group > .dd-expand {
			visibility:visible;
		}
		.layout-ui-editor > .menu-settings.menu-settings-select li.group.settings-properties > ul .options > ul li > .select-option,
		   .settings-properties-select-options-li .select-option {
			position:absolute;
			margin-top:auto;
			padding:5px 0;
		}
		
		.layout-ui-editor > .menu-settings.menu-settings-select li.group.settings-properties > ul .options > ul li > .select-option input,
		   .settings-properties-select-options-li .select-option input {
		   	margin-left:2px;
		   	vertical-align:middle;
		}
		.layout-ui-editor > .menu-settings.menu-settings-select li.group.settings-properties > ul .options > ul li > .dd-handle,
		   .settings-properties-select-options-li .dd-handle {
			position:absolute;
			margin:0 0 0 32px;
			padding:7px 0;
			border:none;
			background:none;
			color:white;
			cursor:move;
		}
		.layout-ui-editor > .menu-settings.menu-settings-select li.group.settings-properties > ul .options > ul li > .option-value,
		   .settings-properties-select-options-li .option-value,
		   .layout-ui-editor > .menu-settings.menu-settings-select li.group.settings-properties > ul .options > ul li > .option-label,
		   .settings-properties-select-options-li .option-label {
			width:30%;
			width:calc((100% - 80px) / 2);
			display:inline-block;
		}
		.layout-ui-editor > .menu-settings.menu-settings-select li.group.settings-properties > ul .options > ul li > .remove-option,
		   .settings-properties-select-options-li .remove-option {
			width:20px;
			padding:7px 0;
			display:inline-block;
			cursor:pointer;
			vertical-align:top;
		}
		.layout-ui-editor > .menu-settings.menu-settings-select li.group.settings-properties > ul .options > ul li.option-group:not(.dd-collapsed),
		   .settings-properties-select-options-li li.option-group:not(.dd-collapsed) {
			margin-bottom:0;   
		}
		.layout-ui-editor > .menu-settings.menu-settings-select li.group.settings-properties > ul .options > ul li.option-group > .select-option,
		   .settings-properties-select-options-li li.option-group > .select-option,
		   .layout-ui-editor > .menu-settings.menu-settings-select li.group.settings-properties > ul .options > ul li.option-group > .option-value,
		   .settings-properties-select-options-li li.option-group > .option-value {
			display:none;
		}
		.layout-ui-editor > .menu-settings.menu-settings-select li.group.settings-properties > ul .options > ul li.option-group > .option-label,
		   .settings-properties-select-options-li li.option-group > .option-label {
			width:calc(100% - 80px);
		}
	]]></menu_css>
	<template_css><![CDATA[
		.template-widget.template-widget-select.widget-active {
			border: 10px solid #f7f7f7; /* bc of the resize, otherwise will be very dificult to resize the select bc the select text takes precendent and the resize event for the select won't fire. */
		}
	]]></template_css>
	<menu_js><![CDATA[
		function SelectWidget(ui_creator, menu_widget) {
			var me = this;
			
			me.init = function() {
				menu_widget.attr({
					"data-on-parse-template-widget-html-func": ui_creator.obj_var_name + ".menu_widgets_objs.select.parseHtml",
					"data-on-clean-template-widget-html-func": ui_creator.obj_var_name + ".menu_widgets_objs.select.cleanHtml",
					"data-on-create-template-widget-func": ui_creator.obj_var_name + ".menu_widgets_objs.select.onCreateTemplateWidget",
				});
				
				menu_widget.children(".properties").attr({
					"data-on-open-settings-func": ui_creator.obj_var_name + ".menu_widgets_objs.select.openSettings",
					"data-on-after-save-settings-field-func": ui_creator.obj_var_name + ".menu_widgets_objs.select.saveSettingsField",
					"data-on-before-parse-widget-settings-func": ui_creator.obj_var_name + ".menu_widgets_objs.select.parseSettings",
				});
			};
			
			me.parseHtml = function(html_element) {
				return html_element && html_element.nodeName.toLowerCase() == "select";
			};
			
			me.parseSettings = function(widget, widget_settings) {
				widget_settings["is-multiple"] = widget[0].hasAttribute("multiple");
				widget_settings["name"] = widget.attr("name");
				widget_settings["options"] = getOptionsFromHtmlElement(widget);
			};
			
			me.cleanHtml = function(html_element) {
				var clone = ui_creator.cloneHtmlElementBeforeCleanIt(html_element);
				clone[0].innerHTML = '';
				
				var html = ui_creator.getCleanedHtmlElement(clone[0]);
				var options = html_element.innerHTML;
				
				return html.replace('</select>', options + '</select>');
			};
			
			me.onCreateTemplateWidget = function(widget, html_element) {
				widget.on("focus", function() {
					ui_creator.MyTextSelection.hideMenu(); //we need this in case the TextSelection menu is open.
				});
			};
			
			me.openSettings = function(widget, settings) {
				var options_elm = settings.find(" > .settings-properties > ul > .options");
				
				//set reset option selection icon action
				var btn_reset = options_elm.find(" > label > .reset-option-selection");
				btn_reset.click(function() {
					options_elm.find(".select-option input").removeAttr("checked").first().blur();
				});
				
				//set add option icon action
				var btn_add = options_elm.find(" > label > .add-option");
				btn_add.click(function() {
					me.addOption(this, null);
					ui_creator.saveMenuSettingsField(this);
				});
				
				//load options
				var props = ui_creator.parseWidgetAttributesToSettings(widget);
				if (props && props["options"]) {
					$.each(props["options"], function (index, option) {
						me.addOption(btn_add[0], option);
					});
				}
				
				//Set nestable
				options_elm.nestable({
				    dragClass: "dd-dragel settings-properties-select-options-li",
				    onDragStart: function(main_elm, elm, position, event){
					   	// main_elm is the main container
						// elm is the element that was moved
						
					   	event.preventDefault();
					   	event.stopPropagation();
				    },
				    beforeDragStop: function(main_elm, elm, dropped_elm) {
				    		return dropped_elm.parent().is(".settings-property.options") || dropped_elm.parentsUntil(ui_creator.options.ui_selector + ", .settings-property.options").length > 0;
				    },
				    callback: function(main_elm, elm, event){ //its called when the move action finished
						// main_elm is the main container
						// elm is the element that was moved
						
						var items = options_elm.find(".dd-item");
						
						$.each(items, function(idx, item) {
							var ul = $(item).children(".dd-list");
							
							if (ul.length == 0 || ul.children(".dd-item").length == 0)
								$(item).removeClass("option-group");
							else
								$(item).addClass("option-group");
						});
						
					   	ui_creator.saveMenuSettingsField( options_elm.children("ul")[0] );
				    },
				});
			};
			
			me.addOption = function(btn, default_values) {
				var ul = $(btn).parent().closest(".options").children("ul, ol").first();
				var v = "", l = "", so = false, children = null;
				
				if (default_values) {
					v = default_values.hasOwnProperty("value") ? default_values.value : "";
					l = default_values.hasOwnProperty("label") ? default_values.label : "";
					so = default_values.hasOwnProperty("selected") ? default_values.selected : false;
					children = default_values.hasOwnProperty("children") ? default_values.children : null;
				}
				
				var html = $('<li class="dd-item' + (children ? ' option-group' : '') + '">'
					+ '  <div class="select-option"><input type="radio" name="is_selected" value="1"' + (so ? ' checked' : '') + ' /></div>'
					+ '	<div class="dd-handle"><span class="zmdi zmdi-arrows"></span></div>'
					+ '  <div class="option-value input-group-sm"><input class="form-control" value="' + v + '" placeHolder="value" title="value" /></div>'
					+ '  <div class="option-label input-group-sm"><input class="form-control" value="' + l + '" placeHolder="label" title="label" /></div>'
					+ '	<div class="remove-option"><span class="zmdi zmdi-close-circle"></span></div>'
					+ '</li>');
				
				html.find("input").blur(function(event) {
					return ui_creator.saveMenuSettingsField(this);
				});
				
				html.find(".remove-option").click(function() {
					var li = $(this).parent().closest(".dd-item");
					var parent = li.parent();
					li.remove(); //remove current li
					
					if (parent.children("li").length == 0) {
						if (parent.parent().hasClass("options")) //main ul
							parent.children(".empty-options").show();
						else {
							parent.parent().removeClass("option-group"); //remove option-group class from parent li
							parent.remove(); //remove ol
						}
					}
					
					ui_creator.saveMenuSettingsField(parent[0]);
				});
				
				if (children) {
					var children_html = $("<ol class='dd-list'></ol>");
					
					$.each(children, function (index, child) {
						children_html.append( me.addOption(btn, child) );
					});
					
					html.append(children_html);
				}
				
				ul.children(".empty-options").hide();
				ul.append(html);
				
				return html;
			};
			
			me.saveSettingsField = function(field, widget, status) {
				if (status) {
					field = $(field);
					var field_value = field.val();
					
					var select_field = widget.children('select');
					var sp = field.parent().closest(".settings-properties");
					var sprop = field.parentsUntil(sp, ".settings-property").first();
					
					if (sprop.hasClass("is-multiple")) {
						if (field.is(":checked"))
							widget.attr("multiple", "multiple");
						else 
							widget.removeAttr("multiple");
					}
					else if (sprop.hasClass("name")) {
						if (field_value != "")
							widget.attr("name", field_value);
						else
							widget.removeAttr("name");
					}
					else if (sprop.hasClass("options")) {
						//Preparing options
						var ul = sprop.children("ul").first();
						var options = getNestedOptions(ul);
						var options_html = getOptionsHtml(options);
						widget.html(options_html);
					}
				}
				
				return status;
			};
			
			function getNestedOptions(ul) {
				var options = [];
				
				if (ul[0]) {
					var lis = ul.children("li");
					
					$.each(lis, function(idx, li) {
						li = $(li);
						
						options.push({
							selected: li.find(" > .select-option > input").is(":checked"),
							value: li.find(" > .option-value > input").val(),
							label: li.find(" > .option-label > input").val(),
							children: getNestedOptions( li.children("ul, ol").first() ),
						});
					});
				}
					
				return options.length > 0 ? options : null;
			}
			
			function getOptionsHtml(options) {
				var html = '';
					
				if (options && options.length > 0) {
					$.each(options, function(idx, option) {
						var selected = option["selected"];
						var v = option["value"];
						var l = option["label"];
						var children = option["children"];
						
						if (children && children.length > 0)
							html += '<optgroup label="' + l + '">' + getOptionsHtml(children) + '</optgroup>';
						else
							html += '<option' + (v ? ' value="' + v + '"' : '') + (selected ? ' selected' : '') + '>' + l + '</option>';
					});
				}
				
				return html;
			}
			
			function getOptionsFromHtmlElement(elm) {
				var options = new Array();
				var children = elm.children("option, optgroup");
				
				$.each(children, function(idx, item) {
					var node_name = item.nodeName.toLowerCase();
					item = $(item);
					
					if (node_name == "optgroup")
						options.push({
							label: item.attr("label"),
							children: getOptionsFromHtmlElement(item),
						});
					else 
						options.push({
							label: item.text(),
							value: item[0].hasAttribute("value") ? item.attr("value") : item.text(),
							selected: item.is(":selected"),
						});
				});
				
				return options;
			}
		}
	]]></menu_js>
</widget>
