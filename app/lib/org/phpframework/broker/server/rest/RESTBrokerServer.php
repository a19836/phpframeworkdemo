<?php
/*
 * Copyright (c) 2007 PHPMyFrameWork - Joao Pinto
 * AUTHOR: Joao Paulo Lopes Pinto -- http://jplpinto.com
 * 
 * The use of this code must be allowed first by the creator Joao Pinto, since this is a private and proprietary code.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

include_once get_lib("org.phpframework.broker.BrokerServer"); include_once get_lib("org.phpframework.broker.server.IRESTBrokerServer"); include_once get_lib("org.phpframework.util.xml.XMLSerializer"); include_once get_lib("org.phpframework.encryption.CryptoKeyHandler"); abstract class RESTBrokerServer extends BrokerServer implements IRESTBrokerServer { protected $settings; protected $LocalBrokerServer; protected $url; protected $response_type; protected $parameters; protected $options; public function __construct(Layer $v847a7225e0, $v30857f7eca = null) { parent::__construct($v847a7225e0); $this->settings = $v30857f7eca ? $v30857f7eca : array(); $this->setLocalBrokerServer(); } abstract protected function setLocalBrokerServer(); abstract protected function executeWebServiceResponse(); public function callWebService($v6f3a2700dd) { $v5c1c342594 = $this->prepareWebServiceRequest($v6f3a2700dd, $v8781464f14); debug_log_function("[verified:$v8781464f14]: " . get_class($this) . "->callWebService", array($this->url, $this->parameters, $this->options, $this->response_type)); if ($v5c1c342594) return $this->executeWebServiceResponse(); if (!$v8781464f14) launch_exception(new Exception("Request NOT allowed with url: $v6f3a2700dd")); return null; } protected function prepareWebServiceRequest($v6f3a2700dd, &$v8781464f14 = null) { $v6af1f205e1 = $_POST ? $_POST : array(); $v539082ff30 = array_key_exists("data", $v6af1f205e1) ? $v6af1f205e1["data"] : null; $v02ec69eab9 = array_key_exists("response_type", $v6af1f205e1) ? $v6af1f205e1["response_type"] : $this->settings["response_type"]; $v8781464f14 = true; $pfffd7fa4 = $this->settings["request_encryption_key"]; $pba66cbf9 = $this->settings["rest_auth_user"]; $v1d6484c1f2 = $this->settings["rest_auth_pass"]; if ($pba66cbf9 && $v1d6484c1f2) { $v8781464f14 = password_verify($pba66cbf9, $v6af1f205e1["rest_auth_user"]) && password_verify($v1d6484c1f2, $v6af1f205e1["rest_auth_pass"]); if (!$v8781464f14) return false; } if ($pfffd7fa4 && $v539082ff30) { $pbfa01ed1 = $pbfa01ed1 ? $pbfa01ed1 : CryptoKeyHandler::hexToBin($pfffd7fa4); $v46db43a407 = CryptoKeyHandler::hexToBin($v539082ff30); $v539082ff30 = CryptoKeyHandler::decryptSerializedObject($v46db43a407, $pbfa01ed1); } $v539082ff30 = $v539082ff30 ? $v539082ff30 : array(); $v9367d5be85 = is_array($v539082ff30) && isset($v539082ff30["parameters"]) ? $v539082ff30["parameters"] : $_GET; if (is_array($v9367d5be85)) { $v9994512d98 = array_keys($v9367d5be85); if (count($v9994512d98) == 1 && is_numeric($v9994512d98[0]) && $v9367d5be85[ $v9994512d98[0] ] == "") $v9367d5be85 = $v9994512d98[0]; } $v5d3813882f = is_array($v539082ff30) && isset($v539082ff30["options"]) ? $v539082ff30["options"] : null; $v5d3813882f = $v5d3813882f ? (is_array($v5d3813882f) ? $v5d3813882f : array($v5d3813882f)) : array(); if (array_key_exists("no_cache", $v6af1f205e1)) $v5d3813882f["no_cache"] = $v6af1f205e1["no_cache"]; $this->url = $v6f3a2700dd; $this->response_type = $v02ec69eab9; $this->parameters = $v9367d5be85; $this->options = $v5d3813882f; return true; } protected function getWebServiceResponse($v6cd9d4006f, $v86066462c3, $v9ad1385268, $v02ec69eab9) { $v7bd5d88a74 = array( "method" => $v6cd9d4006f, "arguments" => $v86066462c3, "result" => $v9ad1385268, ); if ($v02ec69eab9 == "xml") { header("Content-Type: text/xml; charset=UTF-8"); $pf7dd614f = XMLSerializer::generateValidXmlFromVar($v7bd5d88a74, "response", "row"); } else if ($v02ec69eab9 == "json") { header("Content-Type: application/json; charset=UTF-8"); $pf7dd614f = json_encode($v7bd5d88a74); } else { header("Content-Type: text/php; charset=UTF-8"); $pf7dd614f = serialize($v7bd5d88a74); } $pcc7198a3 = $this->settings["response_encryption_key"]; if ($pcc7198a3 && $pf7dd614f) { $pbfa01ed1 = CryptoKeyHandler::hexToBin($pcc7198a3); $v46db43a407 = CryptoKeyHandler::encryptText($pf7dd614f, $pbfa01ed1); $pf7dd614f = CryptoKeyHandler::binToHex($v46db43a407); } return $pf7dd614f; } } ?>
