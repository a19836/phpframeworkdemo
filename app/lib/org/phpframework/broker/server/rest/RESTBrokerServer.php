<?php
/*
 * Copyright (c) 2024 Bloxtor - http://bloxtor.com
 * 
 * Please note that this code belongs to the Bloxtor framework and must comply with the Bloxtor license.
 * If you do not accept these provisions, or if the Bloxtor License is not present or cannot be found, you are not entitled to use this code and must stop and delete it immediately.
 */
include_once get_lib("org.phpframework.broker.BrokerServer"); include_once get_lib("org.phpframework.broker.server.IRESTBrokerServer"); include_once get_lib("org.phpframework.util.xml.XMLSerializer"); include_once get_lib("org.phpframework.encryption.CryptoKeyHandler"); abstract class RESTBrokerServer extends BrokerServer implements IRESTBrokerServer { protected $settings; protected $LocalBrokerServer; protected $url; protected $response_type; protected $parameters; protected $options; public function __construct(Layer $v847a7225e0, $v30857f7eca = null) { parent::__construct($v847a7225e0); $this->settings = $v30857f7eca ? $v30857f7eca : array(); $this->setLocalBrokerServer(); } abstract protected function setLocalBrokerServer(); abstract protected function executeWebServiceResponse(); public function callWebService($v6f3a2700dd) { $v5c1c342594 = $this->prepareWebServiceRequest($v6f3a2700dd, $v8781464f14); debug_log_function("[verified:$v8781464f14]: " . get_class($this) . "->callWebService", array($this->url, $this->parameters, $this->options, $this->response_type)); if ($v5c1c342594) return $this->executeWebServiceResponse(); if (!$v8781464f14) launch_exception(new Exception("Request NOT allowed with url: $v6f3a2700dd")); return null; } protected function prepareWebServiceRequest($v6f3a2700dd, &$v8781464f14 = null) { $v6af1f205e1 = $_POST ? $_POST : array(); $v539082ff30 = array_key_exists("data", $v6af1f205e1) ? $v6af1f205e1["data"] : null; $v02ec69eab9 = array_key_exists("response_type", $v6af1f205e1) ? $v6af1f205e1["response_type"] : (isset($this->settings["response_type"]) ? $this->settings["response_type"] : null); $v8781464f14 = true; $pba66cbf9 = isset($this->settings["rest_auth_user"]) ? $this->settings["rest_auth_user"] : null; $v1d6484c1f2 = isset($this->settings["rest_auth_pass"]) ? $this->settings["rest_auth_pass"] : null; if ($pba66cbf9 && $v1d6484c1f2) { $v5c35899e84 = isset($v6af1f205e1["rest_auth_user"]) ? $v6af1f205e1["rest_auth_user"] : null; $v6841fe953f = isset($v6af1f205e1["rest_auth_pass"]) ? $v6af1f205e1["rest_auth_pass"] : null; $v8781464f14 = password_verify($pba66cbf9, $v5c35899e84) && password_verify($v1d6484c1f2, $v6841fe953f); if (!$v8781464f14) return false; } if (!empty($this->settings["request_encryption_key"]) && $v539082ff30) { $pbfa01ed1 = $pbfa01ed1 ? $pbfa01ed1 : CryptoKeyHandler::hexToBin($this->settings["request_encryption_key"]); $v46db43a407 = CryptoKeyHandler::hexToBin($v539082ff30); $v539082ff30 = CryptoKeyHandler::decryptSerializedObject($v46db43a407, $pbfa01ed1); } $v539082ff30 = $v539082ff30 ? $v539082ff30 : array(); $v9367d5be85 = is_array($v539082ff30) && isset($v539082ff30["parameters"]) ? $v539082ff30["parameters"] : $_GET; if (is_array($v9367d5be85)) { $v9994512d98 = array_keys($v9367d5be85); if (count($v9994512d98) == 1 && is_numeric($v9994512d98[0]) && $v9367d5be85[ $v9994512d98[0] ] == "") $v9367d5be85 = $v9994512d98[0]; } $v5d3813882f = is_array($v539082ff30) && isset($v539082ff30["options"]) ? $v539082ff30["options"] : null; $v5d3813882f = $v5d3813882f ? (is_array($v5d3813882f) ? $v5d3813882f : array($v5d3813882f)) : array(); if (array_key_exists("no_cache", $v6af1f205e1)) $v5d3813882f["no_cache"] = $v6af1f205e1["no_cache"]; $this->url = $v6f3a2700dd; $this->response_type = $v02ec69eab9; $this->parameters = $v9367d5be85; $this->options = $v5d3813882f; return true; } protected function getWebServiceResponse($v6cd9d4006f, $v86066462c3, $v9ad1385268, $v02ec69eab9) { $v7bd5d88a74 = array( "method" => $v6cd9d4006f, "arguments" => $v86066462c3, "result" => $v9ad1385268, ); if (is_object($v9ad1385268)) { $pe3472391 = new \ReflectionClass($v9ad1385268); $v45952cf45c = $pe3472391->getFileName(); if (!headers_sent()) header("Response-Object-Lib: $v45952cf45c"); } if ($v02ec69eab9 == "xml") { header("Content-Type: text/xml; charset=UTF-8"); $pf7dd614f = XMLSerializer::generateValidXmlFromVar($v7bd5d88a74, "response", "row"); } else if ($v02ec69eab9 == "json") { header("Content-Type: application/json; charset=UTF-8"); $pf7dd614f = json_encode($v7bd5d88a74); } else { header("Content-Type: text/php; charset=UTF-8"); $pf7dd614f = serialize($v7bd5d88a74); } if (!empty($this->settings["response_encryption_key"]) && $pf7dd614f) { $pbfa01ed1 = CryptoKeyHandler::hexToBin($this->settings["response_encryption_key"]); $v46db43a407 = CryptoKeyHandler::encryptText($pf7dd614f, $pbfa01ed1); $pf7dd614f = CryptoKeyHandler::binToHex($v46db43a407); } return $pf7dd614f; } } ?>
