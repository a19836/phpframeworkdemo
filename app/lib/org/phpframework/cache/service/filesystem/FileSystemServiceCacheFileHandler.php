<?php
/*
 * Copyright (c) 2024 Bloxtor - http://bloxtor.com
 * 
 * Please note that this code belongs to the Bloxtor framework and must comply with the Bloxtor license.
 * If you do not accept these provisions, or if the Bloxtor License is not present or cannot be found, you are not entitled to use this code and must stop and delete it immediately.
 */
include get_lib("org.phpframework.cache.service.filesystem.FileSystemServiceCacheFolderHandler"); include_once get_lib("org.phpframework.cache.CacheHandlerUtil"); class FileSystemServiceCacheFileHandler { const VALIDATION_FOLDER_NAME = ".validation"; private $pd6e5bd91; private $pbc96d822; public function __construct($pbc96d822, $pf195ff39, $pfcc61b33 = false) { $this->pbc96d822 = $pbc96d822; $this->pd6e5bd91 = new FileSystemServiceCacheFolderHandler($this, $pf195ff39, $pfcc61b33); } public function write($pf3dc0762, $v57b4b0200b) { if(($v7dffdb5a5b = fopen($pf3dc0762, "w"))) { $v5c1c342594 = fputs($v7dffdb5a5b, $v57b4b0200b); $v5c1c342594 = $v5c1c342594 === false ? false : true; fclose($v7dffdb5a5b); } return $v5c1c342594; } public function create($pf3dc0762, $v57b4b0200b = "") { $v5c1c342594 = false; $pf80be85c = $this->pd6e5bd91->getFolderSize($this->pbc96d822->getRootPath()); $pf195ff39 = $this->pd6e5bd91->getMaximumSize(); $v58656039c8 = strlen($v57b4b0200b); $v9b7105d215 = !$pf195ff39 || ($pf195ff39 && $pf195ff39 >= $pf80be85c + $v58656039c8); if($v9b7105d215) { $v17be587282 = dirname($pf3dc0762); $v3f7a88fc27 = $this->getPath($pf3dc0762); if($v3f7a88fc27 && $this->exists($v3f7a88fc27)) { $pf3dc0762 = $v3f7a88fc27; $v7959970a41 = true; } else { $pf3dc0762 = $this->pd6e5bd91->getFolderPath($v17be587282) . basename($pf3dc0762); $v17be587282 = dirname($pf3dc0762); } if($pf3dc0762) { $pc70a323e = $v7959970a41 ? filesize($pf3dc0762) : 0; $v5c1c342594 = $this->write($pf3dc0762, $v57b4b0200b); if($v5c1c342594) { if(!$v7959970a41) { $this->pd6e5bd91->updateFilesTotal($v17be587282); } $v882237b399 = $v58656039c8 - $pc70a323e; $this->pd6e5bd91->setFolderSize($this->pbc96d822->getRootPath(), $v17be587282, $v882237b399); $this->setFileValidation($pf3dc0762); } } } return $v5c1c342594; } public function deleteFolder($v17be587282) { $v648f89f08c = $this->pd6e5bd91->getFolderSize($v17be587282); if($this->pd6e5bd91->deleteFolder($v17be587282)) { $v2d22d85b1f = $v648f89f08c * -1; $this->pd6e5bd91->setFolderSize($this->pbc96d822->getRootPath(), dirname($v17be587282), $v2d22d85b1f); } } public function delete($pe20fbcb8) { $v5c1c342594 = true; if($pe20fbcb8) { $v56df178d1e = array(); $pc37695cb = count($pe20fbcb8); for($v43dd7d0051 = 0; $v43dd7d0051 < $pc37695cb; $v43dd7d0051++) { $v933fefbf75 = $pe20fbcb8[$v43dd7d0051]; if($this->exists($v933fefbf75)) { $v3b1b832e46 = filesize($v933fefbf75); if(unlink($v933fefbf75)) { $v17be587282 = dirname($v933fefbf75); $v56df178d1e[$v17be587282]["number"] = (isset($v56df178d1e[$v17be587282]["number"]) ? $v56df178d1e[$v17be587282]["number"] : 0) + 1; $v56df178d1e[$v17be587282]["size"] = (isset($v56df178d1e[$v17be587282]["size"]) ? $v56df178d1e[$v17be587282]["size"] : 0) + $v3b1b832e46; } else { $v5c1c342594 = false; } } } $v4f6b0fc11b = array_keys($v56df178d1e); $pc37695cb = count($v4f6b0fc11b); for($v43dd7d0051 = 0; $v43dd7d0051 < $pc37695cb; $v43dd7d0051++) { $v17be587282 = $v4f6b0fc11b[$v43dd7d0051]; if(is_numeric($v56df178d1e[$v17be587282]["number"])) { $v2d22d85b1f = $v56df178d1e[$v17be587282]["number"] * -1; $this->pd6e5bd91->updateFilesTotal($v17be587282, $v2d22d85b1f); } if(is_numeric($v56df178d1e[$v17be587282]["size"])) { $v2d22d85b1f = $v56df178d1e[$v17be587282]["size"] * -1; $this->pd6e5bd91->setFolderSize($this->pbc96d822->getRootPath(), $v17be587282, $v2d22d85b1f); } } } return $v5c1c342594; } public function getContent($pf3dc0762) { return @file_get_contents($pf3dc0762); } public function get($pf3dc0762) { $pf3dc0762 = $this->getPath($pf3dc0762); if($pf3dc0762) { return $this->getContent($pf3dc0762); } return false; } public function getPath($pf3dc0762) { if(!$this->exists($pf3dc0762) && $this->folder_manager_active) { $v17be587282 = dirname($pf3dc0762); $v250a1176c9 = basename($pf3dc0762); $pef4ea73b = $this->search($v17be587282, $v250a1176c9, false, 1); $pf3dc0762 = count($pef4ea73b) && $pef4ea73b[0] ? $pef4ea73b[0] : false; } return $pf3dc0762; } public function search($v17be587282, $v7be595dc2a, $pf0d6eaba = false, $v552b831ecd = false, $v23376f7ba8 = true) { $pef4ea73b = array(); if($v7be595dc2a) { CacheHandlerUtil::configureFolderPath($v17be587282); $v6ee393d9fb = $this->pd6e5bd91->getFiles($v17be587282); for($v43dd7d0051 = count($v6ee393d9fb) - 1; $v43dd7d0051 >= 0; --$v43dd7d0051) { $v7dffdb5a5b = $v6ee393d9fb[$v43dd7d0051]; if($this->f3e462eaa75($v7dffdb5a5b)) { $v6a9da2e51a = $v17be587282 . $v7dffdb5a5b; if(!is_dir($v6a9da2e51a)) { $v7959970a41 = false; if($pf0d6eaba == "regexp" || $pf0d6eaba == "regex" || $pf0d6eaba == "start" || $pf0d6eaba == "begin" || $pf0d6eaba == "prefix" || $pf0d6eaba == "middle" || $pf0d6eaba == "end" || $pf0d6eaba == "finish" || $pf0d6eaba == "suffix") { $v7959970a41 = CacheHandlerUtil::checkIfKeyTypeMatchValue($v7dffdb5a5b, $v7be595dc2a, $pf0d6eaba); } else if($v7dffdb5a5b == $v7be595dc2a) { $v7959970a41 = true; } if($v7959970a41) { $pef4ea73b[] = $v6a9da2e51a; if($v552b831ecd) { --$v552b831ecd; if($v552b831ecd <= 0) { break; } } } } } } if($v552b831ecd === false || (is_numeric($v552b831ecd) && $v552b831ecd > 0)) { if($v23376f7ba8) { $v943d04e731 = $this->pd6e5bd91->getFolders($v17be587282); for($v43dd7d0051 = count($v943d04e731) - 1; $v43dd7d0051 >= 0; --$v43dd7d0051) { $v25dfe304be = $v943d04e731[$v43dd7d0051]; if($this->f3e462eaa75($v25dfe304be)) { $pdd397f0a = $v17be587282 . $v25dfe304be; $v2bd15b5fd8 = $this->search($pdd397f0a, $v7be595dc2a, $pf0d6eaba, $v552b831ecd, false); $pef4ea73b = array_merge($pef4ea73b, $v2bd15b5fd8); if($v552b831ecd) { $v552b831ecd -= count($v2bd15b5fd8); if($v552b831ecd <= 0) { break; } } } } if($v552b831ecd === false || (is_numeric($v552b831ecd) && $v552b831ecd > 0)) { for($v43dd7d0051 = count($v943d04e731) - 1; $v43dd7d0051 >= 0; --$v43dd7d0051) { $v25dfe304be = $v943d04e731[$v43dd7d0051]; if($this->f3e462eaa75($v25dfe304be)) { $pdd397f0a = $v17be587282 . $v25dfe304be . "/"; $v2f520b5a45 = $this->pd6e5bd91->getFolders($pdd397f0a); for($v9d27441e80 = count($v2f520b5a45) - 1; $v9d27441e80 >= 0; --$v9d27441e80) { $pd48df47e = $v2f520b5a45[$v9d27441e80]; $v7c58b288a7 = $pdd397f0a . $pd48df47e . "/"; $v2bd15b5fd8 = $this->search($v7c58b288a7, $v7be595dc2a, $pf0d6eaba, $v552b831ecd); $pef4ea73b = array_merge($pef4ea73b, $v2bd15b5fd8); if($v552b831ecd) { $v552b831ecd -= count($v2bd15b5fd8); if($v552b831ecd <= 0) { $v43dd7d0051 = 0; break; } } } } } } } } } return $pef4ea73b; } public function getFileMTime($pf3dc0762) { return $pf3dc0762 ? filemtime($pf3dc0762) : 0; } public function exists($pf3dc0762) { return $pf3dc0762 && file_exists($pf3dc0762); } public function isValid($pf3dc0762) { $v7511b05e8c = $this->f18ff3d2d22($pf3dc0762); if($this->exists($v7511b05e8c)) { $v57b4b0200b = $this->getContent($v7511b05e8c); } return $v57b4b0200b == 1 ? false : true; } public function setFileValidation($pf3dc0762, $v0ff021f094 = "") { $v7511b05e8c = $this->f18ff3d2d22($pf3dc0762); $v7959970a41 = $this->exists($v7511b05e8c); $v28c1cd997a = (!$v7959970a41 && $v0ff021f094) || ($v7959970a41 && $this->getContent($v7511b05e8c) != $v0ff021f094); if($v28c1cd997a) { if(CacheHandlerUtil::preparePath(dirname($v7511b05e8c))) { return $this->write($v7511b05e8c, $v0ff021f094); } return false; } return true; } private function f18ff3d2d22($pf3dc0762) { $v17be587282 = dirname($pf3dc0762); $v250a1176c9 = basename($pf3dc0762); return $v17be587282 . "/" . self::VALIDATION_FOLDER_NAME . "/" . hash("md4", $v250a1176c9); } private function f3e462eaa75($v250a1176c9) { return substr($v250a1176c9, 0, 1) != "." && $v250a1176c9 != FileSystemServiceCacheFolderHandler::FOLDER_CONTROLLER_FILE_NAME && $v250a1176c9 != FileSystemServiceCacheFolderHandler::FOLDER_SIZE_FILE_NAME; } public function getCacheFolderHandler() {return $this->pd6e5bd91;} public function getCacheHandler() {return $this->pbc96d822;} } ?>
