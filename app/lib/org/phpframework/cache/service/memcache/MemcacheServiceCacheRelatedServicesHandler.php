<?php
/*
 * Copyright (c) 2024 Bloxtor - http://bloxtor.com
 * 
 * Please note that this code belongs to the Bloxtor framework and must comply with the Bloxtor license.
 * If you do not accept these provisions, or if the Bloxtor License is not present or cannot be found, you are not entitled to use this code and must stop and delete it immediately.
 */
include_once get_lib("org.phpframework.cache.CacheHandlerUtil"); include_once get_lib("org.phpframework.cache.service.ServiceCacheRelatedServicesHandler"); class MemcacheServiceCacheRelatedServicesHandler extends ServiceCacheRelatedServicesHandler { const MEMCACHE_KEY_NAMES_WITH_THE_OTHER_MEMCACHE_KEYS_FILE_NAME = "asdakl3kl24234jk23l"; public function __construct($pbc96d822) { $this->CacheHandler = $pbc96d822; } public function addServiceToRelatedKeysToDelete($pdcf670f6, $pbfa01ed1, $pe7235a8d, $v3fb9f41470 = false) { $v5c1c342594 = false; if ($pbfa01ed1) { $v5c1c342594 = true; $pc37695cb = $pe7235a8d ? count($pe7235a8d) : 0; for ($v43dd7d0051 = 0; $v43dd7d0051 < $pc37695cb; $v43dd7d0051++) { $v342a134247 = $pe7235a8d[$v43dd7d0051]; $pc8001b34 = isset($v342a134247["key"]) ? $v342a134247["key"] : null; $v8773b3a63a = isset($v342a134247["type"]) ? $v342a134247["type"] : null; if ($v8773b3a63a == "regexp" || $v8773b3a63a == "regex" || $v8773b3a63a == "start" || $v8773b3a63a == "begin" || $v8773b3a63a == "prefix" || $v8773b3a63a == "middle" || $v8773b3a63a == "end" || $v8773b3a63a == "finish" || $v8773b3a63a == "suffix") { $v17be587282 = $this->getServiceRuleToDeletePath($pdcf670f6, $v3fb9f41470, $v8773b3a63a, $pc8001b34); $v872c4849e0 = $this->getFilePathKey($v17be587282, $pbfa01ed1); $v52755e65e5 = isset($v872c4849e0["file_path"]) ? $v872c4849e0["file_path"] : null; if (!$v52755e65e5) { if (!$this->registerKey($v17be587282, $pbfa01ed1, isset($v872c4849e0["free_file_paths"]) ? $v872c4849e0["free_file_paths"] : null)) { $v5c1c342594 = false; } } } } } return $v5c1c342594; } public function addServiceKeyToDelete($pdcf670f6, $pbfa01ed1, $v3fb9f41470 = false) { $v5c1c342594 = false; if($pbfa01ed1) { $v5c1c342594 = true; $v17be587282 = $this->md3632307ebc6($pdcf670f6, $v3fb9f41470); $v872c4849e0 = $this->getFilePathKey($v17be587282, $pbfa01ed1); $v52755e65e5 = isset($v872c4849e0["file_path"]) ? $v872c4849e0["file_path"] : null; if(!$v52755e65e5) $this->registerKey($v17be587282, $pbfa01ed1, isset($v872c4849e0["free_file_paths"]) ? $v872c4849e0["free_file_paths"] : null); } return $v5c1c342594; } public function delete($pdcf670f6, $pbfa01ed1, $v3fb9f41470, $v1491940c54, $v91d4d88b89) { $v17be587282 = $this->getServiceRuleToDeletePath($pdcf670f6, $v3fb9f41470, $v1491940c54, $v91d4d88b89); return $this->deleteRelatedServicesKeys($pdcf670f6, $pbfa01ed1, $v3fb9f41470, $v1491940c54, $v17be587282); } public function deleteBySearchingInAllTheCreatedCachedItems($pdcf670f6, $pbfa01ed1, $v3fb9f41470, $v1491940c54) { $v17be587282 = $this->md3632307ebc6($pdcf670f6, $v3fb9f41470); return $this->deleteRelatedServicesKeys($pdcf670f6, $pbfa01ed1, $v3fb9f41470, $v1491940c54, $v17be587282); } protected function deleteRelatedServicesKeys($pdcf670f6, $pbfa01ed1, $v3fb9f41470, $v1491940c54, $v17be587282) { $v5c1c342594 = true; $v4a2fedb8f0 = $this->f757bbfbcc3($v17be587282); $v539082ff30 = $this->CacheHandler->getMemcacheHandler()->nsGet($v4a2fedb8f0, MEMCACHE_KEY_NAMES_WITH_THE_OTHER_MEMCACHE_KEYS_FILE_NAME); $v539082ff30 = !empty($v539082ff30) ? unserialize($v539082ff30) : false; if (is_array($v539082ff30)) { foreach ($v539082ff30 as $v5cc4b96d85) { $pfb662071 = $this->CacheHandler->getMemcacheHandler()->nsGet($v4a2fedb8f0, $v5cc4b96d85); $pfb662071 = !empty($pfb662071) ? unserialize($pfb662071) : false; if(is_array($pfb662071)) { $pecbc50e6 = array_keys($pfb662071); $pc37695cb = count($pecbc50e6); for($v43dd7d0051 = 0; $v43dd7d0051 < $pc37695cb; $v43dd7d0051++) { $pbb46311a = $pecbc50e6[$v43dd7d0051]; if(CacheHandlerUtil::checkIfKeyTypeMatchValue($pbb46311a, $pbfa01ed1, $v1491940c54)) { $v47cef7ac50 = $this->CacheHandler->getServicePath($pdcf670f6, $pbb46311a, $v3fb9f41470); $v45187497f3 = $this->CacheHandler->getFileNS($pdcf670f6, $v3fb9f41470); if(!$this->CacheHandler->getMemcacheHandler()->nsDelete($v45187497f3, $v47cef7ac50)) { $v5c1c342594 = false; } } } } } } return $v5c1c342594; } protected function getFilePathKey($v17be587282, $pbfa01ed1) { $v52755e65e5 = false; $v2c942d8ac7 = array(); $v4a2fedb8f0 = $this->f757bbfbcc3($v17be587282); $v539082ff30 = $this->CacheHandler->getMemcacheHandler()->nsGet($v4a2fedb8f0, MEMCACHE_KEY_NAMES_WITH_THE_OTHER_MEMCACHE_KEYS_FILE_NAME); $v539082ff30 = !empty($v539082ff30) ? unserialize($v539082ff30) : false; if (is_array($v539082ff30)) { foreach ($v539082ff30 as $v5cc4b96d85) { $pfb662071 = $this->CacheHandler->getMemcacheHandler()->nsGet($v4a2fedb8f0, $v5cc4b96d85); $pfb662071 = !empty($pfb662071) ? unserialize($pfb662071) : false; if(is_array($pfb662071) && isset($pfb662071[$pbfa01ed1])) $v52755e65e5 = $v5cc4b96d85; elseif(!$pfb662071 || count($pfb662071) < self::MAXIMUM_ITEMS_PER_FILE) $v2c942d8ac7[] = $v5cc4b96d85; if($v52755e65e5) break; } } return array("file_path" => $v52755e65e5, "free_file_paths" => $v2c942d8ac7); } protected function registerKey($v17be587282, $pbfa01ed1, $v2c942d8ac7) { $v16c9091332 = false; $v4a2fedb8f0 = $this->f757bbfbcc3($v17be587282); $pc37695cb = $v2c942d8ac7 ? count($v2c942d8ac7) : 0; for($v43dd7d0051 = 0; $v43dd7d0051 < $pc37695cb; $v43dd7d0051++) { $pa0613321 = $v2c942d8ac7[$v43dd7d0051]; $pfb662071 = $this->CacheHandler->getMemcacheHandler()->nsGet($v4a2fedb8f0, $pa0613321); $pfb662071 = !empty($pfb662071) ? unserialize($pfb662071) : false; if (!is_array($pfb662071)) $pfb662071 = array(); if(count($pfb662071) < self::MAXIMUM_ITEMS_PER_FILE) { $pfb662071[$pbfa01ed1] = true; $v57b4b0200b = serialize($pfb662071); if ($this->CacheHandler->getMemcacheHandler()->nsSet($v4a2fedb8f0, $pa0613321, $v57b4b0200b)) { $v16c9091332 = true; break; } } } if(!$v16c9091332) { $v0e5a9eeca2 = uniqid(); $v539082ff30 = $this->CacheHandler->getMemcacheHandler()->nsGet($v4a2fedb8f0, MEMCACHE_KEY_NAMES_WITH_THE_OTHER_MEMCACHE_KEYS_FILE_NAME); $v539082ff30 = !empty($v539082ff30) ? unserialize($v539082ff30) : false; if (!is_array($v539082ff30)) { $v539082ff30 = array(); } $v539082ff30[] = $v0e5a9eeca2; $v57b4b0200b = serialize($v539082ff30); if ($this->CacheHandler->getMemcacheHandler()->nsSet($v4a2fedb8f0, MEMCACHE_KEY_NAMES_WITH_THE_OTHER_MEMCACHE_KEYS_FILE_NAME, $v57b4b0200b)) { $pfb662071 = array($pbfa01ed1 => true); $v57b4b0200b = serialize($pfb662071); if ($this->CacheHandler->getMemcacheHandler()->nsSet($v4a2fedb8f0, $v0e5a9eeca2, $v57b4b0200b)) { $v16c9091332 = true; } } } return $v16c9091332; } private function f757bbfbcc3($v17be587282) { return CacheHandlerUtil::getFilePathKey($v17be587282); } private function md3632307ebc6($pdcf670f6, $v3fb9f41470) { $v17be587282 = $this->getServiceRuleToDeletePath($pdcf670f6, $v3fb9f41470, "equal", "all"); return $v17be587282; } } ?>
