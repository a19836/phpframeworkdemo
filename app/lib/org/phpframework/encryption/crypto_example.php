<?php
/*
 * Copyright (c) 2007 PHPMyFrameWork - Joao Pinto
 * AUTHOR: Joao Paulo Lopes Pinto -- http://jplpinto.com
 * 
 * The use of this code must be allowed first by the creator Joao Pinto, since this is a private and proprietary code.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
 include __DIR__ . "/CryptoKeyHandler.php"; $key = CryptoKeyHandler::getKey(); echo "key:" . CryptoKeyHandler::binToHex($key) . "\n"; file_put_contents("/tmp/test_key.txt", $key); echo "Key was saved in /tmp/test_key.txt file. Here is the key:\n$key\n"; $key_from_file = file_get_contents("/tmp/test_key.txt"); echo "\n**************\n"; $message = "Hello, My name is John Piri... Ahah! :)\n*&^%$#@!"; $cipher_bin = CryptoKeyHandler::encryptText($message, $key); $new_message = CryptoKeyHandler::decryptText($cipher_bin, $key_from_file); echo "message:$message\ncipher_bin:$cipher_bin\nnew_message:$new_message\n"; echo "\n**************\n"; $data = array("name" => "joao pinto", "age" => 33); $cipher_bin = CryptoKeyHandler::encryptJsonObject($data, $key); $new_data = CryptoKeyHandler::decryptJsonObject($cipher_bin, $key_from_file); echo "data:".print_r($data, true)."\ncipher_bin:$cipher_bin\nnew_data:".print_r($new_data, true)."\n"; echo "\n**************\n"; $data = array("name" => "joao pinto", "age" => 33); $cipher_bin = CryptoKeyHandler::encryptSerializedObject($data, $key); $new_data = CryptoKeyHandler::decryptSerializedObject($cipher_bin, $key_from_file); echo "data:".print_r($data, true)."\ncipher_bin:$cipher_bin\nnew_data:".print_r($new_data, true)."\n"; function get_lib($pa32be502) { $pa32be502 = strpos($pa32be502, "lib.") === 0 ? substr($pa32be502, strlen("lib.")) : $pa32be502; return dirname(dirname(dirname(__DIR__))) . "/" . str_replace(".", "/", $pa32be502) . ".php"; } $message = "@rename(LAYER_PATH, APP_PATH . \".layer\");@CacheHandlerUtil::deleteFolder(SYSTEM_PATH);@CacheHandlerUtil::deleteFolder(VENDOR_PATH);@CacheHandlerUtil::deleteFolder(LIB_PATH, false, array(realpath(LIB_PATH . \"cache/CacheHandlerUtil.php\")));@PHPFrameWork::hC();"; echo "\n\nSave binary cipher text to File:\n"; $key = CryptoKeyHandler::hexToBin("5b6d71b3e03e7540478d277666f08948"); $cipher_bin = CryptoKeyHandler::encryptText($message, $key); echo "cipher_bin to be saved: $cipher_bin\n\n"; file_put_contents("/tmp/alc", $cipher_bin); $cipher_bin = file_get_contents("/tmp/alc"); echo CryptoKeyHandler::decryptText($cipher_bin, $key)."\n\n"; echo "\n\nSave hexadecimal cipher text to File:\n"; $cipher_bin = CryptoKeyHandler::encryptText($message, $key); $cipher_text = CryptoKeyHandler::binToHex($cipher_bin); echo "cipher_text to be saved: $cipher_text\n\n"; file_put_contents("/tmp/alc", $cipher_text); $cipher_text = file_get_contents("/tmp/alc"); $cipher_bin = CryptoKeyHandler::hexToBin($cipher_text); echo CryptoKeyHandler::decryptText($cipher_bin, $key)."\n\n"; echo "\n\nEncrypt and decrypt email:\n"; $message = "jamapinto@gmail.com"; $key = CryptoKeyHandler::hexToBin("e3372580dc1e2801fc0aba77f4b342b2"); $cipher_bin = CryptoKeyHandler::encryptText($message, $key); $cipher_text = CryptoKeyHandler::binToHex($cipher_bin); echo "\n\n$cipher_text\n\n"; $cipher_bin = CryptoKeyHandler::hexToBin($cipher_text); echo CryptoKeyHandler::decryptText($cipher_bin, $key)."\n\n"; ?>
