<?php
/*
 * Copyright (c) 2024 Bloxtor - http://bloxtor.com
 * 
 * Please note that this code belongs to the Bloxtor framework and must comply with the Bloxtor license.
 * If you do not accept these provisions, or if the Bloxtor License is not present or cannot be found, you are not entitled to use this code and must stop and delete it immediately.
 */
class OpenSSLCipherHandler { public static function encryptText($v39e1347c93, $pbfa01ed1) { if (strlen($v39e1347c93)) { $pf1932edc = "AES-128-CBC"; $v140849ec17 = openssl_cipher_iv_length($pf1932edc); $v94331c7891 = openssl_random_pseudo_bytes($v140849ec17); $v83b6d58d9a = openssl_encrypt($v39e1347c93, $pf1932edc, $pbfa01ed1, $v5d3813882f = OPENSSL_RAW_DATA, $v94331c7891); $v917befa8a2 = hash_hmac('sha256', $v83b6d58d9a, $pbfa01ed1, $v160ad04537 = true); $v8c3792c37f = base64_encode( $v94331c7891 . $v917befa8a2 . $v83b6d58d9a ); return $v8c3792c37f; } return $v39e1347c93; } public static function encryptVariable($v847e7d0a83, $pbfa01ed1) { if ($v847e7d0a83) { if (is_array($v847e7d0a83) || is_object($v847e7d0a83)) { foreach ($v847e7d0a83 as $pe5c5e2fe => $v956913c90f) $v847e7d0a83[$pe5c5e2fe] = self::encryptVariable($v956913c90f, $pbfa01ed1); } else $v847e7d0a83 = self::encryptText($v847e7d0a83, $pbfa01ed1); } return $v847e7d0a83; } public static function encryptArray($pfb662071, $pbfa01ed1) { return self::encryptVariable($pfb662071, $pbfa01ed1); } public static function decryptText($v8c3792c37f, $pbfa01ed1) { if (strlen($v8c3792c37f)) { $pf1932edc = "AES-128-CBC"; $v9a8b7dc209 = base64_decode($v8c3792c37f); $v140849ec17 = openssl_cipher_iv_length($pf1932edc); $v94331c7891 = substr($v9a8b7dc209, 0, $v140849ec17); $v917befa8a2 = substr($v9a8b7dc209, $v140849ec17, $v498407192a = 32); $v83b6d58d9a = substr($v9a8b7dc209, $v140849ec17 + $v498407192a); $pca24981a = openssl_decrypt($v83b6d58d9a, $pf1932edc, $pbfa01ed1, $v5d3813882f = OPENSSL_RAW_DATA, $v94331c7891); $pd2ad6bfa = hash_hmac('sha256', $v83b6d58d9a, $pbfa01ed1, $v160ad04537 = true); if (hash_equals($v917befa8a2, $pd2ad6bfa)) return $pca24981a; } } public static function decryptVariable($v847e7d0a83, $pbfa01ed1) { if ($v847e7d0a83) { if (is_array($v847e7d0a83) || is_object($v847e7d0a83)) { foreach ($v847e7d0a83 as $pe5c5e2fe => $v956913c90f) $v847e7d0a83[$pe5c5e2fe] = self::decryptVariable($v956913c90f, $pbfa01ed1); } else $v847e7d0a83 = self::decryptText($v847e7d0a83, $pbfa01ed1); } return $v847e7d0a83; } public static function decryptArray($pfb662071, $pbfa01ed1) { return self::decryptVariable($pfb662071, $pbfa01ed1); } } ?>
