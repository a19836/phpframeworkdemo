<?php
/*
 * Copyright (c) 2024 Bloxtor - http://bloxtor.com
 * 
 * Please note that this code belongs to the Bloxtor framework and must comply with the Bloxtor license.
 * If you do not accept these provisions, or if the Bloxtor License is not present or cannot be found, you are not entitled to use this code and must stop and delete it immediately.
 */
class SQLException extends Exception { public $problem; public function __construct($v6de691233b, $paec2c009, $v67db1bd535 = array()) { switch($v6de691233b) { case 1: $v5d3813882f = $v67db1bd535; $v273d26e1b9 = ""; if (is_array($v5d3813882f)) foreach ($v5d3813882f as $pe5c5e2fe => $v956913c90f) { $v273d26e1b9 .= ($v273d26e1b9 ? "; " : "") . "$pe5c5e2fe="; if (strtolower($pe5c5e2fe) == "password") $v273d26e1b9 .= strlen($v956913c90f) ? "***" : ""; else $v273d26e1b9 .= is_array($v956913c90f) ? "[" . implode(", ", $v956913c90f) . "]" : (is_object($v956913c90f) ? "Object(" . get_class($v956913c90f) . ")" : $v956913c90f); } $this->problem = "DB connection fail with options: $v273d26e1b9"; break; case 2: $this->problem = "ERROR selecting DB: " . (isset($v67db1bd535[0]) ? $v67db1bd535[0] : null); break; case 3: $this->problem = "ERROR cosing DB connection."; break; case 4: $this->problem = "ERROR returning DB errno." . (isset($v67db1bd535[0]) ? $v67db1bd535[0] : null); break; case 5: $this->problem = "ERROR returning DB error." . (isset($v67db1bd535[0]) ? $v67db1bd535[0] : null); break; case 6: $this->problem = "ERROR executing query: " . (isset($v67db1bd535[0]) ? $v67db1bd535[0] : null); break; case 7: $this->problem = "ERROR to free result: " . (isset($v67db1bd535[0]) ? $v67db1bd535[0] : null); break; case 8: $this->problem = "ERROR fetching result to array. Result:" . (isset($v67db1bd535[0]) ? $v67db1bd535[0] : null) . ". Array type:" . (isset($v67db1bd535[1]) ? $v67db1bd535[1] : null); break; case 9: $this->problem = "ERROR fetching result to row. Result:" . (isset($v67db1bd535[0]) ? $v67db1bd535[0] : null); break; case 10: $this->problem = "ERROR fetching result to assoc array. Result:" . (isset($v67db1bd535[0]) ? $v67db1bd535[0] : null); break; case 11: $this->problem = "ERROR fetching result to object. Result:" . (isset($v67db1bd535[0]) ? $v67db1bd535[0] : null); break; case 12: $this->problem = "ERROR fetching field. Result:" . (isset($v67db1bd535[0]) ? $v67db1bd535[0] : null) . ". Offset:" . (isset($v67db1bd535[1]) ? $v67db1bd535[1] : null); break; case 13: $this->problem = "ERROR getting num rows. Result:" . (isset($v67db1bd535[0]) ? $v67db1bd535[0] : null); break; case 14: $this->problem = "ERROR getting num fields. Result:" . (isset($v67db1bd535[0]) ? $v67db1bd535[0] : null); break; case 15: $this->problem = "ERROR in DB->getData(). SQL:" . (isset($v67db1bd535[0]) ? $v67db1bd535[0] : null); break; case 16: $this->problem = "ERROR in DB->setData(sql). SQL:" . (isset($v67db1bd535[0]) ? $v67db1bd535[0] : null); break; case 17: $this->problem = "ERROR: Query result null. SQL:" . (isset($v67db1bd535[0]) ? $v67db1bd535[0] : null); break; case 18: $this->problem = "ERROR: DB Driver incorrect options. Host, username and db_name are mandatory! Your options were:[" . implode("', '", $v67db1bd535) . "]"; break; case 19: $this->problem = "ERROR: DB name is undefined in query: " . $v67db1bd535; break; case 20: $this->problem = "ERROR in DB->setCharset(" . $v67db1bd535 . ")"; break; case 21: $this->problem = "ERROR checking getData resourcing for SQL:" . (isset($v67db1bd535[0]) ? $v67db1bd535[0] : null); break; } if (!empty($paec2c009)) { if (is_string($paec2c009)) { $this->problem .= "\n\n\n\n*** NATIVE ERROR ***\n\n$paec2c009"; parent::__construct($paec2c009, $v6de691233b, null); } else { if ($paec2c009->problem) $this->problem = $paec2c009->problem . PHP_EOL . $this->problem; parent::__construct($paec2c009->getMessage(), $v6de691233b, $paec2c009); } } } } ?>
