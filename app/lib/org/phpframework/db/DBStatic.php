<?php
/*
 * Copyright (c) 2007 PHPMyFrameWork - Joao Pinto
 * AUTHOR: Joao Paulo Lopes Pinto -- http://jplpinto.com
 * 
 * The use of this code must be allowed first by the creator Joao Pinto, since this is a private and proprietary code.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
include_once get_lib("org.phpframework.util.text.TextSanitizer"); include_once get_lib("org.phpframework.db.SQLQueryHandler"); trait DBStatic { private static $v4425d5586a = array(); abstract public static function getType(); abstract public static function getLabel(); abstract public static function getEnclosingDelimiters(); abstract public static function getAliasEnclosingDelimiters(); abstract public static function getDBCharsets(); abstract public static function getTableCharsets(); abstract public static function getColumnCharsets(); abstract public static function getDBCollations(); abstract public static function getTableCollations(); abstract public static function getColumnCollations(); abstract public static function getStorageEngines(); abstract public static function getPHPToDBColumnTypes(); abstract public static function getDBToPHPColumnTypes(); abstract public static function getDBColumnTypes(); abstract public static function getDBColumnSimpleTypes(); abstract public static function getDBColumnDefaultValuesByType(); abstract public static function getDBColumnTypesIgnoredProps(); abstract public static function getDBColumnTypesHiddenProps(); abstract public static function getDBColumnNumericTypes(); abstract public static function getDBColumnDateTypes(); abstract public static function getDBColumnTextTypes(); abstract public static function getDBColumnBlobTypes(); abstract public static function getDBColumnBooleanTypes(); abstract public static function getDBColumnMandatoryLengthTypes(); abstract public static function getDBColumnAutoIncrementTypes(); abstract public static function getDBBooleanTypeAvailableValues(); abstract public static function getDBCurrentTimestampAvailableValues(); abstract public static function getReservedWords(); abstract public static function getDefaultSchema(); abstract public static function getIgnoreConnectionOptions(); abstract public static function getIgnoreConnectionOptionsByExtension(); abstract public static function getAvailablePHPExtensionTypes(); abstract public static function allowTableAttributeSorting(); abstract public static function getCreateDBStatement($pb67a2609, $v5d3813882f = false); abstract public static function getDropDatabaseStatement($pb67a2609, $v5d3813882f = false); abstract public static function getSelectedDBStatement($v5d3813882f = false); abstract public static function getDBsStatement($v5d3813882f = false); abstract public static function getTablesStatement($pb67a2609 = false, $v5d3813882f = false); abstract public static function getTableFieldsStatement($pc661dc6b, $pb67a2609 = false, $v5d3813882f = false); abstract public static function getForeignKeysStatement($pc661dc6b, $pb67a2609 = false, $v5d3813882f = false); abstract public static function getCreateTableStatement($v87a92bb1ad, $v5d3813882f = false); abstract public static function getCreateTableAttributeStatement($v261e7b366d, $v5d3813882f = false, &$v808a08b1f9 = array()); abstract public static function getRenameTableStatement($pe8f357f7, $v38abe7147f, $v5d3813882f = false); abstract public static function getDropTableStatement($pc661dc6b, $v5d3813882f = false); abstract public static function getDropTableCascadeStatement($pc661dc6b, $v5d3813882f = false); abstract public static function getAddTableAttributeStatement($pc661dc6b, $v261e7b366d, $v5d3813882f = false); abstract public static function getModifyTableAttributeStatement($pc661dc6b, $v261e7b366d, $v5d3813882f = false); abstract public static function getRenameTableAttributeStatement($pc661dc6b, $pfc66218f, $paa23699f, $v5d3813882f = false); abstract public static function getDropTableAttributeStatement($pc661dc6b, $v97915b9670, $v5d3813882f = false); abstract public static function getAddTablePrimaryKeysStatement($pc661dc6b, $pfdbbc383, $v5d3813882f = false); abstract public static function getDropTablePrimaryKeysStatement($pc661dc6b, $v5d3813882f = false); abstract public static function getAddTableForeignKeyStatement($pc661dc6b, $pa7c14731, $v5d3813882f = false); abstract public static function getDropTableForeignKeysStatement($pc661dc6b, $v5d3813882f = false); abstract public static function getDropTableForeignConstraintStatement($pc661dc6b, $pa28639ac, $v5d3813882f = false); abstract public static function getAddTableIndexStatement($pc661dc6b, $pfdbbc383, $v5d3813882f = false); abstract public static function getLoadTableDataFromFileStatement($pf3dc0762, $pc661dc6b, $v5d3813882f = false); abstract public static function getShowCreateTableStatement($pc661dc6b, $v5d3813882f = false); abstract public static function getShowCreateViewStatement($pa36e00ea, $v5d3813882f = false); abstract public static function getShowCreateTriggerStatement($v5ed3bce1d1, $v5d3813882f = false); abstract public static function getShowCreateProcedureStatement($pbda8f16d, $v5d3813882f = false); abstract public static function getShowCreateFunctionStatement($v2f4e66e00a, $v5d3813882f = false); abstract public static function getShowCreateEventStatement($v76392c9cad, $v5d3813882f = false); abstract public static function getShowTablesStatement($pb67a2609, $v5d3813882f = false); abstract public static function getShowViewsStatement($pb67a2609, $v5d3813882f = false); abstract public static function getShowTriggersStatement($pb67a2609, $v5d3813882f = false); abstract public static function getShowTableColumnsStatement($pc661dc6b, $pb67a2609 = false, $v5d3813882f = false); abstract public static function getShowForeignKeysStatement($pc661dc6b, $pb67a2609 = false, $v5d3813882f = false); abstract public static function getShowProceduresStatement($pb67a2609, $v5d3813882f = false); abstract public static function getShowFunctionsStatement($pb67a2609, $v5d3813882f = false); abstract public static function getShowEventsStatement($pb67a2609, $v5d3813882f = false); abstract public static function getSetupTransactionStatement($v5d3813882f = false); abstract public static function getStartTransactionStatement($v5d3813882f = false); abstract public static function getCommitTransactionStatement($v5d3813882f = false); abstract public static function getStartDisableAutocommitStatement($v5d3813882f = false); abstract public static function getEndDisableAutocommitStatement($v5d3813882f = false); abstract public static function getStartLockTableWriteStatement($pc661dc6b, $v5d3813882f = false); abstract public static function getStartLockTableReadStatement($pc661dc6b, $v5d3813882f = false); abstract public static function getEndLockTableStatement($v5d3813882f = false); abstract public static function getStartDisableKeysStatement($pc661dc6b, $v5d3813882f = false); abstract public static function getEndDisableKeysStatement($pc661dc6b, $v5d3813882f = false); abstract public static function getDropTriggerStatement($v5ed3bce1d1, $v5d3813882f = false); abstract public static function getDropProcedureStatement($pbda8f16d, $v5d3813882f = false); abstract public static function getDropFunctionStatement($v2f4e66e00a, $v5d3813882f = false); abstract public static function getDropEventStatement($v76392c9cad, $v5d3813882f = false); abstract public static function getDropViewStatement($pa36e00ea, $v5d3813882f = false); public static function getDriverClassNameByPath($pc427838f) { $v9cd205cadb = explode(".", $pc427838f); return $v9cd205cadb[ count($v9cd205cadb) - 1 ]; } public static function getDriverTypeByClassName($v7d3018e7db) { if (!class_exists($v7d3018e7db)) include_once get_lib("org.phpframework.db.driver.$v7d3018e7db"); return $v7d3018e7db::getType(); } public static function getDriverTypeByPath($pc427838f) { $v7d3018e7db = self::getDriverClassNameByPath($pc427838f); return $v7d3018e7db ? self::getDriverTypeByClassName($v7d3018e7db) : null; } public static function getAvailableDriverClassNames() { if (!empty(self::$v4425d5586a["getAvailableDriverClassNames"])) return self::$v4425d5586a["getAvailableDriverClassNames"]; $v6ee393d9fb = array_diff(scandir(__DIR__ . "/driver"), array('..', '.')); $v11ef817e73 = array(); foreach ($v6ee393d9fb as $v7dffdb5a5b) $v11ef817e73[] = pathinfo($v7dffdb5a5b, PATHINFO_FILENAME); self::$v4425d5586a["getAvailableDriverClassNames"] = $v11ef817e73; return $v11ef817e73; } public static function getDriverClassNameByType($v3fb9f41470) { $pc1dc52bc = self::getAvailableDriverClassNames(); foreach ($pc1dc52bc as $v7d3018e7db) { if (!class_exists($v7d3018e7db)) include_once get_lib("org.phpframework.db.driver.$v7d3018e7db"); if ($v3fb9f41470 == $v7d3018e7db::getType()) return $v7d3018e7db; } return null; } public static function getDriverPathByType($v3fb9f41470) { $v7d3018e7db = self::getDriverClassNameByType($v3fb9f41470); return $v7d3018e7db ? "org.phpframework.db.driver.$v7d3018e7db": ""; } public static function createDriverByType($v3fb9f41470) { $v7d3018e7db = self::getDriverClassNameByType($v3fb9f41470); return $v7d3018e7db ? new $v7d3018e7db() : null; } public static function convertDSNToOptions($v56c929bbd8) { if (empty($v56c929bbd8) || (false === ($pbd1bc7b0 = strpos($v56c929bbd8, ":")))) return null; $v5d3813882f = array( "extension" => strtolower(substr($v56c929bbd8, 0, $pbd1bc7b0)), ); $v56c929bbd8 = substr($v56c929bbd8, $pbd1bc7b0 + 1); $v9cd205cadb = explode(";", $v56c929bbd8); foreach ($v9cd205cadb as $v1d2d80ed32) { $pfb662071 = explode("=", $v1d2d80ed32); $v5d3813882f[ strtolower($pfb662071[0]) ] = isset($pfb662071[1]) ? $pfb662071[1] : null; } if (empty($v5d3813882f['host']) && !empty($v5d3813882f['unix_socket'])) $v5d3813882f["host"] = $v5d3813882f['unix_socket']; if (empty($v5d3813882f["host"]) && !empty($v5d3813882f['server'])) { $v9cd205cadb = explode(":", $v5d3813882f['server']); $v5d3813882f['host'] = $v9cd205cadb[0]; if ($v9cd205cadb[1] && empty($v5d3813882f['port'])) $v5d3813882f['port'] = $v9cd205cadb[1]; } if (empty($v5d3813882f['dbname']) && !empty($v5d3813882f['database'])) $v5d3813882f['dbname'] = $v5d3813882f['database']; return $v5d3813882f; } public static function getDSNByType($v3fb9f41470, $v5d3813882f) { $v972f1a5c2b = self::createDriverByType($v3fb9f41470); return $v972f1a5c2b ? $v972f1a5c2b->getDSN($v5d3813882f) : null; } public static function getAllDriverLabelsByType() { if (!empty(self::$v4425d5586a["getAllDriverLabelsByType"])) return self::$v4425d5586a["getAllDriverLabelsByType"]; $pc1dc52bc = self::getAvailableDriverClassNames(); $pf72c1d58 = array(); foreach ($pc1dc52bc as $v7d3018e7db) { if (!class_exists($v7d3018e7db)) include_once get_lib("org.phpframework.db.driver.$v7d3018e7db"); $v3fb9f41470 = $v7d3018e7db::getType(); $pf72c1d58[$v3fb9f41470] = $v7d3018e7db::getLabel(); } self::$v4425d5586a["getAllDriverLabelsByType"] = $pf72c1d58; return $pf72c1d58; } public static function getAllDBCharsetsByType() { if (!empty(self::$v4425d5586a["getAllDBCharsetsByType"])) return self::$v4425d5586a["getAllDBCharsetsByType"]; $pc1dc52bc = self::getAvailableDriverClassNames(); $pf72c1d58 = array(); foreach ($pc1dc52bc as $v7d3018e7db) { if (!class_exists($v7d3018e7db)) include_once get_lib("org.phpframework.db.driver.$v7d3018e7db"); $v3fb9f41470 = $v7d3018e7db::getType(); $pf72c1d58[$v3fb9f41470] = $v7d3018e7db::getDBCharsets(); } self::$v4425d5586a["getAllDBCharsetsByType"] = $pf72c1d58; return $pf72c1d58; } public static function getAllStorageEnginesByType() { if (!empty(self::$v4425d5586a["getAllStorageEnginesByType"])) return self::$v4425d5586a["getAllStorageEnginesByType"]; $pc1dc52bc = self::getAvailableDriverClassNames(); $pf72c1d58 = array(); foreach ($pc1dc52bc as $v7d3018e7db) { if (!class_exists($v7d3018e7db)) include_once get_lib("org.phpframework.db.driver.$v7d3018e7db"); $v3fb9f41470 = $v7d3018e7db::getType(); $pf72c1d58[$v3fb9f41470] = $v7d3018e7db::getStorageEngines(); } self::$v4425d5586a["getAllStorageEnginesByType"] = $pf72c1d58; return $pf72c1d58; } public static function getAllExtensionsByType() { if (!empty(self::$v4425d5586a["getAllExtensionsByType"])) return self::$v4425d5586a["getAllExtensionsByType"]; $pc1dc52bc = self::getAvailableDriverClassNames(); $pf72c1d58 = array(); foreach ($pc1dc52bc as $v7d3018e7db) { if (!class_exists($v7d3018e7db)) include_once get_lib("org.phpframework.db.driver.$v7d3018e7db"); $v3fb9f41470 = $v7d3018e7db::getType(); $pf72c1d58[$v3fb9f41470] = $v7d3018e7db::getAvailablePHPExtensionTypes(); } self::$v4425d5586a["getAllExtensionsByType"] = $pf72c1d58; return $pf72c1d58; } public static function getAllIgnoreConnectionOptionsByType() { if (!empty(self::$v4425d5586a["getAllIgnoreConnectionOptionsByType"])) return self::$v4425d5586a["getAllIgnoreConnectionOptionsByType"]; $pc1dc52bc = self::getAvailableDriverClassNames(); $pf72c1d58 = array(); foreach ($pc1dc52bc as $v7d3018e7db) { if (!class_exists($v7d3018e7db)) include_once get_lib("org.phpframework.db.driver.$v7d3018e7db"); $v3fb9f41470 = $v7d3018e7db::getType(); $pf72c1d58[$v3fb9f41470] = $v7d3018e7db::getIgnoreConnectionOptions(); } self::$v4425d5586a["getAllIgnoreConnectionOptionsByType"] = $pf72c1d58; return $pf72c1d58; } public static function getAllIgnoreConnectionOptionsByExtensionAndType() { if (!empty(self::$v4425d5586a["getAllIgnoreConnectionOptionsByExtensionAndType"])) return self::$v4425d5586a["getAllIgnoreConnectionOptionsByExtensionAndType"]; $pc1dc52bc = self::getAvailableDriverClassNames(); $pf72c1d58 = array(); foreach ($pc1dc52bc as $v7d3018e7db) { if (!class_exists($v7d3018e7db)) include_once get_lib("org.phpframework.db.driver.$v7d3018e7db"); $v3fb9f41470 = $v7d3018e7db::getType(); $pf72c1d58[$v3fb9f41470] = $v7d3018e7db::getIgnoreConnectionOptionsByExtension(); } self::$v4425d5586a["getAllIgnoreConnectionOptionsByExtensionAndType"] = $pf72c1d58; return $pf72c1d58; } public static function getAllColumnTypesByType() { if (!empty(self::$v4425d5586a["getAllColumnTypesByType"])) return self::$v4425d5586a["getAllColumnTypesByType"]; $pc1dc52bc = self::getAvailableDriverClassNames(); $pf72c1d58 = array(); foreach ($pc1dc52bc as $v7d3018e7db) { if (!class_exists($v7d3018e7db)) include_once get_lib("org.phpframework.db.driver.$v7d3018e7db"); $v3fb9f41470 = $v7d3018e7db::getType(); $pf72c1d58[$v3fb9f41470] = $v7d3018e7db::getDBColumnTypes(); } self::$v4425d5586a["getAllColumnTypesByType"] = $pf72c1d58; return $pf72c1d58; } public static function getAllColumnTypes() { return self::mergeItems( self::getAllColumnTypesByType() ); } public static function getAllSharedColumnTypes() { return self::intersectItems( self::getAllColumnTypesByType() ); } public static function getAllColumnSimpleTypesByType() { if (!empty(self::$v4425d5586a["getAllColumnSimpleTypesByType"])) return self::$v4425d5586a["getAllColumnSimpleTypesByType"]; $pc1dc52bc = self::getAvailableDriverClassNames(); $pf72c1d58 = array(); foreach ($pc1dc52bc as $v7d3018e7db) { if (!class_exists($v7d3018e7db)) include_once get_lib("org.phpframework.db.driver.$v7d3018e7db"); $v3fb9f41470 = $v7d3018e7db::getType(); $pf72c1d58[$v3fb9f41470] = $v7d3018e7db::getDBColumnSimpleTypes(); } self::$v4425d5586a["getAllColumnSimpleTypesByType"] = $pf72c1d58; return $pf72c1d58; } public static function getAllColumnSimpleTypes() { return self::mergeItems( self::getAllColumnSimpleTypesByType() ); } public static function getAllSharedColumnSimpleTypes() { return self::intersectItems( self::getAllColumnSimpleTypesByType() ); } public static function getAllColumnNumericTypesByType() { if (!empty(self::$v4425d5586a["getAllColumnNumericTypesByType"])) return self::$v4425d5586a["getAllColumnNumericTypesByType"]; $pc1dc52bc = self::getAvailableDriverClassNames(); $pf72c1d58 = array(); foreach ($pc1dc52bc as $v7d3018e7db) { if (!class_exists($v7d3018e7db)) include_once get_lib("org.phpframework.db.driver.$v7d3018e7db"); $v3fb9f41470 = $v7d3018e7db::getType(); $pf72c1d58[$v3fb9f41470] = $v7d3018e7db::getDBColumnNumericTypes(); } self::$v4425d5586a["getAllColumnNumericTypesByType"] = $pf72c1d58; return $pf72c1d58; } public static function getAllColumnNumericTypes() { return array_values( self::mergeItems( self::getAllColumnNumericTypesByType() ) ); } public static function getAllSharedColumnNumericTypes() { return array_values( self::intersectItems( self::getAllColumnNumericTypesByType() ) ); } public static function getAllColumnDateTypesByType() { if (!empty(self::$v4425d5586a["getAllColumnDateTypesByType"])) return self::$v4425d5586a["getAllColumnDateTypesByType"]; $pc1dc52bc = self::getAvailableDriverClassNames(); $pf72c1d58 = array(); foreach ($pc1dc52bc as $v7d3018e7db) { if (!class_exists($v7d3018e7db)) include_once get_lib("org.phpframework.db.driver.$v7d3018e7db"); $v3fb9f41470 = $v7d3018e7db::getType(); $pf72c1d58[$v3fb9f41470] = $v7d3018e7db::getDBColumnDateTypes(); } self::$v4425d5586a["getAllColumnDateTypesByType"] = $pf72c1d58; return $pf72c1d58; } public static function getAllColumnDateTypes() { return array_values( self::mergeItems( self::getAllColumnDateTypesByType() ) ); } public static function getAllSharedColumnDateTypes() { return array_values( self::intersectItems( self::getAllColumnDateTypesByType() ) ); } public static function getAllColumnTextTypesByType() { if (!empty(self::$v4425d5586a["getAllColumnTextTypesByType"])) return self::$v4425d5586a["getAllColumnTextTypesByType"]; $pc1dc52bc = self::getAvailableDriverClassNames(); $pf72c1d58 = array(); foreach ($pc1dc52bc as $v7d3018e7db) { if (!class_exists($v7d3018e7db)) include_once get_lib("org.phpframework.db.driver.$v7d3018e7db"); $v3fb9f41470 = $v7d3018e7db::getType(); $pf72c1d58[$v3fb9f41470] = $v7d3018e7db::getDBColumnTextTypes(); } self::$v4425d5586a["getAllColumnTextTypesByType"] = $pf72c1d58; return $pf72c1d58; } public static function getAllColumnTextTypes() { return array_values( self::mergeItems( self::getAllColumnTextTypesByType() ) ); } public static function getAllSharedColumnTextTypes() { return array_values( self::intersectItems( self::getAllColumnTextTypesByType() ) ); } public static function getAllColumnBlobTypesByType() { if (!empty(self::$v4425d5586a["getAllColumnBlobTypesByType"])) return self::$v4425d5586a["getAllColumnBlobTypesByType"]; $pc1dc52bc = self::getAvailableDriverClassNames(); $pf72c1d58 = array(); foreach ($pc1dc52bc as $v7d3018e7db) { if (!class_exists($v7d3018e7db)) include_once get_lib("org.phpframework.db.driver.$v7d3018e7db"); $v3fb9f41470 = $v7d3018e7db::getType(); $pf72c1d58[$v3fb9f41470] = $v7d3018e7db::getDBColumnBlobTypes(); } self::$v4425d5586a["getAllColumnBlobTypesByType"] = $pf72c1d58; return $pf72c1d58; } public static function getAllColumnBlobTypes() { return array_values( self::mergeItems( self::getAllColumnBlobTypesByType() ) ); } public static function getAllSharedColumnBlobTypes() { return array_values( self::intersectItems( self::getAllColumnBlobTypesByType() ) ); } public static function getAllColumnBooleanTypesByType() { if (!empty(self::$v4425d5586a["getAllColumnBooleanTypesByType"])) return self::$v4425d5586a["getAllColumnBooleanTypesByType"]; $pc1dc52bc = self::getAvailableDriverClassNames(); $pf72c1d58 = array(); foreach ($pc1dc52bc as $v7d3018e7db) { if (!class_exists($v7d3018e7db)) include_once get_lib("org.phpframework.db.driver.$v7d3018e7db"); $v3fb9f41470 = $v7d3018e7db::getType(); $pf72c1d58[$v3fb9f41470] = $v7d3018e7db::getDBColumnBooleanTypes(); } self::$v4425d5586a["getAllColumnBooleanTypesByType"] = $pf72c1d58; return $pf72c1d58; } public static function getAllColumnBooleanTypes() { return array_values( self::mergeItems( self::getAllColumnBooleanTypesByType() ) ); } public static function getAllSharedColumnBooleanTypes() { return array_values( self::intersectItems( self::getAllColumnBooleanTypesByType() ) ); } public static function getAllColumnMandatoryLengthTypesByType() { if (!empty(self::$v4425d5586a["getAllColumnMandatoryLengthTypesByType"])) return self::$v4425d5586a["getAllColumnMandatoryLengthTypesByType"]; $pc1dc52bc = self::getAvailableDriverClassNames(); $pf72c1d58 = array(); foreach ($pc1dc52bc as $v7d3018e7db) { if (!class_exists($v7d3018e7db)) include_once get_lib("org.phpframework.db.driver.$v7d3018e7db"); $v3fb9f41470 = $v7d3018e7db::getType(); $pf72c1d58[$v3fb9f41470] = $v7d3018e7db::getDBColumnMandatoryLengthTypes(); } self::$v4425d5586a["getAllColumnMandatoryLengthTypesByType"] = $pf72c1d58; return $pf72c1d58; } public static function getAllColumnMandatoryLengthTypes() { return self::mergeItems( self::getAllColumnMandatoryLengthTypesByType() ); } public static function getAllSharedColumnMandatoryLengthTypes() { $v8c77794226 = self::getAllColumnMandatoryLengthTypesByType(); $v86066462c3 = array(); foreach ($v8c77794226 as $v3fb9f41470 => $pf72c1d58) if ($pf72c1d58) $v86066462c3[] = $pf72c1d58; return call_user_func_array("array_intersect_key", $v86066462c3); } public static function getAllColumnAutoIncrementTypesByType() { if (!empty(self::$v4425d5586a["getAllColumnAutoIncrementTypesByType"])) return self::$v4425d5586a["getAllColumnAutoIncrementTypesByType"]; $pc1dc52bc = self::getAvailableDriverClassNames(); $pf72c1d58 = array(); foreach ($pc1dc52bc as $v7d3018e7db) { if (!class_exists($v7d3018e7db)) include_once get_lib("org.phpframework.db.driver.$v7d3018e7db"); $v3fb9f41470 = $v7d3018e7db::getType(); $pf72c1d58[$v3fb9f41470] = $v7d3018e7db::getDBColumnAutoIncrementTypes(); } self::$v4425d5586a["getAllColumnAutoIncrementTypesByType"] = $pf72c1d58; return $pf72c1d58; } public static function getAllColumnAutoIncrementTypes() { return array_values( self::mergeItems( self::getAllColumnAutoIncrementTypesByType() ) ); } public static function getAllSharedColumnAutoIncrementTypes() { return array_values( self::intersectItems( self::getAllColumnAutoIncrementTypesByType() ) ); } public static function getAllBooleanTypeAvailableValuesByType() { if (!empty(self::$v4425d5586a["getAllBooleanTypeAvailableValuesByType"])) return self::$v4425d5586a["getAllBooleanTypeAvailableValuesByType"]; $pc1dc52bc = self::getAvailableDriverClassNames(); $pf72c1d58 = array(); foreach ($pc1dc52bc as $v7d3018e7db) { if (!class_exists($v7d3018e7db)) include_once get_lib("org.phpframework.db.driver.$v7d3018e7db"); $v3fb9f41470 = $v7d3018e7db::getType(); $pf72c1d58[$v3fb9f41470] = $v7d3018e7db::getDBBooleanTypeAvailableValues(); } self::$v4425d5586a["getAllBooleanTypeAvailableValuesByType"] = $pf72c1d58; return $pf72c1d58; } public static function getAllBooleanTypeAvailableValues() { return self::mergeItems( self::getAllBooleanTypeAvailableValuesByType() ); } public static function getAllSharedBooleanTypeAvailableValues() { $v8c77794226 = self::getAllBooleanTypeAvailableValuesByType(); $v86066462c3 = array(); foreach ($v8c77794226 as $v3fb9f41470 => $pf72c1d58) if ($pf72c1d58) $v86066462c3[] = $pf72c1d58; return call_user_func_array("array_intersect_key", $v86066462c3); } public static function getAllCurrentTimestampAvailableValuesByType() { if (!empty(self::$v4425d5586a["getAllCurrentTimestampAvailableValuesByType"])) return self::$v4425d5586a["getAllCurrentTimestampAvailableValuesByType"]; $pc1dc52bc = self::getAvailableDriverClassNames(); $pf72c1d58 = array(); foreach ($pc1dc52bc as $v7d3018e7db) { if (!class_exists($v7d3018e7db)) include_once get_lib("org.phpframework.db.driver.$v7d3018e7db"); $v3fb9f41470 = $v7d3018e7db::getType(); $pf72c1d58[$v3fb9f41470] = $v7d3018e7db::getDBCurrentTimestampAvailableValues(); } self::$v4425d5586a["getAllCurrentTimestampAvailableValuesByType"] = $pf72c1d58; return $pf72c1d58; } public static function getAllCurrentTimestampAvailableValues() { return array_values( self::mergeItems( self::getAllCurrentTimestampAvailableValuesByType() ) ); } public static function getAllSharedCurrentTimestampAvailableValues() { return array_values( self::intersectItems( self::getAllCurrentTimestampAvailableValuesByType() ) ); } public static function getAllColumnTypesIgnoredPropsByType() { if (!empty(self::$v4425d5586a["getAllColumnTypesIgnoredPropsByType"])) return self::$v4425d5586a["getAllColumnTypesIgnoredPropsByType"]; $pc1dc52bc = self::getAvailableDriverClassNames(); $pf72c1d58 = array(); foreach ($pc1dc52bc as $v7d3018e7db) { if (!class_exists($v7d3018e7db)) include_once get_lib("org.phpframework.db.driver.$v7d3018e7db"); $v3fb9f41470 = $v7d3018e7db::getType(); $pf72c1d58[$v3fb9f41470] = $v7d3018e7db::getDBColumnTypesIgnoredProps(); } self::$v4425d5586a["getAllColumnTypesIgnoredPropsByType"] = $pf72c1d58; return $pf72c1d58; } public static function getAllColumnTypesIgnoredProps() { return self::mergeItems( self::getAllColumnTypesIgnoredPropsByType() ); } public static function getAllSharedColumnTypesIgnoredProps() { $v8c77794226 = self::getAllColumnTypesIgnoredPropsByType(); $v86066462c3 = array(); foreach ($v8c77794226 as $v3fb9f41470 => $pf72c1d58) if ($pf72c1d58) $v86066462c3[] = $pf72c1d58; return call_user_func_array("array_intersect_key", $v86066462c3); } public static function getAllColumnTypesHiddenPropsByType() { if (!empty(self::$v4425d5586a["getAllColumnTypesHiddenPropsByType"])) return self::$v4425d5586a["getAllColumnTypesHiddenPropsByType"]; $pc1dc52bc = self::getAvailableDriverClassNames(); $pf72c1d58 = array(); foreach ($pc1dc52bc as $v7d3018e7db) { if (!class_exists($v7d3018e7db)) include_once get_lib("org.phpframework.db.driver.$v7d3018e7db"); $v3fb9f41470 = $v7d3018e7db::getType(); $pf72c1d58[$v3fb9f41470] = $v7d3018e7db::getDBColumnTypesHiddenProps(); } self::$v4425d5586a["getAllColumnTypesHiddenPropsByType"] = $pf72c1d58; return $pf72c1d58; } public static function getAllColumnTypesHiddenProps() { return array_values( self::mergeItems( self::getAllColumnTypesHiddenPropsByType() ) ); } public static function getAllSharedColumnTypesHiddenProps() { $v8c77794226 = self::getAllColumnTypesHiddenPropsByType(); $v86066462c3 = array(); foreach ($v8c77794226 as $v3fb9f41470 => $pf72c1d58) $v86066462c3[] = $pf72c1d58 ? $pf72c1d58 : array(); return array_values( call_user_func_array("array_intersect", $v86066462c3) ); } public static function getAllReservedWordsByType() { if (!empty(self::$v4425d5586a["getAllReservedWordsByType"])) return self::$v4425d5586a["getAllReservedWordsByType"]; $pc1dc52bc = self::getAvailableDriverClassNames(); $pf72c1d58 = array(); foreach ($pc1dc52bc as $v7d3018e7db) { if (!class_exists($v7d3018e7db)) include_once get_lib("org.phpframework.db.driver.$v7d3018e7db"); $v3fb9f41470 = $v7d3018e7db::getType(); $pf72c1d58[$v3fb9f41470] = $v7d3018e7db::getReservedWords(); } self::$v4425d5586a["getAllReservedWordsByType"] = $pf72c1d58; return $pf72c1d58; } public static function getAllReservedWords() { return array_values( self::mergeItems( self::getAllReservedWordsByType() ) ); } public static function getAllSharedReservedWords() { return array_values( self::intersectItems( self::getAllReservedWordsByType() ) ); } public static function splitSQL($v3c76382d93, $v5d3813882f = false) { $v1612a5ddce = array(); $v19cbfb3aee = $v5d3813882f && !empty($v5d3813882f["delimiter"]) ? $v5d3813882f["delimiter"] : ";"; $v7340e7a739 = $v5d3813882f && !empty($v5d3813882f["remove_comments"]); if (strpos($v3c76382d93, $v19cbfb3aee) !== false) { $v365d20463c = false; $v8f85090cce = false; $v7e4b517c18 = 0; $v27e200bd34 = strlen($v3c76382d93); $v5f74702fc4 = strlen($v19cbfb3aee); for ($v43dd7d0051 = 0 ; $v43dd7d0051 < $v27e200bd34; $v43dd7d0051++) { $pc288256e = $v3c76382d93[$v43dd7d0051]; if ($pc288256e == '"' && !TextSanitizer::isCharEscaped($v3c76382d93, $v43dd7d0051) && !$v8f85090cce) $v365d20463c = !$v365d20463c; else if ($pc288256e == "'" && !TextSanitizer::isCharEscaped($v3c76382d93, $v43dd7d0051) && !$v365d20463c) $v8f85090cce = !$v8f85090cce; else if ($v7340e7a739 && $pc288256e == "\n" && $v3c76382d93[$v43dd7d0051 + 1] == "-" && $v3c76382d93[$v43dd7d0051 + 2] == "-" && !$v365d20463c && !$v8f85090cce) { $pbd1bc7b0 = strpos($v3c76382d93, "\n", $v43dd7d0051 + 3); $pbd1bc7b0 = is_numeric($pbd1bc7b0) ? $pbd1bc7b0 : $v27e200bd34; $v43dd7d0051 = $pbd1bc7b0 - 1; } else if ($v7340e7a739 && $v43dd7d0051 == 0 && $v3c76382d93[$v43dd7d0051] == "-" && $v3c76382d93[$v43dd7d0051 + 1] == "-" && !$v365d20463c && !$v8f85090cce) { $pbd1bc7b0 = strpos($v3c76382d93, "\n", $v43dd7d0051 + 2); $pbd1bc7b0 = is_numeric($pbd1bc7b0) ? $pbd1bc7b0 : $v27e200bd34; $v43dd7d0051 = $pbd1bc7b0 - 1; } else if ($v7340e7a739 && $pc288256e == "/" && $v3c76382d93[$v43dd7d0051 + 1] == "*" && !$v365d20463c && !$v8f85090cce) { $pbd1bc7b0 = strpos($v3c76382d93, "*/", $v43dd7d0051 + 2); $pbd1bc7b0 = is_numeric($pbd1bc7b0) ? $pbd1bc7b0 : $v27e200bd34; $v43dd7d0051 = $pbd1bc7b0 + 1; } else if (!$v365d20463c && !$v8f85090cce && strtoupper($pc288256e) == "D" && preg_match("/^DELIMITER(\s+|'|\")/i", substr($v3c76382d93, $v43dd7d0051, 10))) { $v9d1744e29c = trim( substr($v3c76382d93, $v7e4b517c18, $v43dd7d0051 - $v7e4b517c18) ); if ($v9d1744e29c) { if ($v7340e7a739) $v9d1744e29c = self::removeSQLComments($v9d1744e29c, $v5d3813882f); if ($v9d1744e29c && $v9d1744e29c != $v19cbfb3aee) $v1612a5ddce[] = $v9d1744e29c; } $v2c0355a1b9 = strpos($v3c76382d93, "\n", $v43dd7d0051 + 10); $v2c0355a1b9 = $v2c0355a1b9 !== false ? $v2c0355a1b9 : $v27e200bd34; $v23ecfe5cb9 = trim( substr($v3c76382d93, $v43dd7d0051 + 10, $v2c0355a1b9 - ($v43dd7d0051 + 10)) ); if ($v23ecfe5cb9 && ( ($v23ecfe5cb9[0] == "'" && substr($v23ecfe5cb9, -1) == "'") || ($v23ecfe5cb9[0] == '"' && substr($v23ecfe5cb9, -1) == '"') )) $v23ecfe5cb9 = substr($v23ecfe5cb9, 1, -1); if ($v23ecfe5cb9) { $v19cbfb3aee = $v23ecfe5cb9; $v5f74702fc4 = strlen($v19cbfb3aee); } $v1612a5ddce[] = trim( substr($v3c76382d93, $v43dd7d0051, $v2c0355a1b9 - $v43dd7d0051) ); $v7e4b517c18 = $v2c0355a1b9 + 1; $v43dd7d0051 = $v2c0355a1b9; } else if ($pc288256e == $v19cbfb3aee[0] && substr($v3c76382d93, $v43dd7d0051, $v5f74702fc4) == $v19cbfb3aee && !$v365d20463c && !$v8f85090cce && $v43dd7d0051 != $v27e200bd34 - 1) { $v9d1744e29c = trim( substr($v3c76382d93, $v7e4b517c18, ($v43dd7d0051 - $v7e4b517c18) + $v5f74702fc4) ); if ($v9d1744e29c) { if ($v7340e7a739) $v9d1744e29c = self::removeSQLComments($v9d1744e29c, $v5d3813882f); if ($v9d1744e29c && $v9d1744e29c != $v19cbfb3aee) $v1612a5ddce[] = $v9d1744e29c; } $v7e4b517c18 = $v43dd7d0051 + $v5f74702fc4; } if ($v43dd7d0051 == $v27e200bd34 - 1) { $v9d1744e29c = trim( substr($v3c76382d93, $v7e4b517c18) ); if ($v9d1744e29c) { if ($v7340e7a739) $v9d1744e29c = self::removeSQLComments($v9d1744e29c, $v5d3813882f); if ($v9d1744e29c && $v9d1744e29c != $v19cbfb3aee) $v1612a5ddce[] = $v9d1744e29c; } } } } else if (trim($v3c76382d93)) { if ($v7340e7a739) $v3c76382d93 = self::removeSQLComments($v3c76382d93, $v5d3813882f); if ($v3c76382d93) $v1612a5ddce[] = $v3c76382d93; } return $v1612a5ddce; } public static function removeSQLComments($v3c76382d93, $v5d3813882f = false) { if (strpos($v3c76382d93, "/*") !== false || strpos($v3c76382d93, "--") !== false) { $v365d20463c = false; $v8f85090cce = false; $v7e4b517c18 = 0; $v27e200bd34 = strlen($v3c76382d93); $v7eab668a0b = ""; for ($v43dd7d0051 = 0 ; $v43dd7d0051 < $v27e200bd34; $v43dd7d0051++) { $pc288256e = $v3c76382d93[$v43dd7d0051]; if ($pc288256e == '"' && !TextSanitizer::isCharEscaped($v3c76382d93, $v43dd7d0051) && !$v8f85090cce) $v365d20463c = !$v365d20463c; else if ($pc288256e == "'" && !TextSanitizer::isCharEscaped($v3c76382d93, $v43dd7d0051) && !$v365d20463c) $v8f85090cce = !$v8f85090cce; else if ($pc288256e == "\n" && $v3c76382d93[$v43dd7d0051 + 1] == "-" && $v3c76382d93[$v43dd7d0051 + 2] == "-" && !$v365d20463c && !$v8f85090cce) { $v7eab668a0b .= substr($v3c76382d93, $v7e4b517c18, ($v43dd7d0051 - $v7e4b517c18) + 1); $pbd1bc7b0 = strpos($v3c76382d93, "\n", $v43dd7d0051 + 3); $pbd1bc7b0 = is_numeric($pbd1bc7b0) ? $pbd1bc7b0 : $v27e200bd34; $v7e4b517c18 = $pbd1bc7b0; $v43dd7d0051 = $pbd1bc7b0 - 1; } else if ($v43dd7d0051 == 0 && $v3c76382d93[$v43dd7d0051] == "-" && $v3c76382d93[$v43dd7d0051 + 1] == "-" && !$v365d20463c && !$v8f85090cce) { $v7eab668a0b .= substr($v3c76382d93, $v7e4b517c18, ($v43dd7d0051 - $v7e4b517c18)); $pbd1bc7b0 = strpos($v3c76382d93, "\n", $v43dd7d0051 + 2); $pbd1bc7b0 = is_numeric($pbd1bc7b0) ? $pbd1bc7b0 : $v27e200bd34; $v7e4b517c18 = $pbd1bc7b0; $v43dd7d0051 = $pbd1bc7b0 - 1; } else if ($pc288256e == "/" && $v3c76382d93[$v43dd7d0051 + 1] == "*" && !$v365d20463c && !$v8f85090cce) { $v7eab668a0b .= substr($v3c76382d93, $v7e4b517c18, ($v43dd7d0051 - $v7e4b517c18)); $pbd1bc7b0 = strpos($v3c76382d93, "*/", $v43dd7d0051 + 2); $pbd1bc7b0 = is_numeric($pbd1bc7b0) ? $pbd1bc7b0 : $v27e200bd34; $v7e4b517c18 = $pbd1bc7b0 + 2; $v43dd7d0051 = $pbd1bc7b0 + 1; } if ($v43dd7d0051 == $v27e200bd34 - 1) $v7eab668a0b .= substr($v3c76382d93, $v7e4b517c18); } } else $v7eab668a0b = $v3c76382d93; return self::removeSQLRepeatedDelimiters($v7eab668a0b, $v5d3813882f); } public static function removeSQLRepeatedDelimiters($v3c76382d93, $v5d3813882f = false) { $v19cbfb3aee = $v5d3813882f && !empty($v5d3813882f["delimiter"]) ? $v5d3813882f["delimiter"] : ";"; $v5f74702fc4 = strlen($v19cbfb3aee); $v365d20463c = false; $v8f85090cce = false; $pe8699725 = false; $v27e200bd34 = strlen($v3c76382d93); $v7eab668a0b = ""; for ($v43dd7d0051 = 0 ; $v43dd7d0051 < $v27e200bd34; $v43dd7d0051++) { $pc288256e = $v3c76382d93[$v43dd7d0051]; if ($pc288256e == '"' && !TextSanitizer::isCharEscaped($v3c76382d93, $v43dd7d0051) && !$v8f85090cce) { $v365d20463c = !$v365d20463c; $pe8699725 = false; } else if ($pc288256e == "'" && !TextSanitizer::isCharEscaped($v3c76382d93, $v43dd7d0051) && !$v365d20463c) { $v8f85090cce = !$v8f85090cce; $pe8699725 = false; } else if (!$v365d20463c && !$v8f85090cce) { if (strtoupper($pc288256e) == "D" && preg_match("/^DELIMITER(\s+|'|\")/i", substr($v3c76382d93, $v43dd7d0051, 10))) { $pbd1bc7b0 = strpos($v3c76382d93, "\n", $v43dd7d0051 + 10); $pbd1bc7b0 = $pbd1bc7b0 !== false ? $pbd1bc7b0 : $v27e200bd34; $v23ecfe5cb9 = trim(substr($v3c76382d93, $v43dd7d0051 + 10, $pbd1bc7b0 - ($v43dd7d0051 + 10))); if ($v23ecfe5cb9 && ( ($v23ecfe5cb9[0] == "'" && substr($v23ecfe5cb9, -1) == "'") || ($v23ecfe5cb9[0] == '"' && substr($v23ecfe5cb9, -1) == '"') )) $v23ecfe5cb9 = substr($v23ecfe5cb9, 1, -1); if ($v23ecfe5cb9) { $v19cbfb3aee = $v23ecfe5cb9; $v5f74702fc4 = strlen($v23ecfe5cb9); } $v7eab668a0b .= substr($v3c76382d93, $v43dd7d0051, $pbd1bc7b0 - $v43dd7d0051 + 1); $v43dd7d0051 = $pbd1bc7b0; $pe8699725 = true; continue 1; } else if ($pe8699725 && preg_match("/\s/", $pc288256e)) continue 1; else if ($pc288256e == $v19cbfb3aee[0] && substr($v3c76382d93, $v43dd7d0051, $v5f74702fc4) == $v19cbfb3aee) { if ($pe8699725) continue 1; else { $pe8699725 = true; if ($v5f74702fc4 > 1) { $pc288256e = $v19cbfb3aee; $v43dd7d0051 += $v5f74702fc4 - 1; } $pc288256e .= "\n"; } } else $pe8699725 = false; } $v7eab668a0b .= $pc288256e; } $v7eab668a0b = preg_replace("/^\s*;+\s*/", "", $v7eab668a0b); return trim($v7eab668a0b); } public static function replaceSQLEnclosingDelimiter($v3c76382d93, $pce8f3827, $pdbe8f497) { $v13568bba50 = is_array($pce8f3827) ? $pce8f3827[0] : $pce8f3827; $v0c030cc5d3 = is_array($pce8f3827) ? $pce8f3827[1] : $pce8f3827; $v41c9014f67 = is_array($pdbe8f497) ? $pdbe8f497[0] : $pdbe8f497; $v778965ff73 = is_array($pdbe8f497) ? $pdbe8f497[1] : $pdbe8f497; if (!$v0c030cc5d3) $v0c030cc5d3 = $v13568bba50; if (!$v778965ff73) $v778965ff73 = $v41c9014f67; if ($v13568bba50 && strpos($v3c76382d93, $v13568bba50) !== false) { $v365d20463c = false; $v8f85090cce = false; $v7e4b517c18 = 0; $v27e200bd34 = strlen($v3c76382d93); $v7eab668a0b = ""; $pbf202d44 = strlen($v13568bba50); $v8905e5e947 = strlen($v0c030cc5d3); for ($v43dd7d0051 = 0 ; $v43dd7d0051 < $v27e200bd34; $v43dd7d0051++) { $pc288256e = $v3c76382d93[$v43dd7d0051]; if ($pc288256e == '"' && !TextSanitizer::isCharEscaped($v3c76382d93, $v43dd7d0051) && !$v8f85090cce) $v365d20463c = !$v365d20463c; else if ($pc288256e == "'" && !TextSanitizer::isCharEscaped($v3c76382d93, $v43dd7d0051) && !$v365d20463c) $v8f85090cce = !$v8f85090cce; else if (!$v365d20463c && !$v8f85090cce && ($pc288256e == $v13568bba50 || ($pbf202d44 > 1 && substr($v3c76382d93, $v43dd7d0051, $pbf202d44) == $v13568bba50)) ) { $v7eab668a0b .= substr($v3c76382d93, $v7e4b517c18, $v43dd7d0051 - $v7e4b517c18); $v7eab668a0b .= $v41c9014f67; $pbd1bc7b0 = $v8905e5e947 ? strpos($v3c76382d93, $v0c030cc5d3, $v43dd7d0051 + $pbf202d44) : false; if (is_numeric($pbd1bc7b0)) { $v7eab668a0b .= substr($v3c76382d93, $v43dd7d0051 + 1, $pbd1bc7b0 - ($v43dd7d0051 + 1)); $v7eab668a0b .= $v778965ff73; $v7e4b517c18 = $pbd1bc7b0 + $v8905e5e947; $v43dd7d0051 = $v7e4b517c18 - 1; } else { $v7e4b517c18 = $v43dd7d0051 + $pbf202d44; $v43dd7d0051 = $v7e4b517c18 - 1; } } if ($v43dd7d0051 == $v27e200bd34 - 1) $v7eab668a0b .= substr($v3c76382d93, $v7e4b517c18); } } else $v7eab668a0b = $v3c76382d93; return trim($v7eab668a0b); } public static function isTheSameStaticTableName($v6f92ade39f, $v0f014e538c, $v5d3813882f = false) { $v6f92ade39f = strtolower($v6f92ade39f); $v0f014e538c = strtolower($v0f014e538c); if ($v6f92ade39f == $v0f014e538c) return true; $v9cd205cadb = SQLQueryHandler::parseTableName($v6f92ade39f); $v648f89f08c = count($v9cd205cadb); $v902cb0a783 = trim($v9cd205cadb[$v648f89f08c - 1]); $pf5ba5392 = trim($v9cd205cadb[$v648f89f08c - 2]); $v8de2417f1e = trim($v9cd205cadb[$v648f89f08c - 3]); if (!$pf5ba5392) $pf5ba5392 = $v5d3813882f && !empty($v5d3813882f["schema"]) ? $v5d3813882f["schema"] : ""; if (!$v8de2417f1e) $v8de2417f1e = $v5d3813882f && !empty($v5d3813882f["db_name"]) ? $v5d3813882f["db_name"] : ""; $v9cd205cadb = SQLQueryHandler::parseTableName($v0f014e538c); $v648f89f08c = count($v9cd205cadb); $pd6267fe5 = trim($v9cd205cadb[$v648f89f08c - 1]); $pad7ea699 = trim($v9cd205cadb[$v648f89f08c - 2]); $v98d25cdd6d = trim($v9cd205cadb[$v648f89f08c - 3]); if (!$pad7ea699) $pad7ea699 = $v5d3813882f && !empty($v5d3813882f["schema"]) ? $v5d3813882f["schema"] : ""; if (!$v98d25cdd6d) $v98d25cdd6d = $v5d3813882f && !empty($v5d3813882f["db_name"]) ? $v5d3813882f["db_name"] : ""; return $v902cb0a783 == $pd6267fe5 && ( !empty($v5d3813882f["simple_comparison"]) || ($pf5ba5392 == $pad7ea699 && $v8de2417f1e == $v98d25cdd6d) ); } public static function isStaticTableInNamesList($v6bf1a193b2, $pdbef745e, $v5d3813882f = false) { $pc661dc6b = self::getStaticTableInNamesList($v6bf1a193b2, $pdbef745e, $v5d3813882f); return !empty($pc661dc6b); } public static function getStaticTableInNamesList($v6bf1a193b2, $pdbef745e, $v5d3813882f = false) { if (is_array($v6bf1a193b2) && $pdbef745e) { if (in_array($pdbef745e, $v6bf1a193b2)) return $pdbef745e; $pdac1e1f7 = array(); foreach ($v6bf1a193b2 as $pbec62cc6) $pdac1e1f7[] = is_array($pbec62cc6) ? (isset($pbec62cc6["name"]) ? $pbec62cc6["name"] : null) : $pbec62cc6; if (in_array($pdbef745e, $pdac1e1f7)) return $pdbef745e; $pdbef745e = strtolower($pdbef745e); $v9cd205cadb = SQLQueryHandler::parseTableName($pdbef745e); $v648f89f08c = count($v9cd205cadb); $pc6dcbf20 = trim($v9cd205cadb[$v648f89f08c - 1]); $pe713ae58 = trim($v9cd205cadb[$v648f89f08c - 2]); $v555c6c4ce7 = trim($v9cd205cadb[$v648f89f08c - 3]); if (!$pe713ae58) $pe713ae58 = $v5d3813882f && !empty($v5d3813882f["schema"]) ? $v5d3813882f["schema"] : ""; if (!$v555c6c4ce7) $v555c6c4ce7 = $v5d3813882f && !empty($v5d3813882f["db_name"]) ? $v5d3813882f["db_name"] : ""; foreach ($pdac1e1f7 as $v8c5df8072b) { $v8c5df8072b = strtolower($v8c5df8072b); $v9cd205cadb = SQLQueryHandler::parseTableName($v8c5df8072b); $v648f89f08c = count($v9cd205cadb); $v5e813b295b = trim($v9cd205cadb[$v648f89f08c - 1]); $pa51282b5 = trim($v9cd205cadb[$v648f89f08c - 2]); $pd5ae1c40 = trim($v9cd205cadb[$v648f89f08c - 3]); if (!$pa51282b5) $pa51282b5 = $v5d3813882f && !empty($v5d3813882f["schema"]) ? $v5d3813882f["schema"] : ""; if (!$pd5ae1c40) $pd5ae1c40 = $v5d3813882f && !empty($v5d3813882f["db_name"]) ? $v5d3813882f["db_name"] : ""; if ($v5e813b295b == $pc6dcbf20 && $pa51282b5 == $pe713ae58 && $pd5ae1c40 == $v555c6c4ce7) return $v8c5df8072b; } } return null; } protected static function preparePDOField(&$v5d170b1de6, $v2517e276b6 = null) { if (is_array($v5d170b1de6)) $v5d170b1de6 = (object) $v5d170b1de6; $v5d170b1de6->length = $v5d170b1de6->len; unset($v5d170b1de6->len); if ($v5d170b1de6) switch($v5d170b1de6->pdo_type) { case PDO::PARAM_NULL: $v5d170b1de6->type = "null"; break; case PDO::PARAM_BOOL: $v5d170b1de6->type = "tinyint"; if (empty($v5d170b1de6->length)) $v5d170b1de6->length = 1; break; case PDO::PARAM_INT: $v5d170b1de6->type = "int"; break; case PDO::PARAM_STR: case PDO::PARAM_STR_NATL: $v5d170b1de6->type = "varchar"; break; case PDO::PARAM_STR_CHAR: $v5d170b1de6->type = "char"; break; case PDO::PARAM_LOB: case PDO::PARAM_STMT: case PDO::PARAM_INPUT_OUTPUT: $v5d170b1de6->type = "text"; break; default: $v5d170b1de6->type = strtolower($v5d170b1de6->native_type); switch ($v5d170b1de6->native_type) { case 'TINY': $v5d170b1de6->type = "tinyint"; break; case 'SHORT': $v5d170b1de6->type = "smallint"; break; case 'LONG': $v5d170b1de6->type = "int"; break; case 'INT24': $v5d170b1de6->type = "mediumint"; break; case 'LONGLONG': $v5d170b1de6->type = "bigint"; break; default: $v5d170b1de6->type = strtolower($v5d170b1de6->native_type); } } if ($v5d170b1de6->flags) { if (is_numeric($v5d170b1de6->flags)) { foreach ($v2517e276b6 as $pe96e65ba => $pc37695cb) if ($v5d170b1de6->flags & $pe96e65ba) $v5d170b1de6->$pc37695cb = true; } else if (is_array($v5d170b1de6->flags)) { $v9de5864376 = array_values($v5d170b1de6->flags) == $v5d170b1de6->flags; if ($v9de5864376) foreach ($v5d170b1de6->flags as $pc37695cb) $v5d170b1de6->$pc37695cb = true; } } } protected static function convertColumnTypeToDB($v3fb9f41470, &$pe1390784 = null) { $pc0a50b6c = static::getPHPToDBColumnTypes(); $v6cc00e79ac = $pc0a50b6c[$v3fb9f41470]; if (is_array($v6cc00e79ac)) { $pe1390784 = $v6cc00e79ac; $v6cc00e79ac = isset($v6cc00e79ac["type"]) ? $v6cc00e79ac["type"] : null; unset($pe1390784["type"]); } return $v6cc00e79ac ? $v6cc00e79ac : $v3fb9f41470; } protected static function convertColumnTypeFromDB($v3fb9f41470, &$pe1390784 = null) { if ($v3fb9f41470) { $pba8d7d95 = static::getDBToPHPColumnTypes(); $v9a5ee6a008 = $pba8d7d95[$v3fb9f41470]; if (is_array($v9a5ee6a008)) { $pe1390784 = $v9a5ee6a008; $v9a5ee6a008 = isset($v9a5ee6a008["type"]) ? $v9a5ee6a008["type"] : null; unset($pe1390784["type"]); } return $v9a5ee6a008 ? $v9a5ee6a008 : $v3fb9f41470; } return $v3fb9f41470; } protected static function convertDBColumnTypesIgnoredPropsToHiddenProps() { $v72e5423991 = static::getDBColumnTypesIgnoredProps(); if (is_array($v72e5423991)) { $v86066462c3 = array(); foreach ($v72e5423991 as $v3fb9f41470 => $pf72c1d58) $v86066462c3[] = $pf72c1d58 ? $pf72c1d58 : array(); return array_values( call_user_func_array("array_intersect", $v86066462c3) ); } return array(); } protected static function ignoreColumnTypeDBProp($v3fb9f41470, $pe9716498) { $v72e5423991 = static::getDBColumnTypesIgnoredProps(); $v674923d0e5 = $v72e5423991[$v3fb9f41470]; return is_array($v674923d0e5) ? in_array($pe9716498, $v674923d0e5) : false; } protected static function getDefaultValueForColumnType($v3fb9f41470) { $v332b55d6ac = static::getDBColumnDefaultValuesByType(); return $v332b55d6ac[$v3fb9f41470]; } protected static function getMandatoryLengthForColumnType($v3fb9f41470) { $v82acae900e = static::getDBColumnMandatoryLengthTypes(); return $v82acae900e[$v3fb9f41470]; } protected static function isReservedWord($v67db1bd535) { $pd432854a = static::getReservedWords(); return isset($v67db1bd535) && is_array($pd432854a) && in_array(strtoupper(trim($v67db1bd535)), $pd432854a); } protected static function isReservedWordFunction($v67db1bd535) { $pd432854a = static::getReservedWords(); $v0a33ddff46 = $v67db1bd535 && preg_match("/^([a-z_]+)\s*\(/i", trim($v67db1bd535), $v87ae7286da, PREG_OFFSET_CAPTURE) && $v87ae7286da && in_array(strtoupper($v87ae7286da[1][0]), $pd432854a) && strpos($v67db1bd535, ")", $v87ae7286da[1][1] + strlen($v87ae7286da[1][0]) + 1) !== false; $v365d20463c = false; $v8f85090cce = false; $v08b73682ab = false; $v3e5fa3b55b = false; $pe190745d = false; $pb7e0c8e9 = false; $v27e200bd34 = strlen($v67db1bd535); for ($v43dd7d0051 = 0 ; $v43dd7d0051 < $v27e200bd34; $v43dd7d0051++) { $pc288256e = $v67db1bd535[$v43dd7d0051]; if ($pc288256e == '"' && !TextSanitizer::isCharEscaped($v67db1bd535, $v43dd7d0051) && !$v8f85090cce && !$v08b73682ab && !$v3e5fa3b55b && !$pe190745d) $v365d20463c = !$v365d20463c; else if ($pc288256e == "'" && !TextSanitizer::isCharEscaped($v67db1bd535, $v43dd7d0051) && !$v365d20463c && !$v08b73682ab && !$v3e5fa3b55b && !$pe190745d) $v8f85090cce = !$v8f85090cce; else if ($pc288256e == "/" && $v67db1bd535[$v43dd7d0051 + 1] == "*" && !$v365d20463c && !$v8f85090cce && !$v08b73682ab && !$v3e5fa3b55b && !$pe190745d) $v08b73682ab = true; else if ($pc288256e == "*" && $v67db1bd535[$v43dd7d0051 + 1] == "/" && !$v365d20463c && !$v8f85090cce && $v08b73682ab && !$v3e5fa3b55b && !$pe190745d) $v08b73682ab = false; else if ($pc288256e == "/" && $v67db1bd535[$v43dd7d0051 + 1] == "/" && !$v365d20463c && !$v8f85090cce && !$v08b73682ab && !$v3e5fa3b55b && !$pe190745d) $v3e5fa3b55b = true; else if ($pc288256e == "\n" && !$v365d20463c && !$v8f85090cce && !$v08b73682ab && $v3e5fa3b55b && !$pe190745d) $v3e5fa3b55b = false; else if ($pc288256e == "-" && $v67db1bd535[$v43dd7d0051 + 1] == "-" && !$v365d20463c && !$v8f85090cce && !$v08b73682ab && !$v3e5fa3b55b && !$pe190745d) $pe190745d = true; else if ($pc288256e == "\n" && !$v365d20463c && !$v8f85090cce && !$v08b73682ab && !$v3e5fa3b55b && $pe190745d) $pe190745d = false; else if ($pc288256e == ";" && !$v365d20463c && !$v8f85090cce && !$v08b73682ab && !$v3e5fa3b55b && !$pe190745d) $pb7e0c8e9 = true; } return $v0a33ddff46 && !$v365d20463c && !$v8f85090cce && !$v08b73682ab && !$v3e5fa3b55b && !$pe190745d && !$pb7e0c8e9; } protected static function parseTableName($pc661dc6b, $v5d3813882f = false) { $v5cc52dae39 = static::getEnclosingDelimiters(); $v511e888558 = is_array($v5cc52dae39) ? $v5cc52dae39[0] : $v5cc52dae39; $v5e80bc7115 = is_array($v5cc52dae39) ? $v5cc52dae39[1] : $v5cc52dae39; $v5e80bc7115 = $v5e80bc7115 ? $v5e80bc7115 : $v511e888558; $v9cd205cadb = SQLQueryHandler::parseTableName($pc661dc6b, $v511e888558, $v5e80bc7115); $v648f89f08c = count($v9cd205cadb); $v8c5df8072b = trim($v9cd205cadb[$v648f89f08c - 1]); $v70150a947d = trim($v9cd205cadb[$v648f89f08c - 2]); $pb932330b = trim($v9cd205cadb[$v648f89f08c - 3]); if (!$v70150a947d) $v70150a947d = $v5d3813882f && !empty($v5d3813882f["schema"]) ? $v5d3813882f["schema"] : static::getDefaultSchema(); return array( "name" => $v8c5df8072b, "schema" => $v70150a947d, "database" => $pb932330b, ); } protected static function getParsedTableEscapedSQL($pc661dc6b, $v5d3813882f = false) { $pbec62cc6 = self::parseTableName($pc661dc6b, $v5d3813882f); $v5e813b295b = isset($pbec62cc6["name"]) ? $pbec62cc6["name"] : null; $pa51282b5 = isset($pbec62cc6["schema"]) ? $pbec62cc6["schema"] : null; $pd5ae1c40 = isset($pbec62cc6["database"]) ? $pbec62cc6["database"] : null; $v5cc52dae39 = static::getEnclosingDelimiters(); $v511e888558 = is_array($v5cc52dae39) ? $v5cc52dae39[0] : $v5cc52dae39; $v5e80bc7115 = is_array($v5cc52dae39) ? $v5cc52dae39[1] : $v5cc52dae39; $v5e80bc7115 = $v5e80bc7115 ? $v5e80bc7115 : $v511e888558; return ($pd5ae1c40 ? "$v511e888558$pd5ae1c40$v5e80bc7115." : "") . ($pa51282b5 ? "$v511e888558$pa51282b5$v5e80bc7115." : "") . "$v511e888558$v5e813b295b$v5e80bc7115"; } protected static function addSortOptionsToSQL($v04003a4f53) { $v3c76382d93 = ""; if (is_array($v04003a4f53)) foreach ($v04003a4f53 as $pe5c5e2fe => $pdab26aff) { if (!is_numeric($pe5c5e2fe) && $pe5c5e2fe && !is_array($pdab26aff) && (!$pdab26aff || strtolower($pdab26aff) == "asc" || strtolower($pdab26aff) == "desc")) { if (strpos($pe5c5e2fe, "`") === false) $pe5c5e2fe = "`" . str_replace(".", "`.`", $pe5c5e2fe) . "`"; $v3c76382d93 .= ($v3c76382d93 ? ", " : "") . $pe5c5e2fe . ($pdab26aff ? " " . $pdab26aff : ""); } else if (!empty($pdab26aff["column"])) { $v9ea12a829c = $pdab26aff["column"]; if (strpos($v9ea12a829c, "`") === false) $v9ea12a829c = "`" . str_replace(".", "`.`", $v9ea12a829c) . "`"; $v3c76382d93 .= ($v3c76382d93 ? ", " : "") . $v9ea12a829c . (!empty($pdab26aff["order"]) ? " " . $pdab26aff["order"] : ""); } } return $v3c76382d93; } protected static function mergeItems($v8c77794226) { $v73c23704df = array(); foreach ($v8c77794226 as $v3fb9f41470 => $pf72c1d58) $v73c23704df = array_merge($v73c23704df, $pf72c1d58); return array_unique($v73c23704df); } protected static function intersectItems($v8c77794226) { $v86066462c3 = array(); foreach ($v8c77794226 as $v3fb9f41470 => $pf72c1d58) if ($pf72c1d58) $v86066462c3[] = $pf72c1d58; return call_user_func_array("array_intersect", $v86066462c3); } } ?>
