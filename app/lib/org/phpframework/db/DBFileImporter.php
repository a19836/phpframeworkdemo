<?php
/*
 * Copyright (c) 2024 Bloxtor - http://bloxtor.com
 * 
 * Please note that this code belongs to the Bloxtor framework and must comply with the Bloxtor license.
 * If you do not accept these provisions, or if the Bloxtor License is not present or cannot be found, you are not entitled to use this code and must stop and delete it immediately.
 */
include_once get_lib("org.phpframework.db.DB"); include_once get_lib("org.phpframework.util.text.TextSanitizer"); class DBFileImporter { private $v87e4fe1181; private $v5d3813882f; private $v8a29987473; private $v659bfd6e33; private $paaffbb97; private $pd6ee0331; public function __construct(DB $v87e4fe1181) { $this->v87e4fe1181 = $v87e4fe1181; $this->v5d3813882f = array( "ignore_rows_number" => 1, "rows_delimiter" => "\n", "columns_delimiter" => "\t", "enclosed_by" => "", "insert_ignore" => true, "update_existent" => false, ); $this->v8a29987473 = array(); $this->v659bfd6e33 = array(); $this->paaffbb97 = array(); $this->pd6ee0331 = array(); if (!$v87e4fe1181) launch_exception(new Exception("DBFileImporter 1st argument must be a DBDriver and cannot be null!")); } public function getErrors() { return $this->v8a29987473; } public function getWrongLines() { return $this->v659bfd6e33; } public function getWrongSQLs() { return $this->paaffbb97; } public function getWrongData() { return $this->pd6ee0331; } public function setOptions($v5d3813882f) { if (is_array($v5d3813882f)) foreach ($v5d3813882f as $v101cf0807e => $v9be6913e98) $this->v5d3813882f[$v101cf0807e] = $v9be6913e98; } public function importFile($pf3dc0762, $pc661dc6b, $pa1d76d56, $v543a4abeae = false) { $v5c1c342594 = false; if (file_exists($pf3dc0762) && $pa1d76d56) { $pef24e26f = false; foreach ($pa1d76d56 as $pd69fb7d0 => $v7162e23723) if ($v7162e23723) { $pef24e26f = true; break; } if ($pef24e26f) { $v04ee3b88da = fopen($pf3dc0762, "r"); if ($v04ee3b88da) { $pe2f18119 = array(); if ($this->v5d3813882f["update_existent"]) { $v3855aa65dc = $this->v87e4fe1181->listTableFields($pc661dc6b); if ($v3855aa65dc) foreach ($v3855aa65dc as $v1b0cfa478b) if (!empty($v1b0cfa478b["primary_key"])) $pe2f18119[] = $v1b0cfa478b["name"]; } $v5c1c342594 = true; $v259d35fa15 = $v603801324e = ""; $v7bd7dbb974 = 0; while (($v3646220e38 = fgets($v04ee3b88da, 4096)) !== false) { $pbd1bc7b0 = strpos($v3646220e38, $this->v5d3813882f["rows_delimiter"]); if ($pbd1bc7b0 !== false) { $v259d35fa15 .= substr($v3646220e38, 0, $pbd1bc7b0); $v603801324e = substr($v3646220e38, $pbd1bc7b0 + 1); if ($this->v5d3813882f["rows_delimiter"] == "\n" || $this->v5d3813882f["rows_delimiter"] == "\r") { $v259d35fa15 = str_replace(array("\n", "\r"), "", $v259d35fa15); $v603801324e = str_replace(array("\n", "\r"), "", $v603801324e); } $v7bd7dbb974++; if ($v259d35fa15 && $v7bd7dbb974 > $this->v5d3813882f["ignore_rows_number"] && !$this->parseLine($v259d35fa15, $pc661dc6b, $pa1d76d56, $pe2f18119)) { $v5c1c342594 = false; if (!$v543a4abeae) { $v259d35fa15 = null; break; } } $v259d35fa15 = $v603801324e; } else $v259d35fa15 .= $v3646220e38; } $v7bd7dbb974++; if ($v259d35fa15 && $v7bd7dbb974 > $this->v5d3813882f["ignore_rows_number"] && !$this->parseLine($v259d35fa15, $pc661dc6b, $pa1d76d56, $pe2f18119)) $v5c1c342594 = false; fclose($v04ee3b88da); } } } return $v5c1c342594; } public function parseLine($v259d35fa15, $pc661dc6b, $pa1d76d56, $pe2f18119 = null) { $v090afe822b = self::convertLineToArray($v259d35fa15); $v539082ff30 = array(); $v20f6c89e69 = array(); $v5eecea4d15 = false; if ($pa1d76d56) foreach ($pa1d76d56 as $pd69fb7d0 => $v7162e23723) if ($v7162e23723) { $v539082ff30[] = array("column" => $v7162e23723, "value" => $v090afe822b[$pd69fb7d0]); $v20f6c89e69[$v7162e23723] = $v090afe822b[$pd69fb7d0]; } if (!$v539082ff30) { $this->v8a29987473[] = "Error: no data to be inserted!"; return false; } if ($this->v5d3813882f["update_existent"] && $pe2f18119) { $paf1bc6f6 = array(); foreach ($pe2f18119 as $v597dd8d456) if (in_array($v597dd8d456, $pa1d76d56)) $paf1bc6f6[] = array("column" => $v597dd8d456, "value" => $v20f6c89e69[$v597dd8d456]); $v3c76382d93 = $this->v87e4fe1181->convertObjectToSQL(array( "type" => "select", "main_table" => $pc661dc6b, "attributes" => array( array("column" => "count($v597dd8d456)", "name" => "total") ), "conditions" => $paf1bc6f6, )); $v7959970a41 = $this->v87e4fe1181->getData($v3c76382d93); $v5eecea4d15 = isset($v7959970a41["result"][0]["total"]) && $v7959970a41["result"][0]["total"] > 0; } if ($v5eecea4d15) $v3c76382d93 = $this->v87e4fe1181->convertObjectToSQL(array( "type" => "update", "main_table" => $pc661dc6b, "attributes" => $v539082ff30, "conditions" => $paf1bc6f6, )); else $v3c76382d93 = $this->v87e4fe1181->convertObjectToSQL(array( "type" => "insert", "main_table" => $pc661dc6b, "attributes" => $v539082ff30, "ignore" => $this->v5d3813882f["insert_ignore"], )); $v5c1c342594 = $this->v87e4fe1181->setData($v3c76382d93); if ($v5c1c342594 === true) return true; $this->v659bfd6e33[] = $v259d35fa15; $this->paaffbb97[] = $v3c76382d93; $this->pd6ee0331[] = $v20f6c89e69; $v1db8fcc7cd = is_a($v5c1c342594, "Exception") ? "\n\n" . $v5c1c342594->getMessage() : ""; $this->v8a29987473[] = "Error trying to insert sql: $v3c76382d93" . $v1db8fcc7cd; return false; } public function convertLineToArray($v259d35fa15) { if ($this->v5d3813882f["enclosed_by"]) { $v9d05685f42 = TextSanitizer::mbStrSplit($v259d35fa15); $pe2ae3be9 = count($v9d05685f42); $v7e94893dd2 = ""; $v0613b672d0 = false; $v090afe822b = array(); for ($v43dd7d0051 = 0; $v43dd7d0051 < $pe2ae3be9; $v43dd7d0051++) { $v9a8b7dc209 = $v9d05685f42[$v43dd7d0051]; if ($v9a8b7dc209 == $this->v5d3813882f["enclosed_by"] && !TextSanitizer::isMBCharEscaped($v259d35fa15, $v43dd7d0051, $v9d05685f42)) { $v0613b672d0 = !$v0613b672d0; $v7e94893dd2 .= $v9a8b7dc209; } else if ($v9a8b7dc209 == $this->v5d3813882f["columns_delimiter"] && !$v0613b672d0) { if ($v7e94893dd2[0] == $this->v5d3813882f["enclosed_by"] && substr($v7e94893dd2, -1) == $this->v5d3813882f["enclosed_by"]) $v7e94893dd2 = TextSanitizer::stripCSlashes(substr($v7e94893dd2, 1, -1), $this->v5d3813882f["enclosed_by"]); $v090afe822b[] = $v7e94893dd2; $v7e94893dd2 = ""; } else $v7e94893dd2 .= $v9a8b7dc209; } if ($v7e94893dd2) { if ($v7e94893dd2[0] == $this->v5d3813882f["enclosed_by"] && substr($v7e94893dd2, -1) == $this->v5d3813882f["enclosed_by"]) $v7e94893dd2 = TextSanitizer::stripCSlashes(substr($v7e94893dd2, 1, -1), $this->v5d3813882f["enclosed_by"]); $v090afe822b[] = $v7e94893dd2; } } else $v090afe822b = explode($this->v5d3813882f["columns_delimiter"], $v259d35fa15); return $v090afe822b; } } ?>
