<?php
/*
 * Copyright (c) 2007 PHPMyFrameWork - Joao Pinto
 * AUTHOR: Joao Paulo Lopes Pinto -- http://jplpinto.com
 * 
 * The use of this code must be allowed first by the creator Joao Pinto, since this is a private and proprietary code.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

trait MSSqlDBStatic { public static function getType() { return "mssql"; } public static function getLabel() { return "MS SQL Server"; } public static function getEnclosingDelimiters() { return array("[", "]"); } public static function getAliasEnclosingDelimiters() { return array("'", "'"); } public static function getDBCharsets() { return static::$db_charsets; } public static function getTableCharsets() { return null; } public static function getColumnCharsets() { return null; } public static function getDBCollations() { return static::$db_table_column_collations; } public static function getTableCollations() { return static::$db_table_column_collations; } public static function getColumnCollations() { return static::$db_table_column_collations; } public static function getStorageEngines() { return null; } public static function getPHPToDBColumnTypes() { return static::$php_to_db_column_types; } public static function getDBToPHPColumnTypes() { return static::$db_to_php_column_types; } public static function getDBColumnTypes() { return static::$db_column_types; } public static function getDBColumnSimpleTypes() { return static::$db_column_simple_types; } public static function getDBColumnDefaultValuesByType() { return static::$db_column_default_values_by_type; } public static function getDBColumnTypesIgnoredProps() { return static::$db_column_types_ignored_props; } public static function getDBColumnTypesHiddenProps() { return static::convertDBColumnTypesIgnoredPropsToHiddenProps(); } public static function getDBColumnNumericTypes() { return static::$db_column_numeric_types; } public static function getDBColumnDateTypes() { return static::$db_column_date_types; } public static function getDBColumnTextTypes() { return static::$db_column_text_types; } public static function getDBColumnBlobTypes() { return static::$db_column_blob_types; } public static function getDBColumnBooleanTypes() { return static::$db_column_boolean_types; } public static function getDBColumnMandatoryLengthTypes() { return static::$db_column_mandatory_length_types; } public static function getDBColumnAutoIncrementTypes() { return static::$db_column_auto_increment_types; } public static function getDBBooleanTypeAvailableValues() { return static::$db_boolean_type_available_values; } public static function getDBCurrentTimestampAvailableValues() { return static::$db_current_timestamp_available_values; } public static function getReservedWords() { return static::$reserved_words; } public static function getDefaultSchema() { return static::$default_schema; } public static function getIgnoreConnectionOptions() { return static::$ignore_connection_options; } public static function getIgnoreConnectionOptionsByExtension() { return static::$ignore_connection_options_by_extension; } public static function getAvailablePHPExtensionTypes() { if (static::$available_php_extension_types) return static::$available_php_extension_types; static::$available_php_extension_types = array(); if (function_exists("sqlsrv_connect")) static::$available_php_extension_types[] = "sqlsrv"; if (class_exists("pdo")) static::$available_php_extension_types[] = "pdo"; if (function_exists("odbc_connect")) static::$available_php_extension_types[] = "odbc"; return static::$available_php_extension_types; } public static function allowTableAttributeSorting() { return false; } } ?>
