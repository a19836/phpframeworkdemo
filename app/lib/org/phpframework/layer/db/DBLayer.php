<?php
/*
 * Copyright (c) 2007 PHPMyFrameWork - Joao Pinto
 * AUTHOR: Joao Paulo Lopes Pinto -- http://jplpinto.com
 * 
 * The use of this code must be allowed first by the creator Joao Pinto, since this is a private and proprietary code.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

include_once get_lib("org.phpframework.layer.Layer"); class DBLayer extends Layer { public function __construct($v30857f7eca = array()) { parent::__construct($v30857f7eca); } public function getLayerPathSetting() { return $this->settings["dbl_path"]; } public function getDBDriversName() { $v9994512d98 = $this->getBrokers(); return is_array($v9994512d98) ? array_keys($v9994512d98) : array(); } public function getFunction($v9d33ecaf56, $v9367d5be85 = false, $v5d3813882f = false) { debug_log_function("DBLayer->getFunction", array($v9d33ecaf56, $v9367d5be85, $v5d3813882f)); $v57d84eb5b6 = strtolower($v9d33ecaf56); $v18521bca9a = $this->isCacheActive(); if($v18521bca9a && !$v5d3813882f["no_cache"] && $this->getCacheLayer()->isValid(1, $v57d84eb5b6, $v9367d5be85, $v5d3813882f)) { return $this->getCacheLayer()->get(1, $v57d84eb5b6, $v9367d5be85, $v5d3813882f); } $v9ad1385268 = $this->getBroker($v5d3813882f["db_driver"])->getFunction($v9d33ecaf56, $v9367d5be85, $v5d3813882f); if($v18521bca9a) { $this->getCacheLayer()->check(1, $v57d84eb5b6, $v9367d5be85, $v9ad1385268, $v5d3813882f); } return $v9ad1385268; } public function getData($v3c76382d93, $v5d3813882f = false) { debug_log_function("DBLayer->getData", array($v3c76382d93, $v5d3813882f)); $v18521bca9a = $this->isCacheActive(); if($v18521bca9a && !$v5d3813882f["no_cache"] && $this->getCacheLayer()->isValid(1, "getData", $v3c76382d93, $v5d3813882f)) { return $this->getCacheLayer()->get(1, "getData", $v3c76382d93, $v5d3813882f); } $v9ad1385268 = $this->getBroker($v5d3813882f["db_driver"])->getData($v3c76382d93, $v5d3813882f); if($v18521bca9a) { $this->getCacheLayer()->check(1, "getData", $v3c76382d93, $v9ad1385268, $v5d3813882f); } return $v9ad1385268; } public function setData($v3c76382d93, $v5d3813882f = false) { debug_log_function("DBLayer->setData", array($v3c76382d93, $v5d3813882f)); $v18521bca9a = $this->isCacheActive(); if($v18521bca9a && !$v5d3813882f["no_cache"] && $this->getCacheLayer()->isValid(1, "setData", $v3c76382d93, $v5d3813882f)) { return $this->getCacheLayer()->get(1, "setData", $v3c76382d93, $v5d3813882f); } $v9ad1385268 = $this->getBroker($v5d3813882f["db_driver"])->setData($v3c76382d93, $v5d3813882f); if($v18521bca9a) { $this->getCacheLayer()->check(1, "setData", $v3c76382d93, $v9ad1385268, $v5d3813882f); } return $v9ad1385268; } public function getSQL($v3c76382d93, $v5d3813882f = false) { debug_log_function("DBLayer->getSQL", array($v3c76382d93, $v5d3813882f)); $v18521bca9a = $this->isCacheActive(); if($v18521bca9a && !$v5d3813882f["no_cache"] && $this->getCacheLayer()->isValid(1, "getSQL", $v3c76382d93, $v5d3813882f)) { return $this->getCacheLayer()->get(1, "getSQL", $v3c76382d93, $v5d3813882f); } $v9ad1385268 = $this->getBroker($v5d3813882f["db_driver"])->getSQL($v3c76382d93, $v5d3813882f); if($v18521bca9a) { $this->getCacheLayer()->check(1, "getSQL", $v3c76382d93, $v9ad1385268, $v5d3813882f); } return $v9ad1385268; } public function setSQL($v3c76382d93, $v5d3813882f = false) { debug_log_function("DBLayer->setSQL", array($v3c76382d93, $v5d3813882f)); $v18521bca9a = $this->isCacheActive(); if($v18521bca9a && !$v5d3813882f["no_cache"] && $this->getCacheLayer()->isValid(1, "setSQL", $v3c76382d93, $v5d3813882f)) { return $this->getCacheLayer()->get(1, "setSQL", $v3c76382d93, $v5d3813882f); } $v9ad1385268 = $this->getBroker($v5d3813882f["db_driver"])->setSQL($v3c76382d93, $v5d3813882f); if($v18521bca9a) { $this->getCacheLayer()->check(1, "setSQL", $v3c76382d93, $v9ad1385268, $v5d3813882f); } return $v9ad1385268; } public function getInsertedId($v5d3813882f = false) { debug_log_function("DBLayer->getInsertedId", array($v5d3813882f)); $v9ad1385268 = $this->getBroker($v5d3813882f["db_driver"])->getInsertedId($v5d3813882f); return $v9ad1385268; } public function insertObject($v8c5df8072b, $pfdbbc383, $v5d3813882f = false) { debug_log_function("DBLayer->insertObject", array($v8c5df8072b, $pfdbbc383, $v5d3813882f)); return $this->getBroker($v5d3813882f["db_driver"])->insertObject($v8c5df8072b, $pfdbbc383, $v5d3813882f); } public function updateObject($v8c5df8072b, $pfdbbc383, $paf1bc6f6 = false, $v5d3813882f = false) { debug_log_function("DBLayer->updateObject", array($v8c5df8072b, $pfdbbc383, $paf1bc6f6, $v5d3813882f)); return $this->getBroker($v5d3813882f["db_driver"])->updateObject($v8c5df8072b, $pfdbbc383, $paf1bc6f6, $v5d3813882f); } public function deleteObject($v8c5df8072b, $paf1bc6f6 = false, $v5d3813882f = false) { debug_log_function("DBLayer->deleteObject", array($v8c5df8072b, $paf1bc6f6, $v5d3813882f)); return $this->getBroker($v5d3813882f["db_driver"])->deleteObject($v8c5df8072b, $paf1bc6f6, $v5d3813882f); } public function findObjects($v8c5df8072b, $pfdbbc383 = false, $paf1bc6f6 = false, $v5d3813882f = false) { debug_log_function("DBLayer->findObjects", array($v8c5df8072b, $pfdbbc383, $paf1bc6f6, $v5d3813882f)); $v18521bca9a = $this->isCacheActive(); if($v18521bca9a && !$v5d3813882f["no_cache"] && $this->getCacheLayer()->isValid(1, "findObjects", null, $v5d3813882f)) { return $this->getCacheLayer()->get(1, "findObjects", null, $v5d3813882f); } $v9ad1385268 = $this->getBroker($v5d3813882f["db_driver"])->findObjects($v8c5df8072b, $pfdbbc383, $paf1bc6f6, $v5d3813882f); if($v18521bca9a) { $this->getCacheLayer()->check(1, "findObjects", null, $v9ad1385268, $v5d3813882f); } return $v9ad1385268; } public function countObjects($v8c5df8072b, $paf1bc6f6 = false, $v5d3813882f = false) { debug_log_function("DBLayer->countObjects", array($v8c5df8072b, $paf1bc6f6, $v5d3813882f)); $v18521bca9a = $this->isCacheActive(); if($v18521bca9a && !$v5d3813882f["no_cache"] && $this->getCacheLayer()->isValid(1, "countObjects", null, $v5d3813882f)) { return $this->getCacheLayer()->get(1, "countObjects", null, $v5d3813882f); } $v9ad1385268 = $this->getBroker($v5d3813882f["db_driver"])->countObjects($v8c5df8072b, $paf1bc6f6, $v5d3813882f); if($v18521bca9a) { $this->getCacheLayer()->check(1, "countObjects", null, $v9ad1385268, $v5d3813882f); } return $v9ad1385268; } public function findRelationshipObjects($v8c5df8072b, $v10c59e20bd, $v4ec0135323 = false, $v5d3813882f = false) { debug_log_function("DBLayer->findRelationshipObjects", array($v8c5df8072b, $v10c59e20bd, $v4ec0135323, $v5d3813882f)); $v18521bca9a = $this->isCacheActive(); if($v18521bca9a && !$v5d3813882f["no_cache"] && $this->getCacheLayer()->isValid(1, "findRelationshipObjects", null, $v5d3813882f)) { return $this->getCacheLayer()->get(1, "findRelationshipObjects", null, $v5d3813882f); } $v9ad1385268 = $this->getBroker($v5d3813882f["db_driver"])->findRelationshipObjects($v8c5df8072b, $v10c59e20bd, $v4ec0135323, $v5d3813882f); if($v18521bca9a) { $this->getCacheLayer()->check(1, "findRelationshipObjects", null, $v9ad1385268, $v5d3813882f); } return $v9ad1385268; } public function countRelationshipObjects($v8c5df8072b, $v10c59e20bd, $v4ec0135323 = false, $v5d3813882f = false) { debug_log_function("DBLayer->countRelationshipObjects", array($v8c5df8072b, $v10c59e20bd, $v4ec0135323, $v5d3813882f)); $v18521bca9a = $this->isCacheActive(); if($v18521bca9a && !$v5d3813882f["no_cache"] && $this->getCacheLayer()->isValid(1, "countRelationshipObjects", null, $v5d3813882f)) { return $this->getCacheLayer()->get(1, "countRelationshipObjects", null, $v5d3813882f); } $v9ad1385268 = $this->getBroker($v5d3813882f["db_driver"])->countRelationshipObjects($v8c5df8072b, $v10c59e20bd, $v4ec0135323, $v5d3813882f); if($v18521bca9a) { $this->getCacheLayer()->check(1, "countRelationshipObjects", null, $v9ad1385268, $v5d3813882f); } return $v9ad1385268; } public function findObjectsColumnMax($v8c5df8072b, $v7162e23723, $v5d3813882f = false) { debug_log_function("DBLayer->findObjectsColumnMax", array($v8c5df8072b, $v7162e23723, $v5d3813882f)); $v18521bca9a = $this->isCacheActive(); if($v18521bca9a && !$v5d3813882f["no_cache"] && $this->getCacheLayer()->isValid(1, "findObjectsColumnMax", null, $v5d3813882f)) { return $this->getCacheLayer()->get(1, "findObjectsColumnMax", null, $v5d3813882f); } $v9ad1385268 = $this->getBroker($v5d3813882f["db_driver"])->findObjectsColumnMax($v8c5df8072b, $v7162e23723, $v5d3813882f); if($v18521bca9a) { $this->getCacheLayer()->check(1, "findObjectsColumnMax", null, $v9ad1385268, $v5d3813882f); } return $v9ad1385268; } } ?>
