<?php
/*
 * Copyright (c) 2007 PHPMyFrameWork - Joao Pinto
 * AUTHOR: Joao Paulo Lopes Pinto -- http://jplpinto.com
 * 
 * The use of this code must be allowed first by the creator Joao Pinto, since this is a private and proprietary code.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
if (!defined("MAX_OVERFLOW_VALUE")) define("MAX_OVERFLOW_VALUE", "2147483647"); if (!defined("MIN_OVERFLOW_VALUE")) define("MIN_OVERFLOW_VALUE", "-2147483648"); class HashCode { public static function getHashCode($v327f72fb62){ $v258de04f2e = 0; for ($v43dd7d0051 = 0; $v43dd7d0051 < strlen($v327f72fb62); $v43dd7d0051++){ $v258de04f2e = self::getBigInt(bcadd(bcmul(31, $v258de04f2e), ord($v327f72fb62[$v43dd7d0051]))); } return $v258de04f2e; } public static function getHashCodePositive($v327f72fb62){ $v258de04f2e = self::getHashCode($v327f72fb62); if($v258de04f2e < 0) { $v2d1fae9fb8 = bcsub(0, $v258de04f2e); $v258de04f2e = bcadd(MAX_OVERFLOW_VALUE, bcsub($v2d1fae9fb8, 1)); } return $v258de04f2e; } public static function getBigInt($v58ac916504) { $v9ad1385268 = $v58ac916504; $v339f9b50e0 = MAX_OVERFLOW_VALUE; $v9c75c2f068 = MIN_OVERFLOW_VALUE; $v0911c6122e = bcsub($v339f9b50e0, $v9c75c2f068); $pa02b1e9a = bccomp($v58ac916504, $v9c75c2f068); if($pa02b1e9a == -1) { $v9ad1385268 = bcsub(0, $v9ad1385268); } if(bccomp($v9ad1385268, $v339f9b50e0) == 1) { $v1b08a89324 = bcdiv($v9ad1385268, $v0911c6122e); $v7a1b9c07b3 = bcmod($v9ad1385268, $v0911c6122e); if($v1b08a89324 == 0) { $v7a1b9c07b3 = bcsub($v9ad1385268, $v339f9b50e0); } $v9ad1385268 = bcadd($v9c75c2f068, bcsub($v7a1b9c07b3,1)); if($pa02b1e9a == -1) { $v9ad1385268 = bcsub(0, $v9ad1385268); } } return $v9ad1385268; } } ?>
