<?php
/*
 * Copyright (c) 2007 PHPMyFrameWork - Joao Pinto
 * AUTHOR: Joao Paulo Lopes Pinto -- http://jplpinto.com
 * 
 * The use of this code must be allowed first by the creator Joao Pinto, since this is a private and proprietary code.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ include_once get_lib("org.phpframework.util.io.handler.IMyIOHandler"); abstract class MyIOHandler implements IMyIOHandler { public static function getFileExtension($v250a1176c9) { if($v250a1176c9) { return pathinfo($v250a1176c9, PATHINFO_EXTENSION); } return false; } public static function getFileTypes() { $v4159504aa3 = array(); $v4159504aa3["folder"] = array("id" => 1, "desc" => "folder"); $v4159504aa3["file"] = array("id" => 2, "desc" => "file"); $v4159504aa3["video"] = array("id" => 3, "desc" => "video"); $v4159504aa3["image"] = array("id" => 4, "desc" => "image"); $v4159504aa3["text"] = array("id" => 5, "desc" => "text"); return $v4159504aa3; } public static function getFileType($v250a1176c9) { $v6bfcc44e7b = self::getFileExtension($v250a1176c9); $v4159504aa3 = self::getFileTypes(); $v3fb9f41470 = false; $v9994512d98 = array_keys($v4159504aa3); for($v43dd7d0051 = count($v9994512d98) - 1; $v43dd7d0051 >= 0; --$v43dd7d0051) { $pb13127fc = $v4159504aa3[ $v9994512d98[$v43dd7d0051] ]["id"]; if(self::getFileMimeTypeByExtension($v6bfcc44e7b, $pb13127fc)) { $v3fb9f41470 = $v9994512d98[$v43dd7d0051]; break; } } return $v3fb9f41470 ? $v3fb9f41470 : "file"; } public static function getFolderType() { $v4159504aa3 = self::getFileTypes(); return $v4159504aa3["folder"]; } public static function getInvalidFiles() { return array(".", "..", ".svn"); } public static function getAvailableVideoTypes() { return array( "flv" => "video/x-flv", "flv" => "application/x-flash-video", "m4v" => "video/x-m4v", "m4a" => "video/x-m4a", "mp4" => "video/mp4", "mov" => "video/quicktime", "qtl" => "video/quicktime", "swf" => "application/x-shockwave-flash" ); } public static function getAvailableImageTypes() { return array( "gif" => "image/gif", "jpg" => "image/jpeg", "png" => "image/png", "jpeg" => "image/jpeg", "tif" => "image/tif", "tiff" => "image/tif", "bmp" => "image/bmp" ); } public static function getAvailableTextTypes() { return array( "txt" => "text/plain", "htm" => "text/html", "html" => "text/html", "php" => "text/plain", "asp" => "text/plain", "aspx" => "text/plain", "js" => "text/plain", "css" => "text/css", "xml" => "text/xml", "xslt" => "text/xml", "java" => "text/plain" ); } public static function getAvailableFileTypes($v3fb9f41470 = false) { if($v3fb9f41470 == 3) return self::getAvailableVideoTypes(); else if($v3fb9f41470 == 4) return self::getAvailableImageTypes(); else if($v3fb9f41470 == 5) return self::getAvailableTextTypes(); else if($v3fb9f41470 == 2 || $v3fb9f41470 === false) return array_merge(self::getAvailableVideoTypes(), self::getAvailableImageTypes(), self::getAvailableTextTypes()); else return array(); } public static function getAvailableFileExtensions($v3fb9f41470 = false) { $v4159504aa3 = self::getAvailableFileTypes($v3fb9f41470); return $v4159504aa3 ? array_keys($v4159504aa3) : array(); } public static function getAvailableFileMimeTypes($v3fb9f41470 = false) { $v4159504aa3 = self::getAvailableFileTypes($v3fb9f41470); return $v4159504aa3 ? array_values($v4159504aa3) : array(); } public static function getFileExtensionByMimeType($v71dafe3739, $v3fb9f41470 = false) { $v71dafe3739 = strtolower($v71dafe3739); $v86a63e188e = self::getAvailableFileTypes($v3fb9f41470); $v82521e7162 = array_flip($v86a63e188e); return isset($v82521e7162[$v71dafe3739]) ? $v82521e7162[$v71dafe3739] : false; } public static function getFileMimeTypeByExtension($v6bfcc44e7b, $v3fb9f41470 = false) { $v6bfcc44e7b = strtolower($v6bfcc44e7b); $v86a63e188e = self::getAvailableFileTypes($v3fb9f41470); return isset($v86a63e188e[$v6bfcc44e7b]) ? $v86a63e188e[$v6bfcc44e7b] : false; } } ?>
