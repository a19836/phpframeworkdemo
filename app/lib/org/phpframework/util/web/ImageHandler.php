<?php
/*
 * Copyright (c) 2007 PHPMyFrameWork - Joao Pinto
 * AUTHOR: Joao Paulo Lopes Pinto -- http://jplpinto.com
 * 
 * The use of this code must be allowed first by the creator Joao Pinto, since this is a private and proprietary code.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
include_once get_lib("org.phpframework.util.MimeTypeHandler"); class ImageHandler { const IMAGE_DOES_NOT_EXIST = 1001; const UNSUPPORTED_IMAGE_TYPE = 1002; const IMAGE_IS_TOO_SMALL = 1003; const IMAGE_WITH_WRONG_ASPECT_RATIO = 1004; private $v8a29987473 = array(); private $v0b51e4c607 = array('bmp', 'gif', 'jpeg', 'jpg', 'png'); public function __construct() { } public function getErrors() { return $this->v8a29987473; } public function isImageValid($v6b146f3e75) { $this->v8a29987473 = array(); if (!$v6b146f3e75 || !file_exists($v6b146f3e75)) { $this->v8a29987473[] = self::IMAGE_DOES_NOT_EXIST; return false; } $v71dafe3739 = MimeTypeHandler::getFileMimeType($v6b146f3e75); if (!MimeTypeHandler::isImageMimeType($v71dafe3739)) { $this->v8a29987473[] = self::UNSUPPORTED_IMAGE_TYPE; return false; } $v3fb9f41470 = MimeTypeHandler::getTypeByMimeType($v71dafe3739); $v6bfcc44e7b = $v3fb9f41470 && isset($v3fb9f41470["extension"]) ? $v3fb9f41470["extension"] : substr(strrchr($v6b146f3e75, "."), 1); $v9cd205cadb = explode(",", $v6bfcc44e7b); $v6bfcc44e7b = trim(strtolower($v9cd205cadb[0])); $v0b51e4c607 = MimeTypeHandler::getAvailableFileExtensions("image"); $v0b51e4c607 = is_array($v0b51e4c607) && $v0b51e4c607 ? $v0b51e4c607 : $this->v0b51e4c607; return in_array($v6bfcc44e7b, $v0b51e4c607); } public function isImageBinaryValid($v6b146f3e75) { $v5c1c342594 = $this->isImageValid($v6b146f3e75); if ($v5c1c342594 && getimagesize($v6b146f3e75) === false) { $this->v8a29987473[] = self::UNSUPPORTED_IMAGE_TYPE; $v5c1c342594 = false; } return $v5c1c342594; } public function imageResize($v6b146f3e75, $v1a74c80ef8, $v607a49cf36, $v3a0455afd7, $pafc6cbb5 = false, $pf65927ce = false) { if (!$this->isImageBinaryValid($v6b146f3e75)) return false; $v6bfcc44e7b = $this->f6e5381f420($v6b146f3e75); switch($v6bfcc44e7b){ case 'bmp': $v8e4fc13de4 = imagecreatefromwbmp($v6b146f3e75); break; case 'gif': $v8e4fc13de4 = imagecreatefromgif($v6b146f3e75); break; case 'jpeg': case 'jpg': $v8e4fc13de4 = imagecreatefromjpeg($v6b146f3e75); break; case 'png': $v8e4fc13de4 = imagecreatefrompng($v6b146f3e75); break; default : $this->v8a29987473[] = self::UNSUPPORTED_IMAGE_TYPE; return false; } if ($v8e4fc13de4) { list($pc5166886, $pacf2a341) = getimagesize($v6b146f3e75); if ($pc5166886 != $v607a49cf36 || $pacf2a341 != $v3a0455afd7) { if (($v607a49cf36 > $v3a0455afd7 && $pc5166886 < $pacf2a341) || ($v607a49cf36 < $v3a0455afd7 && $pc5166886 > $pacf2a341)) $this->v8a29987473[] = self::IMAGE_WITH_WRONG_ASPECT_RATIO; if($pafc6cbb5) { if($pc5166886 < $v607a49cf36 || $pacf2a341 < $v3a0455afd7) $this->v8a29987473[] = self::IMAGE_IS_TOO_SMALL; $v76600791f1 = max($v607a49cf36 / $pc5166886, $v3a0455afd7 / $pacf2a341); $pacf2a341 = $v3a0455afd7 / $v76600791f1; $v51b839ace2 = ($pc5166886 - $v607a49cf36 / $v76600791f1) / 2; $pc5166886 = $v607a49cf36 / $v76600791f1; } else { if($pc5166886 < $v607a49cf36 && $pacf2a341 < $v3a0455afd7) $this->v8a29987473[] = self::IMAGE_IS_TOO_SMALL; $v76600791f1 = min($v607a49cf36 / $pc5166886, $v3a0455afd7 / $pacf2a341); $v607a49cf36 = $pc5166886 * $v76600791f1; $v3a0455afd7 = $pacf2a341 * $v76600791f1; $v51b839ace2 = 0; } if (!in_array(self::IMAGE_IS_TOO_SMALL, $this->v8a29987473) || $pf65927ce) { $v5d78194c33 = imagecreatetruecolor($v607a49cf36, $v3a0455afd7); if ($v5d78194c33 === false) return false; if($v6bfcc44e7b == "gif" || $v6bfcc44e7b == "png") { imagecolortransparent($v5d78194c33, imagecolorallocatealpha($v5d78194c33, 0, 0, 0, 127)); imagealphablending($v5d78194c33, false); imagesavealpha($v5d78194c33, true); } if (imagecopyresampled($v5d78194c33, $v8e4fc13de4, 0, 0, $v51b839ace2, 0, $v607a49cf36, $v3a0455afd7, $pc5166886, $pacf2a341)) switch($v6bfcc44e7b){ case 'bmp': $v5c1c342594 = imagewbmp($v5d78194c33, $v1a74c80ef8); break; case 'gif': $v5c1c342594 = imagegif($v5d78194c33, $v1a74c80ef8); break; case 'jpeg': case 'jpg': $v5c1c342594 = imagejpeg($v5d78194c33, $v1a74c80ef8); break; case 'png': $v5c1c342594 = imagepng($v5d78194c33, $v1a74c80ef8); break; } @imagedestroy($v5d78194c33); } else $v5c1c342594 = copy($v6b146f3e75, $v1a74c80ef8); } else $v5c1c342594 = copy($v6b146f3e75, $v1a74c80ef8); @imagedestroy($v8e4fc13de4); } return $v5c1c342594; } public function areImageMeasuresValid($v6b146f3e75, $v607a49cf36, $v3a0455afd7, $pafc6cbb5 = false) { if (!$this->isImageBinaryValid($v6b146f3e75)) return false; list($pc5166886, $pacf2a341) = getimagesize($v6b146f3e75); if($pafc6cbb5 && ($pc5166886 < $v607a49cf36 || $pacf2a341 < $v3a0455afd7)) { $this->v8a29987473[] = self::IMAGE_IS_TOO_SMALL; return false; } else if(!$pafc6cbb5 && $pc5166886 < $v607a49cf36 && $pacf2a341 < $v3a0455afd7) { $this->v8a29987473[] = self::IMAGE_IS_TOO_SMALL; return false; } if (($v607a49cf36 > $v3a0455afd7 && $pc5166886 < $pacf2a341) || ($v607a49cf36 < $v3a0455afd7 && $pc5166886 > $pacf2a341)) { $this->v8a29987473[] = self::IMAGE_WITH_WRONG_ASPECT_RATIO; return false; } return true; } private function f6e5381f420($v6b146f3e75) { $v71dafe3739 = MimeTypeHandler::getFileMimeType($v6b146f3e75); $v3fb9f41470 = MimeTypeHandler::getTypeByMimeType($v71dafe3739); $v6bfcc44e7b = $v3fb9f41470 && isset($v3fb9f41470["extension"]) ? $v3fb9f41470["extension"] : substr(strrchr($v6b146f3e75, "."), 1); $v9cd205cadb = explode(",", $v6bfcc44e7b); return trim(strtolower($v9cd205cadb[0])); } } ?>
