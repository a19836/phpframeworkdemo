<?php
/*
 * Copyright (c) 2007 PHPMyFrameWork - Joao Pinto
 * AUTHOR: Joao Paulo Lopes Pinto -- http://jplpinto.com
 * 
 * The use of this code must be allowed first by the creator Joao Pinto, since this is a private and proprietary code.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
include_once get_lib("org.phpframework.util.xml.MyXML"); class XMLSerializer { public static function generateValidXmlFromObj(stdClass $v972f1a5c2b, $v7d6fa9770b = 'nodes', $v68e994bbc0 = 'node') { $pfb662071 = get_object_vars($v972f1a5c2b); return self::generateValidXmlFromVar($pfb662071, $v7d6fa9770b, $v68e994bbc0); } public static function generateValidXmlFromVar($v847e7d0a83, $v7d6fa9770b = 'nodes', $v68e994bbc0 = 'node') { $v241205aec6 = '<?xml version="1.0" encoding="UTF-8" ?>'; $v241205aec6 .= '<' . $v7d6fa9770b . '>'; $v241205aec6 .= self::generateXmlFromVar($v847e7d0a83, $v68e994bbc0); $v241205aec6 .= '</' . $v7d6fa9770b . '>'; return $v241205aec6; } public static function generateXmlFromVar($v847e7d0a83, $v68e994bbc0 = 'node') { $v241205aec6 = ''; if (is_object($v847e7d0a83)) { $v3ae55a9a2e = get_class($v847e7d0a83); $pe3472391 = new ReflectionClass($v3ae55a9a2e); $v9a84a79e2e = $pe3472391->getFileName(); $pcbe93ee5 = $v9a84a79e2e ? str_replace("/", ".", substr($v9a84a79e2e, strlen(CMS_PATH), -4)) : ""; $v972f1a5c2b = urlencode(serialize($v847e7d0a83)); $v241205aec6 = "<" . $v68e994bbc0 . "_object><class><![CDATA[" . $v3ae55a9a2e . "]]></class><lib><![CDATA[" . $pcbe93ee5 . "]]></lib><code><![CDATA[" . $v972f1a5c2b . "]]></code></" . $v68e994bbc0 . "_object>"; } else if (is_array($v847e7d0a83)) { foreach ($v847e7d0a83 as $pbfa01ed1 => $v67db1bd535) { if (is_numeric($pbfa01ed1)) $pbfa01ed1 = $v68e994bbc0; $v241205aec6 .= '<' . $pbfa01ed1 . '>' . self::generateXmlFromVar($v67db1bd535, $v68e994bbc0) . '</' . $pbfa01ed1 . '>'; } } else { $v241205aec6 = "<![CDATA[$v847e7d0a83]]>"; } return $v241205aec6; } public static function convertValidXmlToVar($v241205aec6, $v7d6fa9770b = 'nodes', $v68e994bbc0 = 'node') { if ($v241205aec6) { if (!MyXML::isXMLContentValid($v241205aec6)) { launch_exception(new Exception("Incorrect xml: <br>" . $v241205aec6)); return null; } $v6dcd71ad57 = new MyXML($v241205aec6); $v847e7d0a83 = $v6dcd71ad57->toArray(array("simple" => 1)); $v847e7d0a83 = MyXML::complexArrayToBasicArray($v847e7d0a83); if (isset($v847e7d0a83[$v7d6fa9770b])) { $v847e7d0a83 = $v847e7d0a83[$v7d6fa9770b]; if (is_array($v847e7d0a83)) $v847e7d0a83 = self::convertVarArrayWithNumericIndexes($v847e7d0a83, $v68e994bbc0); return $v847e7d0a83; } } return null; } public static function convertVarArrayWithNumericIndexes($pfb662071, $v68e994bbc0 = 'node') { if (is_array($pfb662071)) foreach ($pfb662071 as $pe5c5e2fe => $v956913c90f) { if ($pe5c5e2fe == $v68e994bbc0) { $v40f192ed08 = is_array($v956913c90f) && $v956913c90f && array_keys($v956913c90f) === range(0, count($v956913c90f) - 1); unset($pfb662071[$pe5c5e2fe]); $v956913c90f = self::convertVarArrayWithNumericIndexes($v956913c90f, $v68e994bbc0); if ($v40f192ed08) $pfb662071 = array_merge($pfb662071, $v956913c90f); else $pfb662071[0] = $v956913c90f; } else if ($pe5c5e2fe == $v68e994bbc0 . "_object") { $pcbe93ee5 = isset($v956913c90f["lib"]) ? $v956913c90f["lib"] : null; $v972f1a5c2b = isset($v956913c90f["code"]) ? $v956913c90f["code"] : null; $pcbe93ee5 = $pcbe93ee5 ? get_lib($pcbe93ee5) : ""; if ($pcbe93ee5 && file_exists($pcbe93ee5)) include_once $pcbe93ee5; return unserialize(urldecode($v972f1a5c2b)); } else $pfb662071[$pe5c5e2fe] = self::convertVarArrayWithNumericIndexes($v956913c90f, $v68e994bbc0); } return $pfb662071; } } ?>
